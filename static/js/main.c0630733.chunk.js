/*! For license information please see main.c0630733.chunk.js.LICENSE.txt */
(this["webpackJsonpapp.deri.finance"]=this["webpackJsonpapp.deri.finance"]||[]).push([[4],{0:function(t,e,n){"use strict";n.d(e,"c",(function(){return u})),n.d(e,"z",(function(){return p})),n.d(e,"A",(function(){return l})),n.d(e,"D",(function(){return d})),n.d(e,"y",(function(){return c})),n.d(e,"w",(function(){return y})),n.d(e,"x",(function(){return m})),n.d(e,"B",(function(){return b})),n.d(e,"C",(function(){return f})),n.d(e,"f",(function(){return T})),n.d(e,"g",(function(){return g})),n.d(e,"e",(function(){return h})),n.d(e,"v",(function(){return w})),n.d(e,"d",(function(){return v})),n.d(e,"i",(function(){return A})),n.d(e,"b",(function(){return M})),n.d(e,"r",(function(){return k})),n.d(e,"t",(function(){return I})),n.d(e,"q",(function(){return O})),n.d(e,"j",(function(){return C})),n.d(e,"u",(function(){return x})),n.d(e,"m",(function(){return j})),n.d(e,"n",(function(){return P})),n.d(e,"p",(function(){return B})),n.d(e,"o",(function(){return _})),n.d(e,"s",(function(){return S})),n.d(e,"k",(function(){return F})),n.d(e,"l",(function(){return E})),n.d(e,"h",(function(){return R}));var i=n(10),a=n.n(i),s=n(20),r=n.n(s);n.d(e,"a",(function(){return r.a}));var o=n(11);r.a.config({DECIMAL_PLACES:18,ROUNDING_MODE:r.a.ROUND_DOWN,EXPONENTIAL_AT:256});const u=(t,e=0)=>0===e?r()(t):e>0?r()(t).times(r()(`1${"0".repeat(e)}`)):r()(t).div(r()(`1${"0".repeat(-e)}`)),p=(t,e)=>t.gte(e)?t:e,l=(t,e)=>t.lte(e)?t:e,d=t=>a.a.utils.toChecksumAddress(t),c=t=>a.a.utils.hexToUtf8(t),y=t=>a.a.utils.hexToNumber(t),m=t=>a.a.utils.hexToNumberString(t),b=t=>u(t,18).toFixed(0),f=t=>`${u(t).sd(4).times(100).toFixed(4).toString()}%`,T=t=>u(t,-18),g=t=>u(t).toString(),h=t=>1===u(t).toNumber(),w=(...t)=>t.some((t=>isNaN(t.toString())||"0"===t.toString())),v=async t=>{try{if((await fetch(t)).ok)return!0}catch(e){}return!1},A=async(t=[])=>{for(let e=0;e<t.length;e++){const n=t[e];if(await v(n))return n}throw new Error("No alive http server in urls",t)},M="0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",k=t=>{let e;switch(t=D(t)){case"1":e="ethereum";break;case"56":e="bsc";break;case"128":e="heco";break;case"3":e="ropsten";break;case"42":e="kovan";break;case"97":e="bsctestnet";break;case"256":e="hecotestnet";break;default:throw new Error("The networkId is not valid")}return e},I=(t,e)=>{t=D(t);const n=Object(o.getContractAddressConfig)(o.DeriEnv.get()).filter((e=>e.chainId===t)).filter((t=>t.pool===e));return n.length>0?{poolAddress:n[0].pool,bTokenAddress:n[0].bToken,pTokenAddress:n[0].pToken,lTokenAddress:n[0].lToken,dTokenAdress:n[0].dToken,MinningVaultAddress:n[0].MiningVault,bTokenSymbol:n[0].bTokenSymbol,symbol:n[0].symbol,unit:n[0].unit,initialBlock:n[0].initialBlock}:[]},O=t=>{t=D(t);const e=Object(o.getContractAddressConfig)(o.DeriEnv.get()).filter((e=>e.chainId===t));if(e.length>0&&e[0].MiningVault)return e[0].MiningVault},C=t=>{const e=Object(o.getAnnualBlockNumberConfig)();if(e[t])return parseInt(e[t]);console.log(`cannot find the annual block number with chainId: ${t}`)},x=(t,e)=>{t=D(t);const n=Object(o.getSlpContractAddressConfig)(o.DeriEnv.get()).filter((e=>e.chainId===t)).filter((t=>t.pool===e));return n.length>0?{poolAddress:n[0].pool,bTokenAddress:n[0].bToken,pTokenAddress:n[0].pToken,lTokenAddress:n[0].lToken,dTokenAdress:n[0].dToken,MinningVaultAddress:n[0].MiningVault}:(console.log(`getSlpContractAddress(): contract address is not found: ${t} ${e}`),{})},j=(t,e)=>{t=D(t);const n=Object(o.getClp2ContractAddressConfig)(o.DeriEnv.get()).filter((e=>e.chainId===t)).filter((t=>t.pool===e));return n.length>0?{poolAddress:n[0].pool,bTokenAddress:n[0].bToken,pTokenAddress:n[0].pToken,lTokenAddress:n[0].lToken,dTokenAdress:n[0].dToken,MinningVaultAddress:n[0].MiningVault}:(console.log(`getClp2ContractAddress(): contract address is not found: ${t} ${e}`),{})},P=(t,e)=>{t=D(t);const n=Object(o.getClpContractAddressConfig)(o.DeriEnv.get()).filter((e=>e.chainId===t)).filter((t=>t.pool===e));return n.length>0?{poolAddress:n[0].pool,bTokenAddress:n[0].bToken,lTokenAddress:n[0].lToken}:(console.log(`getClpContractAddress(): contract address is not found: ${t} ${e}`),{})},B=(t,e)=>{t=D(t);const n=Object(o.getLpContractAddressConfig)(o.DeriEnv.get()).filter((e=>e.chainId===t)).filter((t=>t.pool===e));return n.length>0?{poolAddress:n[0].pool,bTokenAddress:n[0].bToken,lTokenAddress:n[0].lToken,type:n[0].type}:(console.log(`getLpContractAddress(): contract address is not found: ${t} ${e}`),{})},_=t=>{t=D(t);const e=Object(o.getDeriContractAddressConfig)(o.DeriEnv.get()).filter((e=>e.chainId===t));return e.length>0?{deriAddress:e[0].Deri,wormholeAddress:e[0].Wormhole,bTokenSymbol:e[0].bTokenSymbol}:(console.log(`getDeriContractAddress(): contract address is not found: ${t}`),{})},S=async(t,e)=>{let n,i=((t,e)=>{const n=o.DeriEnv.get(),{symbol:i}=I(t,e),a=(t,e="BTCUSD")=>`${t}?symbol=${e}`;return"prod"===n||"production"===n?i?a("https://oracle4.deri.finance/price",i):"https://oracle4.deri.finance/price":i?a("https://oracle2.deri.finance/price",i):"https://oracle2.deri.finance/price"})(t,e),a=2;for(;a>0&&(n=await fetch(i,{mode:"cors",cache:"no-cache"}),!n.ok);)a-=1;if(0===a&&!n)throw new Error("fetch oracle info error: exceed max retry(2).");return await n.json()},F=async(t,e)=>{const n=await S(t,e);let i=n.price;return i||(i="0"),T(n.price).toString()},E=async t=>{t=D(t);const e=Object(o.getChainProviderUrlsConfig)(t);if(e.length>0)return await A(e);throw new Error(`Cannot find the chain provider url with chainId: ${t}`)},R=t=>t.toFormat().replaceAll(",","").toString(),D=t=>{let e=t?t.toString():t;if(t&&["1","56","128","3","42","97","256","137","80001"].includes(e))return e;throw new Error(`invalid chainId: ${t}`)}},101:function(t,e,n){"use strict";var i=n(2),a=n.n(i),s=n(243),r=n.n(s),o=n(135),u=n.n(o),p=(n(258),n(43));class l extends a.a.Component{componentWillMount(){u.a.start()}componentWillUnmount(){u.a.done()}render(){return Object(p.jsx)("div",{})}}e.a=t=>r()({loader:t,loading:()=>Object(p.jsx)(l,{})})},11:function(t,e,n){"use strict";n.r(e),n.d(e,"DeriEnv",(function(){return i.a})),n.d(e,"ChainProviderUrls",(function(){return a})),n.d(e,"getChainProviderUrlsConfig",(function(){return s})),n.d(e,"getContractAddressConfig",(function(){return r})),n.d(e,"getSlpContractAddressConfig",(function(){return o})),n.d(e,"getClpContractAddressConfig",(function(){return u})),n.d(e,"getClp2ContractAddressConfig",(function(){return p})),n.d(e,"getLpContractAddressConfig",(function(){return l})),n.d(e,"getMiningVaultRouterContractAddress",(function(){return d})),n.d(e,"getDeriContractAddressConfig",(function(){return c})),n.d(e,"getAnnualBlockNumberConfig",(function(){return y})),n.d(e,"getDBProviderUrlsConfig",(function(){return m.c})),n.d(e,"getDBAddressConfig",(function(){return m.a})),n.d(e,"getDBWormholeAddressConfig",(function(){return m.d})),n.d(e,"getDBAirdropAddressConfig",(function(){return m.b})),n.d(e,"getRestServerConfig",(function(){return b})),n.d(e,"getRedisWorkerQueneConfig",(function(){return f}));var i=n(71);const a=[{provider_urls:["https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584"],chainId:"1"},{provider_urls:["https://bsc-dataseed.binance.org","https://bsc-dataseed1.defibit.io/","https://bsc-dataseed1.ninicoin.io/"],chainId:"56"},{provider_urls:["https://http-mainnet.hecochain.com"],chainId:"128"},{provider_urls:["https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584"],chainId:"3"},{provider_urls:["https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584"],chainId:"42"},{provider_urls:["https://data-seed-prebsc-2-s3.binance.org:8545/","https://data-seed-prebsc-1-s1.binance.org:8545/","https://data-seed-prebsc-2-s1.binance.org:8545/","https://data-seed-prebsc-1-s2.binance.org:8545/","https://data-seed-prebsc-2-s2.binance.org:8545/","https://data-seed-prebsc-1-s3.binance.org:8545/"],chainId:"97"},{provider_urls:["https://http-testnet.hecochain.com"],chainId:"256"}],s=t=>{const e=[{provider_urls:["https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584"],chainId:"1"},{provider_urls:["https://bsc-dataseed.binance.org","https://bsc-dataseed1.defibit.io/","https://bsc-dataseed1.ninicoin.io/"],chainId:"56"},{provider_urls:["https://http-mainnet.hecochain.com"],chainId:"128"},{provider_urls:["https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584"],chainId:"3"},{provider_urls:["https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584"],chainId:"42"},{provider_urls:["https://data-seed-prebsc-1-s1.binance.org:8545/","https://data-seed-prebsc-1-s2.binance.org:8545/","https://data-seed-prebsc-1-s3.binance.org:8545/","https://data-seed-prebsc-2-s1.binance.org:8545/","https://data-seed-prebsc-2-s2.binance.org:8545/","https://data-seed-prebsc-2-s3.binance.org:8545/"],chainId:"97"},{provider_urls:["https://http-testnet.hecochain.com"],chainId:"256"}].filter((e=>e.chainId===t));if(e.length>0)return e[0].provider_urls;throw new Error(`getChainProviderUrlsConfig: no urls for chainId ${t}`)},r=(t="dev")=>"prod"===t?[{pool:"0xAf081e1426f64e74117aD5F695D2A80482679DE5",bToken:"0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56",pToken:"0x3c11c4990447F0AD575eBd74E8cD17bf61848A15",lToken:"0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9",dToken:"0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9",MiningVault:"0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17",initialBlock:"7906919",bTokenSymbol:"BUSD",symbol:"BTCUSD",unit:"BTC",chainId:"56",version:"v1"},{pool:"0x011346B81e5326904B5B76A11dECAf2c67eFFc23",bToken:"0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56",pToken:"0xaE6429b4CDDDFefDB6ac702183c836B4e62Da410",lToken:"0xd8f78c47b0e0943B3Cb2cE1e1726472C4ddd2F98",dToken:"0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9",MiningVault:"0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17",initialBlock:"6753399",bTokenSymbol:"BUSD",symbol:"COIN",unit:"COIN",chainId:"56",version:"v1"},{pool:"0xD3f5E6D1a25dA1E64EDf7cb571f9fAD17FEb623c",bToken:"0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5",pToken:"0x29Be63E854727BB3Fef77eB107B8d1c33081f989",lToken:"0x610b39F9ba0fF2167AEb646462473c011A431Cd7",dToken:"0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9",MiningVault:"0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17",initialBlock:"8005906",bTokenSymbol:"DERI",symbol:"iMEME",unit:"iMEME",chainId:"56",version:"v1"},{pool:"0x23779AAc1e74a65F27B4840A8E41F767Ce993118",bToken:"0xdAC17F958D2ee523a2206206994597C13D831ec7",pToken:"0x9c6134F9e759C6812aaC102FC1a9f7cA5615fD33",lToken:"0x43CA6D7129d7F490d5B91B4D14D7c877D15A92dA",dToken:"0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9",MiningVault:"0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8",initialBlock:"11949433",bTokenSymbol:"USDT",symbol:"BTCUSD",unit:"BTC",chainId:"1",version:"v1"},{pool:"0x96a1F15676746b9339DBc185F277618359Ac6346",bToken:"0x3449FC1Cd036255BA1EB19d65fF4BA2b8903A69a",pToken:"0x15aD9b67cf54037127fD986Ca3bB775f9FC4ad05",lToken:"0xeC27d4c53C2E29F1113A9667c0B19442df83c1f1",dToken:"0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9",MiningVault:"0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8",initialBlock:"11860070",bTokenSymbol:"BAC",symbol:"BTCUSD",unit:"BTC",chainId:"1",version:"v1"},{pool:"0xBA7e183042c8796E26A5a2375927DE7B1AB99d97",bToken:"0x0298c2b32eaE4da002a15f36fdf7615BEa3DA047",pToken:"0x732Ba556B304fd74Cd14b74ab8762A7D9f26d476",lToken:"0x90fE976Cbb48E0761A84DDA2974024377994a997",dToken:"0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9",MiningVault:"0xF0bC8b772f26F8DeB46c1aebbEA7C8d502Abf3b8",initialBlock:"2557914",bTokenSymbol:"HUSD",symbol:"BTCUSD",unit:"BTC",chainId:"128",version:"v1"}]:[{pool:"0x372b640A00a0A6B73381e9363A39644a712cCc37",bToken:"0x4038191eFb39Fe1d21a48E061F8F14cF4981A0aF",pToken:"0xB9113758D771750e9E8ECb359A19689eC89AC1a5",lToken:"0xC727a10Be4740441BE74960296097aF39D701980",initialBlock:"9378545",bTokenSymbol:"BUSD",symbol:"BTCUSD",unit:"BTC",chainId:"97",version:"v1"}],o=(t="dev")=>"prod"===t?[{pool:"0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd",bToken:"0xA3DfbF2933FF3d96177bde4928D0F5840eE55600",pToken:"0x0000000000000000000000000000000000000000",lToken:"0x0000000000000000000000000000000000000000",dToken:"0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9",MiningVault:"0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8",chainId:"1",bTokenSymbol:"DERI-USDT SLP",symbol:"--"}]:(console.log("getSlpContractAddressConfig(): no config for dev environment"),[]),u=(t="dev")=>"prod"===t?[{pool:"0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98",bToken:"0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256",pToken:"0x0000000000000000000000000000000000000000",lToken:"0x83b31Abc899863B8Eb06952994580CE86414156E",dToken:"0x0000000000000000000000000000000000000000",MiningVault:"0x0000000000000000000000000000000000000000",initialBlock:"6894880",chainId:"56",bTokenSymbol:"CAKE-LP",symbol:"--"}]:[],p=(t="dev")=>"prod"===t?[{pool:"0x73feaa1eE314F8c655E354234017bE2193C9E24E",bToken:"0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256",pToken:"0x0000000000000000000000000000000000000000",lToken:"0x0000000000000000000000000000000000000000",dToken:"0x0000000000000000000000000000000000000000",MiningVault:"0x0000000000000000000000000000000000000000",initialBlock:"699498",chainId:"56",bTokenSymbol:"CAKE-LP SYRUP",symbol:"--"}]:[],l=(t="dev")=>"prod"===t?[{pool:"0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd",bToken:"0xA3DfbF2933FF3d96177bde4928D0F5840eE55600",pToken:"0x0000000000000000000000000000000000000000",lToken:"0x0000000000000000000000000000000000000000",dToken:"0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9",MiningVault:"0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8",chainId:"1",bTokenSymbol:"DERI-USDT SLP",symbol:"--",type:"slp"},{pool:"0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98",bToken:"0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256",pToken:"0x0000000000000000000000000000000000000000",lToken:"0x83b31Abc899863B8Eb06952994580CE86414156E",dToken:"0x0000000000000000000000000000000000000000",MiningVault:"0x0000000000000000000000000000000000000000",initialBlock:"6894880",chainId:"56",bTokenSymbol:"CAKE-LP",symbol:"--",type:"clp"},{pool:"0x73feaa1eE314F8c655E354234017bE2193C9E24E",bToken:"0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256",pToken:"0x0000000000000000000000000000000000000000",lToken:"0x0000000000000000000000000000000000000000",dToken:"0x0000000000000000000000000000000000000000",MiningVault:"0x0000000000000000000000000000000000000000",initialBlock:"699498",chainId:"56",bTokenSymbol:"CAKE-LP SYRUP",symbol:"--",type:"clp2"}]:[],d=t=>{const e=[{MiningVaultRouter:"0x8d5613451Dc0592388f98d7Ab1ce5A732561936e",chainId:"56"}].filter((e=>e.chainId===t));if(e.length>0)return e[0].MiningVaultRouter;throw new Error(`getMiningVaultRouterAddressConfig: no address for chainId ${t}`)},c=(t="dev")=>"prod"===t?[{Deri:"0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9",Wormhole:"0x6874640cC849153Cb3402D193C33c416972159Ce",bTokenSymbol:"DERI",chainId:"1"},{Deri:"0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5",Wormhole:"0x15a5969060228031266c64274a54e02Fbd924AbF",bTokenSymbol:"DERI",chainId:"56"},{Deri:"0x2bdA3e331Cf735D9420e41567ab843441980C4B8",Wormhole:"0x134A04497e9a0b1F8850fEaf87eD18ec348dDa46",bTokenSymbol:"DERI",chainId:"128"}]:[{Deri:"0x88Fe79a3b6AC7EeF3d55B2e388fa18400590698B",Wormhole:"0xcb28Fa7dFa1844Cdb47aD5f03484f6131293Fd2e",bTokenSymbol:"DERI",chainId:"3"},{Deri:"0x8dC0aA48bbc69BaCD2548c6b7adCDeF8DDbA50B2",Wormhole:"0x9028e43114Df57C97c15355224E575DF1e244919",bTokenSymbol:"DERI",chainId:"97"},{Deri:"0x932458a637F8060AF747167656651b64d4c36620",Wormhole:"0x629B0D3D32BE5ee5F7BF3845914d26446c04165d",bTokenSymbol:"DERI",chainId:"256"}],y=()=>({1:"2367422",56:"10497304",128:"10511369",3:"2367422",97:"10497304",256:"10511369"});var m=n(44);const b=(t="dev")=>"prod"===t||"production"===t?"https://api.deri.finance":"https://apitest.deri.finance",f=(t="dev")=>"prod"===t?["trade_tx_quene","trade_worker_group"]:["trade_tx_quene_dev","trade_worker_group_dev"]},140:function(t){t.exports=JSON.parse('{"prod":{"chainInfo":{"1":{"name":"Ethereum","text":"ETHEREUM","symbol":"ETH","viewUrl":"https://etherscan.io/"},"56":{"name":"bsc","text":"BSC","symbol":"BNB","viewUrl":"https://bscscan.com/"},"128":{"name":"heco","text":"HECO","symbol":"HT","viewUrl":"https://hecoscan.xyz/"}},"oracle":{"COIN":"https://oracle3.deri.finance/price","BTCUSD":"https://oracle.deri.finance/price"}},"dev":{"chainInfo":{"97":{"name":"Bsc-testnet","text":"BSC TESTNET","symbol":"BNB","viewUrl":"https://testnet.bscscan.com/"},"80001":{"name":"Matic-Testnet","text":"MATIC TESTNET","symbol":"MATIC","viewUrl":"https://explorer-mumbai.maticvigil.com/"}},"oracle":{"COIN":"https://oracle2.deri.finance/price","BTCUSD":"https://oracle2.deri.finance/price"}}}')},141:function(t,e,n){"use strict";n.d(e,"a",(function(){return s}));var i=n(3),a=n(17);class s{constructor(){this.all=[],Object(i.o)(this,{all:i.p,setAll:i.f})}load(t){const e=t&&t.current;let n=Object(a.getContractAddressConfig)(a.DeriEnv.get(),e);return t&&(n=n.filter((e=>e.version===t.current)),t.isV2&&(n=n.reduce(((t,e)=>{const n=t.findIndex((t=>t.symbol===e.symbol)),i=t.findIndex((t=>t.pool===e.pool));return-1!==n&&-1!==i||t.push(e),t}),[]))),this.setAll(n),this.all}setAll(t){this.all=t}}},16:function(t,e,n){"use strict";n.d(e,"j",(function(){return et})),n.d(e,"n",(function(){return nt})),n.d(e,"m",(function(){return it})),n.d(e,"a",(function(){return at})),n.d(e,"t",(function(){return st})),n.d(e,"p",(function(){return ut})),n.d(e,"o",(function(){return pt})),n.d(e,"s",(function(){return dt})),n.d(e,"r",(function(){return lt})),n.d(e,"d",(function(){return ct})),n.d(e,"g",(function(){return yt})),n.d(e,"h",(function(){return ft})),n.d(e,"e",(function(){return Tt})),n.d(e,"k",(function(){return gt})),n.d(e,"f",(function(){return ht})),n.d(e,"i",(function(){return mt})),n.d(e,"l",(function(){return wt})),n.d(e,"q",(function(){return Mt})),n.d(e,"v",(function(){return kt})),n.d(e,"c",(function(){return It})),n.d(e,"w",(function(){return Ot})),n.d(e,"u",(function(){return Ct})),n.d(e,"b",(function(){return xt}));var i=n(6),a=n(10),s=n.n(a),r=n(20),o=n.n(r);o.a.config({DECIMAL_PLACES:18,ROUNDING_MODE:o.a.ROUND_DOWN,EXPONENTIAL_AT:256});const u=(t,e=0)=>0===e?o()(t):e>0?o()(t).times(o()(`1${"0".repeat(e)}`)):o()(t).div(o()(`1${"0".repeat(-e)}`)),p=(t,e)=>t.gte(e)?t:e,l=(t,e)=>t.lte(e)?t:e,d=t=>u(t,-18),c=t=>u(t,18).toFixed(0),y=t=>s.a.utils.numberToHex(t),m=async t=>{try{if((await fetch(t)).ok)return!0}catch(e){console.log(e)}return!1},b=t=>{let e=t?t.toString():t;if(t&&["1","56","128","3","42","97","256","137","80001"].includes(e))return e;throw new Error(`invalid chainId: ${t}`)},f=(...t)=>t.every((t=>!isNaN(parseFloat(t)))),T=async t=>{t=b(t);const e=Object(i.getChainProviderUrls)(t);if(e.length>0)return["56","128","97","256"].includes(t)?await(async(t=[])=>{for(let e=0;e<t.length;e++){const n=t[e];if(await m(n))return n}throw new Error("No alive http server in urls",t)})(e):e[0];throw new Error(`Cannot find the chain provider url with chainId: ${t}`)};var g=n(11);class h{constructor(t,e,n){this.chainId=t,this.contractAddress=e,this.useInfura=n}async _init(){this.useInfura?this.web3=await D.getOrSet(this.chainId):this.web3=R()}async _call(t,e=[]){let n,i=2;for(;i>0;)try{await this._init(),n=await this.contract.methods[t](...e).call();break}catch(a){i-=1,this.web3=null,console.log(a)}return 0!==i||n||console.log(`method call '${t} ${e}' failed with max retry 3.`),n}async _estimatedGas(t,e=[],n){await this._init();let i=0;for(let s=0;s<2;s++)try{i=await this.contract.methods[t](...e).estimateGas({from:n}),i=parseInt(1.25*i);break}catch(a){}return(0==i||i>1e7)&&(i=832731),i}_getTransactionReceipt(t){const e=this;return function n(i,a){e.web3.eth.getTransactionReceipt(t,((t,e)=>{t?a(t):null===e?setTimeout((()=>n(i,a)),500):!1===e.status?(e.errorMessage="Transaction failed",a(e)):i(e)}))}}async _transact(t,e,n){await this._init();const i=await this._estimatedGas(t,e,n);let a=[{from:n,to:this.contractAddress,gas:y(i),value:y("0"),data:this.contract.methods[t](...e).encodeABI()}],s=await window.ethereum.request({method:"eth_sendTransaction",params:a});return await new Promise(this._getTransactionReceipt(s))}}const w=[{inputs:[{internalType:"uint256[9]",name:"parameters",type:"uint256[9]"},{internalType:"address[4]",name:"addresses",type:"address[4]"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"uint256",name:"bTokenId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"bAmount",type:"uint256"}],name:"AddLiquidity",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"uint256",name:"bTokenId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"bAmount",type:"uint256"}],name:"AddMargin",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"liquidator",type:"address"},{indexed:!1,internalType:"uint256",name:"reward",type:"uint256"}],name:"Liquidate",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"collector",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"ProtocolFeeCollection",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"uint256",name:"bTokenId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"bAmount",type:"uint256"}],name:"RemoveLiquidity",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"uint256",name:"bTokenId",type:"uint256"},{indexed:!1,internalType:"uint256",name:"bAmount",type:"uint256"}],name:"RemoveMargin",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"uint256",name:"symbolId",type:"uint256"},{indexed:!1,internalType:"int256",name:"tradeVolume",type:"int256"},{indexed:!1,internalType:"uint256",name:"price",type:"uint256"}],name:"Trade",type:"event"},{inputs:[{components:[{internalType:"address",name:"bTokenAddress",type:"address"},{internalType:"address",name:"swapperAddress",type:"address"},{internalType:"address",name:"oracleAddress",type:"address"},{internalType:"uint256",name:"decimals",type:"uint256"},{internalType:"int256",name:"discount",type:"int256"},{internalType:"int256",name:"price",type:"int256"},{internalType:"int256",name:"liquidity",type:"int256"},{internalType:"int256",name:"pnl",type:"int256"},{internalType:"int256",name:"cumulativePnl",type:"int256"}],internalType:"struct IPerpetualPool.BTokenInfo",name:"info",type:"tuple"}],name:"addBToken",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"uint256",name:"bTokenId",type:"uint256"},{internalType:"uint256",name:"bAmount",type:"uint256"},{internalType:"uint256",name:"blength",type:"uint256"},{internalType:"uint256",name:"slength",type:"uint256"}],name:"addLiquidity",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"uint256",name:"bTokenId",type:"uint256"},{internalType:"uint256",name:"bAmount",type:"uint256"}],name:"addMargin",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"string",name:"symbol",type:"string"},{internalType:"address",name:"oracleAddress",type:"address"},{internalType:"int256",name:"multiplier",type:"int256"},{internalType:"int256",name:"feeRatio",type:"int256"},{internalType:"int256",name:"fundingRateCoefficient",type:"int256"},{internalType:"int256",name:"price",type:"int256"},{internalType:"int256",name:"cumulativeFundingRate",type:"int256"},{internalType:"int256",name:"tradersNetVolume",type:"int256"},{internalType:"int256",name:"tradersNetCost",type:"int256"}],internalType:"struct IPerpetualPool.SymbolInfo",name:"info",type:"tuple"}],name:"addSymbol",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"targetPool",type:"address"}],name:"approvePoolMigration",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"collectProtocolFee",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"sourcePool",type:"address"}],name:"executePoolMigration",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"getAddresses",outputs:[{internalType:"address",name:"lTokenAddress",type:"address"},{internalType:"address",name:"pTokenAddress",type:"address"},{internalType:"address",name:"routerAddress",type:"address"},{internalType:"address",name:"protocolFeeCollector",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"bTokenId",type:"uint256"}],name:"getBToken",outputs:[{components:[{internalType:"address",name:"bTokenAddress",type:"address"},{internalType:"address",name:"swapperAddress",type:"address"},{internalType:"address",name:"oracleAddress",type:"address"},{internalType:"uint256",name:"decimals",type:"uint256"},{internalType:"int256",name:"discount",type:"int256"},{internalType:"int256",name:"price",type:"int256"},{internalType:"int256",name:"liquidity",type:"int256"},{internalType:"int256",name:"pnl",type:"int256"},{internalType:"int256",name:"cumulativePnl",type:"int256"}],internalType:"struct IPerpetualPool.BTokenInfo",name:"",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"bTokenId",type:"uint256"}],name:"getBTokenOracle",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getLengths",outputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getParameters",outputs:[{internalType:"uint256",name:"decimals0",type:"uint256"},{internalType:"int256",name:"minBToken0Ratio",type:"int256"},{internalType:"int256",name:"minPoolMarginRatio",type:"int256"},{internalType:"int256",name:"minInitialMarginRatio",type:"int256"},{internalType:"int256",name:"minMaintenanceMarginRatio",type:"int256"},{internalType:"int256",name:"minLiquidationReward",type:"int256"},{internalType:"int256",name:"maxLiquidationReward",type:"int256"},{internalType:"int256",name:"liquidationCutRatio",type:"int256"},{internalType:"int256",name:"protocolFeeCollectRatio",type:"int256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getProtocolFeeAccrued",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"symbolId",type:"uint256"}],name:"getSymbol",outputs:[{components:[{internalType:"string",name:"symbol",type:"string"},{internalType:"address",name:"oracleAddress",type:"address"},{internalType:"int256",name:"multiplier",type:"int256"},{internalType:"int256",name:"feeRatio",type:"int256"},{internalType:"int256",name:"fundingRateCoefficient",type:"int256"},{internalType:"int256",name:"price",type:"int256"},{internalType:"int256",name:"cumulativeFundingRate",type:"int256"},{internalType:"int256",name:"tradersNetVolume",type:"int256"},{internalType:"int256",name:"tradersNetCost",type:"int256"}],internalType:"struct IPerpetualPool.SymbolInfo",name:"",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"symbolId",type:"uint256"}],name:"getSymbolOracle",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"liquidator",type:"address"},{internalType:"address",name:"owner",type:"address"},{internalType:"uint256",name:"blength",type:"uint256"},{internalType:"uint256",name:"slength",type:"uint256"}],name:"liquidate",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"uint256",name:"bTokenId",type:"uint256"},{internalType:"uint256",name:"bAmount",type:"uint256"},{internalType:"uint256",name:"blength",type:"uint256"},{internalType:"uint256",name:"slength",type:"uint256"}],name:"removeLiquidity",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"uint256",name:"bTokenId",type:"uint256"},{internalType:"uint256",name:"bAmount",type:"uint256"},{internalType:"uint256",name:"blength",type:"uint256"},{internalType:"uint256",name:"slength",type:"uint256"}],name:"removeMargin",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"bTokenId",type:"uint256"},{internalType:"address",name:"swapperAddress",type:"address"},{internalType:"address",name:"oracleAddress",type:"address"},{internalType:"uint256",name:"discount",type:"uint256"}],name:"setBTokenParameters",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"symbolId",type:"uint256"},{internalType:"address",name:"oracleAddress",type:"address"},{internalType:"uint256",name:"feeRatio",type:"uint256"},{internalType:"uint256",name:"fundingRateCoefficient",type:"uint256"}],name:"setSymbolParameters",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"uint256",name:"symbolId",type:"uint256"},{internalType:"int256",name:"tradeVolume",type:"int256"},{internalType:"uint256",name:"blength",type:"uint256"},{internalType:"uint256",name:"slength",type:"uint256"}],name:"trade",outputs:[],stateMutability:"nonpayable",type:"function"}],v=[{inputs:[{internalType:"address",name:"lTokenAddress",type:"address"},{internalType:"address",name:"pTokenAddress",type:"address"},{internalType:"address",name:"liquidatorQualifierAddress",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"migrationTimestamp",type:"uint256"},{indexed:!1,internalType:"address",name:"source",type:"address"},{indexed:!1,internalType:"address",name:"target",type:"address"}],name:"ExecuteMigration",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"migrationTimestamp",type:"uint256"},{indexed:!1,internalType:"address",name:"source",type:"address"},{indexed:!1,internalType:"address",name:"target",type:"address"}],name:"PrepareMigration",type:"event"},{inputs:[{internalType:"address",name:"bTokenAddress",type:"address"},{internalType:"address",name:"swapperAddress",type:"address"},{internalType:"address",name:"oracleAddress",type:"address"},{internalType:"uint256",name:"discount",type:"uint256"}],name:"addBToken",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"bTokenId",type:"uint256"},{internalType:"uint256",name:"bAmount",type:"uint256"}],name:"addLiquidity",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"bTokenId",type:"uint256"},{internalType:"uint256",name:"bAmount",type:"uint256"},{components:[{internalType:"uint256",name:"symbolId",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],internalType:"struct IPerpetualPoolRouter.PriceInfo[]",name:"infos",type:"tuple[]"}],name:"addLiquidityWithPrices",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"bTokenId",type:"uint256"},{internalType:"uint256",name:"bAmount",type:"uint256"}],name:"addMargin",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"bTokenId",type:"uint256"},{internalType:"uint256",name:"bAmount",type:"uint256"},{components:[{internalType:"uint256",name:"symbolId",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],internalType:"struct IPerpetualPoolRouter.PriceInfo[]",name:"infos",type:"tuple[]"}],name:"addMarginWithPrices",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"string",name:"symbol",type:"string"},{internalType:"address",name:"oracleAddress",type:"address"},{internalType:"uint256",name:"multiplier",type:"uint256"},{internalType:"uint256",name:"feeRatio",type:"uint256"},{internalType:"uint256",name:"fundingRateCoefficient",type:"uint256"}],name:"addSymbol",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"approveMigration",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"claimNewController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"controller",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"sourceRouter",type:"address"}],name:"executeMigration",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"liquidate",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{components:[{internalType:"uint256",name:"symbolId",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],internalType:"struct IPerpetualPoolRouter.PriceInfo[]",name:"infos",type:"tuple[]"}],name:"liquidateWithPrices",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"liquidatorQualifier",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"migrationDestination",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"migrationTimestamp",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"pool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"target",type:"address"},{internalType:"uint256",name:"graceDays",type:"uint256"}],name:"prepareMigration",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"bTokenId",type:"uint256"},{internalType:"uint256",name:"bAmount",type:"uint256"}],name:"removeLiquidity",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"bTokenId",type:"uint256"},{internalType:"uint256",name:"bAmount",type:"uint256"},{components:[{internalType:"uint256",name:"symbolId",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],internalType:"struct IPerpetualPoolRouter.PriceInfo[]",name:"infos",type:"tuple[]"}],name:"removeLiquidityWithPrices",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"bTokenId",type:"uint256"},{internalType:"uint256",name:"bAmount",type:"uint256"}],name:"removeMargin",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"bTokenId",type:"uint256"},{internalType:"uint256",name:"bAmount",type:"uint256"},{components:[{internalType:"uint256",name:"symbolId",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],internalType:"struct IPerpetualPoolRouter.PriceInfo[]",name:"infos",type:"tuple[]"}],name:"removeMarginWithPrices",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"bTokenId",type:"uint256"},{internalType:"address",name:"swapperAddress",type:"address"},{internalType:"address",name:"oracleAddress",type:"address"},{internalType:"uint256",name:"discount",type:"uint256"}],name:"setBTokenParameters",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"qualifierAddress",type:"address"}],name:"setLiquidatorQualifier",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newController",type:"address"}],name:"setNewController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"poolAddress",type:"address"}],name:"setPool",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"symbolId",type:"uint256"},{internalType:"address",name:"oracleAddress",type:"address"},{internalType:"uint256",name:"feeRatio",type:"uint256"},{internalType:"uint256",name:"fundingRateCoefficient",type:"uint256"}],name:"setSymbolParameters",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"symbolId",type:"uint256"},{internalType:"int256",name:"tradeVolume",type:"int256"}],name:"trade",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"symbolId",type:"uint256"},{internalType:"int256",name:"tradeVolume",type:"int256"},{components:[{internalType:"uint256",name:"symbolId",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],internalType:"struct IPerpetualPoolRouter.PriceInfo[]",name:"infos",type:"tuple[]"}],name:"tradeWithPrices",outputs:[],stateMutability:"nonpayable",type:"function"}],A=[{inputs:[{internalType:"string",name:"name_",type:"string"},{internalType:"string",name:"symbol_",type:"string"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}],M=[{inputs:[{internalType:"string",name:"name_",type:"string"},{internalType:"string",name:"symbol_",type:"string"},{internalType:"uint256",name:"numBTokens_",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"operator",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"operator",type:"address"},{indexed:!1,internalType:"bool",name:"approved",type:"bool"}],name:"ApprovalForAll",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Transfer",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"owner",type:"address"},{indexed:!1,internalType:"uint256",name:"bTokenId",type:"uint256"},{indexed:!1,internalType:"int256",name:"liquidity",type:"int256"},{indexed:!1,internalType:"int256",name:"pnl",type:"int256"},{indexed:!1,internalType:"int256",name:"lastCumulativePnl",type:"int256"}],name:"UpdateAsset",type:"event"},{inputs:[{internalType:"address",name:"operator",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"approve",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"exists",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getApproved",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"uint256",name:"bTokenId",type:"uint256"}],name:"getAsset",outputs:[{components:[{internalType:"int256",name:"liquidity",type:"int256"},{internalType:"int256",name:"pnl",type:"int256"},{internalType:"int256",name:"lastCumulativePnl",type:"int256"}],internalType:"struct ILToken.Asset",name:"",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"getAssets",outputs:[{components:[{internalType:"int256",name:"liquidity",type:"int256"},{internalType:"int256",name:"pnl",type:"int256"},{internalType:"int256",name:"lastCumulativePnl",type:"int256"}],internalType:"struct ILToken.Asset[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"operator",type:"address"}],name:"isApprovedForAll",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"numBTokens",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"ownerOf",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"pool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"safeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],name:"safeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"operator",type:"address"},{internalType:"bool",name:"approved",type:"bool"}],name:"setApprovalForAll",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"num",type:"uint256"}],name:"setNumBTokens",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newPool",type:"address"}],name:"setPool",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalMinted",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"transferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"uint256",name:"bTokenId",type:"uint256"},{components:[{internalType:"int256",name:"liquidity",type:"int256"},{internalType:"int256",name:"pnl",type:"int256"},{internalType:"int256",name:"lastCumulativePnl",type:"int256"}],internalType:"struct ILToken.Asset",name:"asset",type:"tuple"}],name:"updateAsset",outputs:[],stateMutability:"nonpayable",type:"function"}],k=[{inputs:[{internalType:"string",name:"name_",type:"string"},{internalType:"string",name:"symbol_",type:"string"},{internalType:"uint256",name:"numSymbols_",type:"uint256"},{internalType:"uint256",name:"numBTokens_",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"operator",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"operator",type:"address"},{indexed:!1,internalType:"bool",name:"approved",type:"bool"}],name:"ApprovalForAll",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Transfer",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"uint256",name:"bTokenId",type:"uint256"},{indexed:!1,internalType:"int256",name:"amount",type:"int256"}],name:"UpdateMargin",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"uint256",name:"symbolId",type:"uint256"},{indexed:!1,internalType:"int256",name:"volume",type:"int256"},{indexed:!1,internalType:"int256",name:"cost",type:"int256"},{indexed:!1,internalType:"int256",name:"lastCumulativeFundingRate",type:"int256"}],name:"UpdatePosition",type:"event"},{inputs:[{internalType:"address",name:"operator",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"approve",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"exists",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getApproved",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"uint256",name:"bTokenId",type:"uint256"}],name:"getMargin",outputs:[{internalType:"int256",name:"",type:"int256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"getMargins",outputs:[{internalType:"int256[]",name:"",type:"int256[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"uint256",name:"symbolId",type:"uint256"}],name:"getPosition",outputs:[{components:[{internalType:"int256",name:"volume",type:"int256"},{internalType:"int256",name:"cost",type:"int256"},{internalType:"int256",name:"lastCumulativeFundingRate",type:"int256"}],internalType:"struct IPToken.Position",name:"",type:"tuple"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"getPositions",outputs:[{components:[{internalType:"int256",name:"volume",type:"int256"},{internalType:"int256",name:"cost",type:"int256"},{internalType:"int256",name:"lastCumulativeFundingRate",type:"int256"}],internalType:"struct IPToken.Position[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"operator",type:"address"}],name:"isApprovedForAll",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"numBTokens",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"numSymbols",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"ownerOf",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"pool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"safeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],name:"safeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"operator",type:"address"},{internalType:"bool",name:"approved",type:"bool"}],name:"setApprovalForAll",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"num",type:"uint256"}],name:"setNumBTokens",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"num",type:"uint256"}],name:"setNumSymbols",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newPool",type:"address"}],name:"setPool",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalMinted",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"transferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"uint256",name:"bTokenId",type:"uint256"},{internalType:"int256",name:"amount",type:"int256"}],name:"updateMargin",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"int256[]",name:"margins",type:"int256[]"}],name:"updateMargins",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"uint256",name:"symbolId",type:"uint256"},{components:[{internalType:"int256",name:"volume",type:"int256"},{internalType:"int256",name:"cost",type:"int256"},{internalType:"int256",name:"lastCumulativeFundingRate",type:"int256"}],internalType:"struct IPToken.Position",name:"position",type:"tuple"}],name:"updatePosition",outputs:[],stateMutability:"nonpayable",type:"function"}],I=[{inputs:[{internalType:"address",name:"oracle_",type:"address"},{internalType:"address",name:"token_",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{inputs:[],name:"_I_",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"oracle",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"token",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}],O=[{type:"constructor",stateMutability:"nonpayable",inputs:[{type:"address",name:"_aggregator",internalType:"address"},{type:"address",name:"_accessController",internalType:"address"}]},{type:"event",name:"AnswerUpdated",inputs:[{type:"int256",name:"current",internalType:"int256",indexed:!0},{type:"uint256",name:"roundId",internalType:"uint256",indexed:!0},{type:"uint256",name:"updatedAt",internalType:"uint256",indexed:!1}],anonymous:!1},{type:"event",name:"NewRound",inputs:[{type:"uint256",name:"roundId",internalType:"uint256",indexed:!0},{type:"address",name:"startedBy",internalType:"address",indexed:!0},{type:"uint256",name:"startedAt",internalType:"uint256",indexed:!1}],anonymous:!1},{type:"event",name:"OwnershipTransferRequested",inputs:[{type:"address",name:"from",internalType:"address",indexed:!0},{type:"address",name:"to",internalType:"address",indexed:!0}],anonymous:!1},{type:"event",name:"OwnershipTransferred",inputs:[{type:"address",name:"from",internalType:"address",indexed:!0},{type:"address",name:"to",internalType:"address",indexed:!0}],anonymous:!1},{type:"function",stateMutability:"nonpayable",outputs:[],name:"acceptOwnership",inputs:[]},{type:"function",stateMutability:"view",outputs:[{type:"address",name:"",internalType:"contract AccessControllerInterface"}],name:"accessController",inputs:[]},{type:"function",stateMutability:"view",outputs:[{type:"address",name:"",internalType:"address"}],name:"aggregator",inputs:[]},{type:"function",stateMutability:"nonpayable",outputs:[],name:"confirmAggregator",inputs:[{type:"address",name:"_aggregator",internalType:"address"}]},{type:"function",stateMutability:"view",outputs:[{type:"uint8",name:"",internalType:"uint8"}],name:"decimals",inputs:[]},{type:"function",stateMutability:"view",outputs:[{type:"string",name:"",internalType:"string"}],name:"description",inputs:[]},{type:"function",stateMutability:"view",outputs:[{type:"int256",name:"",internalType:"int256"}],name:"getAnswer",inputs:[{type:"uint256",name:"_roundId",internalType:"uint256"}]},{type:"function",stateMutability:"view",outputs:[{type:"uint80",name:"roundId",internalType:"uint80"},{type:"int256",name:"answer",internalType:"int256"},{type:"uint256",name:"startedAt",internalType:"uint256"},{type:"uint256",name:"updatedAt",internalType:"uint256"},{type:"uint80",name:"answeredInRound",internalType:"uint80"}],name:"getRoundData",inputs:[{type:"uint80",name:"_roundId",internalType:"uint80"}]},{type:"function",stateMutability:"view",outputs:[{type:"uint256",name:"",internalType:"uint256"}],name:"getTimestamp",inputs:[{type:"uint256",name:"_roundId",internalType:"uint256"}]},{type:"function",stateMutability:"view",outputs:[{type:"int256",name:"",internalType:"int256"}],name:"latestAnswer",inputs:[]},{type:"function",stateMutability:"view",outputs:[{type:"uint256",name:"",internalType:"uint256"}],name:"latestRound",inputs:[]},{type:"function",stateMutability:"view",outputs:[{type:"uint80",name:"roundId",internalType:"uint80"},{type:"int256",name:"answer",internalType:"int256"},{type:"uint256",name:"startedAt",internalType:"uint256"},{type:"uint256",name:"updatedAt",internalType:"uint256"},{type:"uint80",name:"answeredInRound",internalType:"uint80"}],name:"latestRoundData",inputs:[]},{type:"function",stateMutability:"view",outputs:[{type:"uint256",name:"",internalType:"uint256"}],name:"latestTimestamp",inputs:[]},{type:"function",stateMutability:"view",outputs:[{type:"address",name:"",internalType:"address payable"}],name:"owner",inputs:[]},{type:"function",stateMutability:"view",outputs:[{type:"address",name:"",internalType:"contract AggregatorV2V3Interface"}],name:"phaseAggregators",inputs:[{type:"uint16",name:"",internalType:"uint16"}]},{type:"function",stateMutability:"view",outputs:[{type:"uint16",name:"",internalType:"uint16"}],name:"phaseId",inputs:[]},{type:"function",stateMutability:"nonpayable",outputs:[],name:"proposeAggregator",inputs:[{type:"address",name:"_aggregator",internalType:"address"}]},{type:"function",stateMutability:"view",outputs:[{type:"address",name:"",internalType:"contract AggregatorV2V3Interface"}],name:"proposedAggregator",inputs:[]},{type:"function",stateMutability:"view",outputs:[{type:"uint80",name:"roundId",internalType:"uint80"},{type:"int256",name:"answer",internalType:"int256"},{type:"uint256",name:"startedAt",internalType:"uint256"},{type:"uint256",name:"updatedAt",internalType:"uint256"},{type:"uint80",name:"answeredInRound",internalType:"uint80"}],name:"proposedGetRoundData",inputs:[{type:"uint80",name:"_roundId",internalType:"uint80"}]},{type:"function",stateMutability:"view",outputs:[{type:"uint80",name:"roundId",internalType:"uint80"},{type:"int256",name:"answer",internalType:"int256"},{type:"uint256",name:"startedAt",internalType:"uint256"},{type:"uint256",name:"updatedAt",internalType:"uint256"},{type:"uint80",name:"answeredInRound",internalType:"uint80"}],name:"proposedLatestRoundData",inputs:[]},{type:"function",stateMutability:"nonpayable",outputs:[],name:"setController",inputs:[{type:"address",name:"_accessController",internalType:"address"}]},{type:"function",stateMutability:"nonpayable",outputs:[],name:"transferOwnership",inputs:[{type:"address",name:"_to",internalType:"address"}]},{type:"function",stateMutability:"view",outputs:[{type:"uint256",name:"",internalType:"uint256"}],name:"version",inputs:[]}];class C extends h{constructor(t,e,n=!1){super(t,e,n),this.contractAbi=w,this.bTokenLength=0,this.symbolLength=0,this.lTokenAddress="",this.pTokenAddress="",this.routerAddress="",this.protocolFeeCollector="",this.protocolFeeAccrued=0}async _init(){this.web3||(await super._init(),this.contract=new this.web3.eth.Contract(this.contractAbi,this.contractAddress))}async _update(){await Promise.all([this.getLengths(),this.getAddresses(),this.getParameters()])}async getLengths(){try{const t=await this._call("getLengths");t[0]&&t[1]&&(this.bTokenLength=parseInt(t[0]),this.symbolLength=parseInt(t[1]))}catch(t){throw new Error(`PerpetualPool#_getLength error: ${t}`)}}async getAddresses(){try{const t=await this._call("getAddresses");this.lTokenAddress=t.lTokenAddress,this.pTokenAddress=t.pTokenAddress,this.routerAddress=t.routerAddress,this.protocolFeeCollector=t.protocolFeeCollector}catch(t){throw new Error(`PerpetualPool#_getAddress error: ${t}`)}}async getParameters(){const t=await this._call("getParameters");return{decimals0:t.decimals0,minBToken0Ratio:d(t.minBToken0Ratio),minPoolMarginRatio:d(t.minPoolMarginRatio),minInitialMarginRatio:d(t.minInitialMarginRatio),minMaintenanceMarginRatio:d(t.minMaintenanceMarginRatio),minLiquidationReward:d(t.minLiquidationReward),maxLiquidationReward:d(t.maxLiquidationReward),liquidationCutRatio:d(t.liquidationCutRatio),protocolFeeCollectRatio:d(t.protocolFeeCollectRatio)}}async getProtocolFeeAccrued(){const t=await this._call("getProtocolFeeAccrued");this.protocolFeeAccrued=d(t)}async getBToken(t){try{const e=await this._call("getBToken",[t]);return{bTokenAddress:e.bTokenAddress,swapperAddress:e.bTokenAddress,oracleAddress:e.oracleAddress,decimals:e.decimals,discount:d(e.discount),price:d(e.price),liquidity:d(e.liquidity),pnl:d(e.pnl),cumulativePnl:d(e.cumulativePnl)}}catch(e){throw new Error(`PerpetualPool#getBToken error: ${e}`)}}async getBTokenOracle(t){return await this._call("getBTokenOracle",[t])}async getSymbol(t){try{const e=await this._call("getSymbol",[t]);return{symbol:e.symbol,oracleAddress:e.oracleAddress,multiplier:d(e.multiplier),feeRatio:d(e.feeRatio),fundingRateCoefficient:d(e.fundingRateCoefficient),price:d(e.price),cumulativeFundingRate:d(e.cumulativeFundingRate),tradersNetVolume:d(e.tradersNetVolume),tradersNetCost:d(e.tradersNetCost)}}catch(e){throw new Error(`PerpetualPool#getSymbol error: ${e}`)}}async getSymbolOracle(t){return await this._call("getSymbolOracle",[t])}async _getTimeStamp(t){return await this._init(),await this.web3.eth.getBlock(t)}_calculateFee(t,e,n,i){return u(t).abs().times(e).times(n).times(i).toString()}async _getBlockInfo(t){return await this._init(),await this.web3.eth.getBlock(t)}async _getPastEvents(t,e={},n=0,i=0){await this._init();let a,s=[];for(a=["56","97"].includes(this.chainId)?999:4999,n+a>i&&(a=i-n);n<=i;){let r=await this.contract.getPastEvents(t,{filter:e,fromBlock:n,toBlock:n+a});for(let t of r)s.push(t);(n+=a+1)+a>i&&(a=i-n)}return s}}class x extends h{constructor(t,e,n=!1){super(t,e,n),this.contractAbi=v,this.poolAddress=""}async _init(){this.web3||(await super._init(),this.contract=new this.web3.eth.Contract(this.contractAbi,this.contractAddress))}async pool(){return this.poolAddress=await this._call("pool"),this.poolAddress}async addLiquidity(t,e,n){return this.poolAddress||await this.pool(),await this._transact("addLiquidity",[e,c(n)],t)}async removeLiquidity(t,e,n,a){return a?await this._transact("removeLiquidity",[e,i.MAX_INT256],t):await this._transact("removeLiquidity",[e,c(n)],t)}async addMargin(t,e,n){return this.poolAddress||await this.pool(),await this._transact("addMargin",[e,c(n)],t)}async removeMargin(t,e,n,a){return this.poolAddress||await this.pool(),a?(console.log("->",i.MAX_INT256),await this._transact("removeMargin",[e,i.MAX_INT256],t)):await this._transact("removeMargin",[e,c(n)],t)}async trade(t,e,n){return this.poolAddress||await this.pool(),await this._transact("trade",[e,c(n)],t)}async addLiquidityWithPrices(t,e,n,i){return this.poolAddress||await this.pool(),await this._transact("addLiquidityWithPrices",[e,c(n),i],t)}async removeLiquidityWithPrices(t,e,n,a,s){return s?await this._transact("removeLiquidityWithPrices",[e,i.MAX_INT256,a],t):await this._transact("removeLiquidityWithPrices",[e,c(n),a],t)}async addMarginWithPrices(t,e,n,i){return this.poolAddress||await this.pool(),await this._transact("addMarginWithPrices",[e,c(n),i],t)}async removeMarginWithPrices(t,e,n,a,s){return this.poolAddress||await this.pool(),s?await this._transact("removeMarginWithPrices",[e,i.MAX_INT256,a],t):await this._transact("removeMarginWithPrices",[e,c(n),a],t)}async tradeWithPrices(t,e,n,i){return this.poolAddress||await this.pool(),await this._transact("tradeWithPrices",[e,c(n),i],t)}}class j extends h{constructor(t,e,n=!1){super(t,e,n),this.contractAbi=A}async _init(){this.web3||(await super._init(),this.contract=new this.web3.eth.Contract(this.contractAbi,this.contractAddress))}async symbol(){return await this._call("symbol")}async decimals(){return await this._call("decimals")}async _balanceOf(t){return await this._call("balanceOf",[t])}async balanceOf(t){const[e,n]=await Promise.all([this._balanceOf(t),this.decimals()]);return u(e,-n)}async totalSupply(){const t=await this._call("totalSupply");return d(t)}async isUnlocked(t,e){const n=await this._call("allowance",[t,e]);return u(n).gt(0)}async unlock(t,e){return await this._transact("approve",[e,i.MAX_UINT256],t)}}const P=t=>({liquidity:d(t[0]),pnl:d(t[1]),lastCumulativePnl:d(t[2])});class B extends h{constructor(t,e,n=!1){super(t,e,n),this.contractAbi=M}async _init(){this.web3||(await super._init(),this.contract=new this.web3.eth.Contract(this.contractAbi,this.contractAddress))}async balanceOf(t){return await this._call("balanceOf",[t])}async pool(){return await this._call("pool")}async exists(t){return await this._call("exists",[t])}async getAsset(t,e){const n=await this._call("getAsset",[t,e]);if(Array.isArray(n))return P(n);throw new Error(`LToken#getAsset: invalid result with (${t} ${e})`)}async getAssets(t){const e=await this._call("getAssets",[t]);if(Array.isArray(e))return e.map((t=>P(t)));throw new Error(`LToken#getAsset: invalid result with (${t})`)}}const _=t=>({volume:d(t.volume),cost:d(t.cost),lastCumulativeFundingRate:d(t.lastCumulativeFundingRate)});class S extends h{constructor(t,e,n=!1){super(t,e,n),this.contractAbi=k}async _init(){this.web3||(await super._init(),this.contract=new this.web3.eth.Contract(this.contractAbi,this.contractAddress))}async pool(){return await this._call("pool")}async balanceOf(t){return await this._call("balanceOf",[t])}async exists(t){return await this._call("exists",[t])}async getMargin(t,e){const n=await this._call("getMargin",[t,e]);return d(n)}async getMargins(t){const e=await this._call("getMargins",[t]);if(Array.isArray(e))return e.map((t=>d(t)))}async getPosition(t,e){const n=await this._call("getPosition",[t,e]);if(Array.isArray(n))return _(n);throw new Error(`PToken#getMargin: invalid result with (${t})`)}async getPositions(t){const e=await this._call("getPositions",[t]);if(Array.isArray(e))return e.map((t=>_(t)))}}class F extends h{constructor(t,e,n,i,a){super(t,e,a),this.contractAbi=I,this.symbol=n,this.decimal=i}async _init(){this.web3||(await super._init(),this.contract=new this.web3.eth.Contract(this.contractAbi,this.contractAddress))}async getPrice(){const t=await this._call("_I_");return u(t,`-${this.decimal}`).toString()}}class E extends h{constructor(t,e,n,i,a){super(t,e,a),this.contractAbi=O,this.symbol=n,this.decimal=i}async _init(){this.web3||(await super._init(),this.contract=new this.web3.eth.Contract(this.contractAbi,this.contractAddress))}async getPrice(){const t=await this._call("latestRoundData");if(t&&t.answer)return u(t.answer,`-${this.decimal}`).toString()}}const R=function(){let t=null;return()=>{if(null!==t)return t;if(void 0!==typeof window.ethereum)return t=new s.a(window.ethereum),t;throw new Error("Please install MetaMask first")}}(),D=function(){const t={};return{async getOrSet(e){if(Object.keys(t).includes(e))return t[e];console.log(`==== web3Factory(${e}), please caution the access limits ===`);const n=await T(e);return t[e]=new s.a(new s.a.providers.HttpProvider(n)),t[e]}}}(),q=function(){const t={};return(e,n,i)=>{const a=i?`${n}.useInfura`:n;return Object.keys(t).includes(a)||(t[a]=new C(e,n,i)),t[a]}}(),$=function(){const t={};return(e,n,i)=>{const a=i?`${n}.useInfura`:n;return Object.keys(t).includes(a)||(t[a]=new x(e,n,i)),t[a]}}(),L=function(){const t={};return(e,n,i)=>{const a=i?`${n}.useInfura`:n;return Object.keys(t).includes(a)||(t[a]=new j(e,n,i)),t[a]}}(),U=function(){const t={};return(e,n,i)=>{const a=i?`${n}.useInfura`:n;return Object.keys(t).includes(a)||(t[a]=new B(e,n,i)),t[a]}}(),N=function(){const t={};return(e,n,i)=>{const a=i?`${n}.useInfura`:n;return Object.keys(t).includes(a)||(t[a]=new S(e,n,i)),t[a]}}(),V=function(){const t={};return(e,n,i,a,s)=>{const r=s?`${n}.useInfura`:n;return Object.keys(t).includes(r)||(["80001","137"].includes(e)?t[r]=new E(e,n,i,a,s):t[r]=new F(e,n,i,a,s)),t[r]}}(),H=async(t,e,n=!1)=>{t=b(t);const a=Object(i.getOracleConfig)(t,e);if(a&&a.address){const i=V(t,a.address,e,a.decimal,n);return await i.getPrice()}},W=(t,e,n)=>t.eq(0)?u(0):e.div(t).div(n),z=(t,e,n,i,a,s)=>{const r=n.minus(e);let o=t.gt(0)?r.div(u(1).minus(s)).minus(i).div(t).div(a):r.div(u(1).plus(s)).minus(i).div(t).div(a);return o=p(o,u(0)),o},G=(t,e,n,i)=>{const a=e;return t.gte(a)?n.minus(i).gte(0)?{success:!0}:{success:!1,error:"Pool has insufficient liquidity"}:{success:!1,error:"Trader has insufficient margin"}},X=(t,e,n,i,a)=>{if(f(t,e,n,i,a))return u(i).eq(0)?u(0):u(t).times(e).times(n).times(a).div(i);throw new Error(`calculateFundingRate: invalid args: ${[t,e,n,i,a]}`)},Y=(t,e)=>{const n=(t=>{const e=Object(i.getAnnualBlockNumberConfig)();if(e[t])return parseInt(e[t]);throw new Error(`Invalid annual block number with chainId: ${t}`)})(t);return u(e).times(n)},J=t=>t.reduce(((t,e)=>t.plus(u(e.liquidity).times(e.price).times(e.discount).plus(e.pnl))),u(0)),K=(t,e,n,i)=>{t[e].liquidity=u(t[e].liquidity).plus(n);const a=J(t),s=t[0],r=u(s.liquidity).times(s.price).times(s.discount).plus(s.pnl);return!a.eq(0)&&r.div(a).times("1").lt(i)?{success:!1,error:"Trader has insufficient bToken0"}:{success:!0}},Q=(t,e,n,i,a,s)=>{u(n).gte(i)?t[e].liquidity=u(t[e].liquidity).minus(i):t[e].liquidity=u(t[e].liquidity).minus(n);let r=J(t),o=u(0);for(let p=0;p<a.length;p++){const t=a[p];if(!u(t.tradersNetVolume).eq(0)){const e=u(t.tradersNetVolume).times(t.price).times(t.multiplier);r=r.plus(t.tradersNetCost).minus(e),o=o.plus(e.abs())}}return!o.eq(0)&&r.div(o).times("1").lt(s)?{success:!1,error:"Trader has insufficient liquidity"}:{success:!0}};var Z=n(0),tt=n(4);const et=async(t,e,n,a,s)=>{try{const{lToken:r}=Object(i.getPoolConfig)(e,a),o=q(t,e,s),d=U(t,r,s),c=Object(i.getFilteredPoolConfigList)(e,null,"0").sort(((t,e)=>parseInt(t.bTokenId)-parseInt(e.bTokenId))),y=Object(i.getFilteredPoolConfigList)(e,"0").sort(((t,e)=>parseInt(t.symbolId)-parseInt(e.symbolId))),m=c.map((t=>t.bTokenId)),b=y.map((t=>t.symbolId)),[f,T,g]=await Promise.all([o.getParameters(),o.getBToken(a),d.getAsset(n,a)]),{minPoolMarginRatio:h}=f;let w=[];for(let t=0;t<m.length;t++)w.push(o.getBToken(m[t]));const v=await Promise.all(w);w=[];for(let t=0;t<b.length;t++)w.push(o.getSymbol(b[t]));const A=await Promise.all(w),M=A.reduce(((t,e)=>t.plus(u(e.tradersNetVolume).times(e.price).times(e.multiplier).abs())),u(0)),k=A.reduce(((t,e)=>t.plus(u(e.tradersNetVolume).times(e.price).times(e.multiplier).minus(e.tradersNetCost))),u(0)),I=v.reduce(((t,e,n)=>n===parseInt(a)?t.plus(e.pnl):t.plus(u(e.liquidity).times(e.price).times(e.discount).plus(e.pnl))),u(0)),{liquidity:O}=T,{liquidity:C,pnl:x,lastCumulativePnl:j}=g,P=((t,e,n,i,a,s)=>u(n).eq(0)?e:p(l(t.liquidity.minus(s.times(n).plus(i).minus(a).div(t.price).div(t.discount)).times("0.98"),e),u(0)))(v[a],C,M,k,I,h),B=x.plus(u(v[a].cumulativePnl).minus(j).times(C));return{poolLiquidity:O.toString(),shares:C.toString(),pnl:B.toString(),maxRemovableShares:P.toString()}}catch(r){console.log(r)}return{poolLiquidity:"",shares:"",pnl:"",maxRemovableShares:""}},nt=async(t,e,n)=>{const i=Object(tt.e)();try{const a=await i.getValues([`${t}.${e}.liquidity${n}`]).catch((t=>console.log("getPoolLiquidity",t)));if(a){const[t]=a;return{liquidity:d(t).toString(),symbol:""}}}catch(a){console.log(a)}return{liquidity:"",symbol:""}},it=async(t,e,n)=>{const i=Object(tt.e)(!0);try{const a=Object(Z.r)(t),s=await i.getValues([`${a}.${e}.apy${n}`,`${a}.${e}.volume.1h`,`${a}.${e}.volume.24h`]).catch((t=>console.log("getPoolInfoApy",t)));if(s){const[t,e,n]=s;return{apy:d(t).toString(),volume1h:d(e).toString(),volume24h:d(n).toString()}}}catch(a){console.log(a)}},at=async(t,e,n,a,s)=>{const{router:r}=Object(i.getPoolConfig)(e,s),o=$(t,r),u=q(t,e),p=Object(i.getFilteredPoolConfigList)(e,null,"0").sort(((t,e)=>parseInt(t.bTokenId)-parseInt(e.bTokenId))).map((t=>t.bTokenId));let l=[];for(let i=0;i<p.length;i++)l.push(u.getBToken(p[i]));const d=await Promise.all(l),{minBToken0Ratio:c}=await u.getParameters(),y=K(d,s,a,c);let m;if(y.success)try{m={success:!0,transaction:await o.addLiquidity(n,s,a)}}catch(b){m={success:!1,error:b}}else m={success:!1,error:y.error};return m},st=async(t,e,n,a,s,r=!1)=>{const{router:o}=Object(i.getPoolConfig)(e,s),u=$(t,o),{lToken:p}=Object(i.getPoolConfig)(e,s),l=q(t,e),d=U(t,p),c=await d.getAsset(n,s),{liquidity:y}=c,m=Object(i.getFilteredPoolConfigList)(e,null,"0").sort(((t,e)=>parseInt(t.bTokenId)-parseInt(e.bTokenId))).map((t=>t.bTokenId));let b=[];for(let i=0;i<m.length;i++)b.push(l.getBToken(m[i]));const f=await Promise.all(b);let T=Object(i.getFilteredPoolConfigList)(e,"0").sort(((t,e)=>parseInt(t.symbolId)-parseInt(e.symbolId))).map((t=>t.symbolId));b=[];for(let i=0;i<T.length;i++)b.push(l.getSymbol(T[i]));const g=await Promise.all(b),{minPoolMarginRatio:h}=await l.getParameters(),w=Q(f,s,a,y,g,h);let v;if(w.success)try{v={success:!0,transaction:await u.removeLiquidity(n,s,a,r)}}catch(A){v={success:!1,error:A}}else v={success:!1,error:w.error};return v},rt=function(){let t={};return{get(e,n){const i=`${e}.${n}`;if(Object.keys(t).includes(i)){const[e]=t[i].split("|");return e}console.log("please init priceCache first")},set(e,n,i){if(!isNaN(parseFloat(i))){const a=Date.now().toString();t[`${e}.${n}`]=`${i}|${a}`}}}}(),ot=function(){let t={};return{get(e,n,i){const a=`${e}.${n}.${i}`;if(Object.keys(t).includes(a))return t[a];console.log(`fundingRateCache: key is not in exist: ${a}`)},set(e,n,i,a){t[`${e}.${n}.${i}`]=a}}}(),ut=async(t,e,n,a,s)=>{try{const{symbol:r,bTokenSymbol:o}=Object(i.getPoolConfig)(e,n,a),u=q(t,e,s),[p,l]=await Promise.all([u.getSymbol(a),u.getParameters()]),{multiplier:d,feeRatio:c,fundingRateCoefficient:y}=p,{minPoolMarginRatio:m,minInitialMarginRatio:b,minMaintenanceMarginRatio:f,minLiquidationReward:T,maxLiquidationReward:g,liquidationCutRatio:h,protocolFeeCollectRatio:w}=l;return{symbol:r,bSymbol:o,multiplier:d.toString(),feeRatio:c.toString(),fundingRateCoefficient:y.toString(),minPoolMarginRatio:m.toString(),minInitialMarginRatio:b.toString(),minMaintenanceMarginRatio:f.toString(),minLiquidationReward:T.toString(),maxLiquidationReward:g.toString(),liquidationCutRatio:h.toString(),protocolFeeCollectRatio:w.toString()}}catch(r){console.log(r)}return{symbol:"",bSymbol:"",multiplier:"",feeRatio:"",fundingRateCoefficient:"",minPoolMarginRatio:"",minInitialMarginRatio:"",minMaintenanceMarginRatio:"",minLiquidationReward:"",maxLiquidationReward:"",liquidationCutRatio:"",protocolFeeCollectRatio:""}},pt=async(t,e,n,a,s)=>{try{const r=Object(i.getFilteredPoolConfigList)(e,null,a).sort(((t,e)=>parseInt(t.bTokenId)-parseInt(e.bTokenId))),o=Object(i.getFilteredPoolConfigList)(e,"0").sort(((t,e)=>parseInt(t.symbolId)-parseInt(e.symbolId))),p=r.map((t=>t.bTokenId)),l=o.map((t=>t.symbolId)),d=o.map((t=>t.symbol)),c=q(t,e,s),{pToken:y}=Object(i.getPoolConfig)(e,null,a),m=N(t,y,s),[b,f,T,g,h]=await Promise.all([c.getSymbol(a),c.getParameters(),m.getPosition(n,a),m.getMargins(n),m.getPositions(n)]),{volume:w,cost:v}=T,{multiplier:A}=b,{minInitialMarginRatio:M,minMaintenanceMarginRatio:k}=f;let I=[];for(let t=0;t<p.length;t++)I.push(c.getBToken(p[t]));const O=(await Promise.all(I)).reduce(((t,e,n)=>t.plus(u(e.price).times(e.discount).times(g[n]))),u(0));I=[];for(let t=0;t<l.length;t++)I.push(c.getSymbol(l[t]));const C=await Promise.all(I);I=[];for(let e=0;e<d.length;e++)I.push(H(t,d[e],s));const x=await Promise.all(I),j=x[a];rt.set(e,a,j);const P=C.reduce(((t,e,n)=>t.plus(u(x[n]).times(e.multiplier).times(h[n].volume).times(M).abs())),u(0)),B=u(w).abs().times(A).times(x[a]).times(M),_=C.reduce(((t,e,n)=>t.plus(u(x[n]).times(e.multiplier).times(h[n].volume).minus(h[n].cost))),u(0)),S=C.map(((t,e)=>[t.symbol,u(x[e]).times(t.multiplier).times(h[e].volume).minus(h[e].cost).toString()])),F=h.reduce(((t,e)=>t.plus(u(e.cost))),u(0)),E=C.reduce(((t,e,n)=>n!==parseInt(a)?t.plus(u(h[n].volume).times(x[n]).times(e.multiplier)):t),u(0));return{price:j,volume:w.toString(),averageEntryPrice:W(w,v,A).toString(),margin:O.toString(),marginHeld:P.toString(),marginHeldBySymbol:B.toString(),unrealizedPnl:_.toString(),unrealizedPnlList:S,liquidationPrice:z(w,O,F,E,A,k).toString()}}catch(r){console.log(r)}return{volume:"",averageEntryPrice:"",margin:"",marginHeld:"",unrealizedPnl:"",liquidationPrice:""}},lt=async(t,e,n,a,s)=>{const{bToken:r}=Object(i.getPoolConfig)(e,a);return(await L(t,r,s).balanceOf(n)).toString()},dt=async(t,e,n,a,s)=>{const{bToken:r}=Object(i.getPoolConfig)(e,a);return(await L(t,r,s)).isUnlocked(n,e)},ct=async(t,e,n,a,s)=>{let r=rt.get(e,a);const{symbol:o}=Object(i.getPoolConfig)(e,null,a);r||(r=await H(t,o,s),rt.set(e,a,r));let p=ot.get(t,e,a);p&&p.multiplier||(await bt(t,e,a,s),p=ot.get(t,e,a));const{multiplier:l,feeRatio:d}=p;return u(n).abs().times(r).times(l).times(d).toString()},yt=async(t,e,n,a,s,r,o)=>{const{symbol:p}=Object(i.getPoolConfig)(e,null,r),l=q(t,e,o),[d,c]=await Promise.all([H(t,p,o),l.getSymbol(r)]);rt.set(e,r,d);const{multiplier:y}=c;return u(a).abs().times(d).times(y).div(u(s)).toString()},mt=async(t,e,n)=>ot.get(t,e,n),bt=async(t,e,n,a)=>{const s=q(t,e,a),r=Object(i.getFilteredPoolConfigList)(e,null,n).sort(((t,e)=>parseInt(t.bTokenId)-parseInt(e.bTokenId))),{symbol:o}=Object(i.getPoolConfig)(e,null,n);let p=r.map((t=>t.bTokenId)),l=[];for(let i=0;i<p.length;i++)l.push(s.getBToken(i));const d=(await Promise.all(l)).reduce(((t,e)=>t.plus(u(e.liquidity).times(e.price).times(e.discount).plus(e.pnl))),u(0)),[c,y,m]=await Promise.all([H(t,o,a),s.getSymbol(n),s.getParameters()]);rt.set(e,n,c);const{multiplier:b,fundingRateCoefficient:f,tradersNetVolume:T,feeRatio:g}=y,{minPoolMarginRatio:h}=m,w=X(...[T,c,b,d,f]),v=Y(t,w);let A=Object(i.getFilteredPoolConfigList)(e,"0").sort(((t,e)=>parseInt(t.symbolId)-parseInt(e.symbolId))).map((t=>t.symbolId)),M=[];for(let i=0;i<A.length;i++)M.push(s.getSymbol(A[i]));const k=(await Promise.all(M)).reduce(((t,e)=>t.plus(u(e.tradersNetVolume).times(e.price).times(e.multiplier).times(h).abs())),u(0)),I={price:c,multiplier:b.toString(),feeRatio:g.toString(),tradersNetVolume:T.toString(),liquidity:d.toString(),fundingRateCoefficient:f.toString(),minPoolMarginRatio:h.toString(),fundingRatePerBlock:w,fundingRate:v,liquidityUsed:k.div(d)};return ot.set(t,e,n,I),I},ft=async(t,e,n,i)=>{try{const a=await bt(t,e,n,i),{fundingRate:s,fundingRatePerBlock:r,liquidity:o,tradersNetVolume:u}=a;return{fundingRate0:s.times(100).toString(),fundingRatePerBlock:r.toString(),liquidity:o.toString(),volume:"-",tradersNetVolume:u.toString()}}catch(a){console.log(a)}return{fundingRate0:"",fundingRatePerBlock:"",liquidity:"",volume:"",tradersNetVolume:""}},Tt=async(t,e,n,i,a)=>{try{let s=ot.get(t,e,i);s||(s=await bt(t,e,i,a));const r=[u(s.tradersNetVolume).plus(n).toString(),s.price,s.multiplier,s.liquidity,s.fundingRateCoefficient];let o=X(...r);return o=Y(t,o),{fundingRate1:o.times(100).toString()}}catch(s){console.log(s)}return{fundingRate1:""}},gt=async(t,e,n,i)=>{try{let a=ot.get(t,e,n);return a||(a=await bt(t,e,n,i)),{liquidityUsed0:a.liquidityUsed.times(100).toString()}}catch(a){console.log(a)}return{liquidityUsed0:""}},ht=async(t,e,n,a,s)=>{try{let r=ot.get(t,e,a);r||(r=await bt(t,e,a,s));const o=q(t,e,s);let p=Object(i.getFilteredPoolConfigList)(e,"0").sort(((t,e)=>parseInt(t.symbolId)-parseInt(e.symbolId))).map((t=>t.symbolId)),l=[];for(let t=0;t<p.length;t++)l.push(o.getSymbol(p[t]));let d=(await Promise.all(l)).reduce(((t,e,i)=>i===parseInt(a)?t.plus(u(e.price).times(e.multiplier).times(e.tradersNetVolume.plus(n)).abs()):t.plus(u(e.price).times(e.multiplier).times(e.tradersNetVolume).abs())),u(0));return{liquidityUsed1:d.times(r.minPoolMarginRatio).div(r.liquidity).times(100).toString()}}catch(r){console.log(r)}return{liquidityUsed1:""}},wt=async(t,e,n,a,s)=>{try{const r=Object(i.getFilteredPoolConfigList)(e,null,a).sort(((t,e)=>parseInt(t.bTokenId)-parseInt(e.bTokenId))),o=Object(i.getFilteredPoolConfigList)(e,"0").sort(((t,e)=>parseInt(t.symbolId)-parseInt(e.symbolId))),d=q(t,e,s),{pToken:c}=Object(i.getPoolConfig)(e,null,a),y=N(t,c,s);let m=r.map((t=>({bTokenId:t.bTokenId,bTokenSymbol:t.bTokenSymbol,bTokenAddress:t.bToken}))),b=[];for(let e=0;e<m.length;e++)b.push(L(t,m[e].bTokenAddress,s).balanceOf(n));const f=await Promise.all(b);for(let t=0;t<m.length;t++)m[t].walletBalance=f[t].toString();let T=r.map((t=>t.bTokenId)),g=o.map((t=>t.symbolId));const[h,w,v]=await Promise.all([y.getMargins(n),y.getPositions(n),d.getParameters()]),{minInitialMarginRatio:A}=v;let M=[];for(let t=0;t<T.length;t++)M.push(d.getBToken(T[t]));const k=await Promise.all(M),I=k.reduce(((t,e,n)=>t.plus(u(e.price).times(e.discount).times(h[n]))),u(0));M=[];for(let t=0;t<g.length;t++)M.push(d.getSymbol(g[t]));const O=await Promise.all(M),C=O.reduce(((t,e,n)=>t.plus(u(e.price).times(e.multiplier).times(w[n].volume).abs().times(A))),u(0)),x=O.reduce(((t,e,n)=>t.plus(u(e.price).times(e.multiplier).times(w[n].volume).minus(w[n].cost))),u(0));return m=m.map(((t,e)=>(isNaN(parseFloat(k[e].price))&&"0"===k[e].price?t.availableBalance="-":t.availableBalance=p(l(I.minus(C).plus(x).div(k[e].price).div(k[e].discount),h[e]),u(0)).toString(),t))),m}catch(r){console.log(r)}return[]},vt=async(t,e,n,i,a,s)=>{const r=d(e.tradeVolume),o=await t._getTimeStamp(n),u=r.gt(0)?"LONG":"SHORT",p=d(e.price),l=+o.timestamp+"000",c=e.symbolId,y=t._calculateFee(r,p,a[parseInt(c)],s[parseInt(c)]),m=r.abs().times(p).times(a[parseInt(c)]),b=r.abs();return{direction:u,symbolId:c,price:p.toString(),notional:m.toString(),volume:b.toString(),transactionFee:y.toString(),transactionHash:i.toString(),time:l}},At=async(t,e,n,a,s)=>{const r=Object(i.getFilteredPoolConfigList)(e,"0").sort(((t,e)=>parseInt(t.symbolId)-parseInt(e.symbolId))).map((t=>t.symbolId)),o=q(t,e),u=await o._getBlockInfo("latest");s=parseInt(s);let p=[];for(let i=0;i<r.length;i++)p.push(o.getSymbol(r[i]));let l=await Promise.all(p);const d=l.map((t=>t.multiplier.toString())),c=l.map((t=>t.feeRatio.toString())),y={owner:n};let m=await o._getPastEvents("Trade",y,s,u.number);const b=[];m=m.filter((t=>t.returnValues.symbolId===a));for(let i=0;i<m.length;i++){const t=m[i],e=await vt(o,t.returnValues,t.blockNumber,t.transactionHash,d,c);b.unshift(e)}return b},Mt=async(t,e,n,a)=>{try{let s,r=[];const o=await(async t=>{const e=await fetch(t);return await e.json()})(`${Object(g.getRestServerConfig)(g.DeriEnv.get())}/trade_history/${t}/${e}/${n}/${a}`);if(o&&o.success&&(s=parseInt(o.data.tradeHistoryBlock),o.data.tradeHistory&&Array.isArray(o.data.tradeHistory)&&(r=o.data.tradeHistory)),r.length>0&&(r=r.filter((t=>t)).map((t=>({direction:t.direction.trim(),symbolId:t.symbolId,price:d(t.price).toString(),notional:d(t.notional).toString(),volume:d(t.volume).toString(),transactionFee:d(t.transactionFee).toString(),transactionHash:t.transactionHash,time:t.time.toString()})))),0!==s){const[i]=await Promise.all([At(t,e,n,a,s+1)]);return i.concat(r).sort(((t,e)=>parseInt(e.time)-parseInt(t.time)))}{const{initialBlock:r}=Object(i.getPoolConfig)(e,null,a);s=parseInt(r);const[o]=await Promise.all([At(t,e,n,a,s+1)]);return o.sort(((t,e)=>parseInt(e.time)-parseInt(t.time)))}}catch(s){console.log(s)}return[]},kt=async(t,e,n,a)=>{const{bToken:s}=Object(i.getPoolConfig)(e,a),r=L(t,s);let o;try{o={success:!0,transaction:await r.unlock(n,e)}}catch(u){o={success:!1,error:u}}return o},It=async(t,e,n,a,s)=>{const{router:r}=Object(i.getPoolConfig)(e,s),o=$(t,r);let u;try{u={success:!0,transaction:await o.addMargin(n,s,a)}}catch(p){u={success:!1,error:p}}return u},Ot=async(t,e,n,a,s,r=!1)=>{const{router:o}=Object(i.getPoolConfig)(e,s),u=$(t,o);let p;try{p={success:!0,transaction:await u.removeMargin(n,s,a,r)}}catch(l){p={success:!1,error:l}}return p},Ct=async(t,e,n,a,s)=>{const{router:r}=Object(i.getPoolConfig)(e),o=$(t,r),p=q(t,e),{pToken:l}=Object(i.getPoolConfig)(e,null,s),d=N(t,l),[c,y]=await Promise.all([p.getParameters(),d.getPositions(n)]),{minInitialMarginRatio:m,minPoolMarginRatio:b}=c,f=Object(i.getFilteredPoolConfigList)(e,null,s).sort(((t,e)=>parseInt(t.bTokenId)-parseInt(e.bTokenId))).map((t=>t.bTokenId)),T=await d.getMargins(n);let g=[];for(let i=0;i<f.length;i++)g.push(p.getBToken(f[i]));const h=await Promise.all(g),w=h.reduce(((t,e,n)=>t.plus(u(e.price).times(e.discount).times(T[n]))),u(0)),v=h.reduce(((t,e)=>t.plus(u(e.liquidity).times(e.price).times(e.discount).plus(e.pnl))),u(0));let A=Object(i.getFilteredPoolConfigList)(e,"0").sort(((t,e)=>parseInt(t.symbolId)-parseInt(e.symbolId))).map((t=>t.symbolId));g=[];for(let i=0;i<A.length;i++)g.push(p.getSymbol(A[i]));const M=await Promise.all(g);let k=M.reduce(((t,e,n)=>n===parseInt(s)?t.plus(u(e.price).times(e.multiplier).times(y[n].volume.plus(a)).abs()):t.plus(u(e.price).times(e.multiplier).times(y[n].volume).abs())),u(0));k=k.times(m);let I=M.reduce(((t,e,n)=>n===parseInt(s)?t.plus(u(e.tradersNetVolume.plus(a)).times(e.price).times(e.multiplier).abs()):t.plus(u(e.tradersNetVolume).times(e.price).times(e.multiplier).abs())),u(0));I=I.times(b);const O=G(w,k,v,I);let C;if(O.success)try{C={success:!0,transaction:await o.trade(n,s,a)}}catch(x){C={success:!1,error:x}}else C={success:!1,error:O.error};return C},xt=async(t,e,n,a)=>{const{router:s,pToken:r}=Object(i.getPoolConfig)(e),o=$(t,s),u=N(t,r),{volume:p}=await u.getPosition(n,a),l=p.negated();let d;if(!p.eq(0)){try{d={success:!0,transaction:await o.trade(n,a,l)}}catch(c){d={success:!1,error:c}}return d}return d={success:!1,error:"no position to close"},d}},17:function(t,e,n){"use strict";var i=n(11);n.d(e,"DeriEnv",(function(){return i.DeriEnv})),n.d(e,"getLpContractAddressConfig",(function(){return i.getLpContractAddressConfig}));var a=n(0);n.d(e,"bg",(function(){return a.c}));n(22);var s=n(34);n.d(e,"PerpetualPoolParametersCache",(function(){return s.a})),n.d(e,"priceCache",(function(){return s.c}));var r=n(238);n.o(r,"addLiquidity")&&n.d(e,"addLiquidity",(function(){return r.addLiquidity})),n.o(r,"addLpLiquidity")&&n.d(e,"addLpLiquidity",(function(){return r.addLpLiquidity})),n.o(r,"closePosition")&&n.d(e,"closePosition",(function(){return r.closePosition})),n.o(r,"connectWallet")&&n.d(e,"connectWallet",(function(){return r.connectWallet})),n.o(r,"depositMargin")&&n.d(e,"depositMargin",(function(){return r.depositMargin})),n.o(r,"getContractAddressConfig")&&n.d(e,"getContractAddressConfig",(function(){return r.getContractAddressConfig})),n.o(r,"getEstimatedFee")&&n.d(e,"getEstimatedFee",(function(){return r.getEstimatedFee})),n.o(r,"getEstimatedFundingRate")&&n.d(e,"getEstimatedFundingRate",(function(){return r.getEstimatedFundingRate})),n.o(r,"getEstimatedLiquidityUsed")&&n.d(e,"getEstimatedLiquidityUsed",(function(){return r.getEstimatedLiquidityUsed})),n.o(r,"getFundingRate")&&n.d(e,"getFundingRate",(function(){return r.getFundingRate})),n.o(r,"getLiquidityInfo")&&n.d(e,"getLiquidityInfo",(function(){return r.getLiquidityInfo})),n.o(r,"getLiquidityUsed")&&n.d(e,"getLiquidityUsed",(function(){return r.getLiquidityUsed})),n.o(r,"getLpLiquidityInfo")&&n.d(e,"getLpLiquidityInfo",(function(){return r.getLpLiquidityInfo})),n.o(r,"getLpWalletBalance")&&n.d(e,"getLpWalletBalance",(function(){return r.getLpWalletBalance})),n.o(r,"getPoolInfoApy")&&n.d(e,"getPoolInfoApy",(function(){return r.getPoolInfoApy})),n.o(r,"getPoolLiquidity")&&n.d(e,"getPoolLiquidity",(function(){return r.getPoolLiquidity})),n.o(r,"getPositionInfo")&&n.d(e,"getPositionInfo",(function(){return r.getPositionInfo})),n.o(r,"getSpecification")&&n.d(e,"getSpecification",(function(){return r.getSpecification})),n.o(r,"getTradeHistory")&&n.d(e,"getTradeHistory",(function(){return r.getTradeHistory})),n.o(r,"getUserWalletBalance")&&n.d(e,"getUserWalletBalance",(function(){return r.getUserWalletBalance})),n.o(r,"getWalletBalance")&&n.d(e,"getWalletBalance",(function(){return r.getWalletBalance})),n.o(r,"isLpUnlocked")&&n.d(e,"isLpUnlocked",(function(){return r.isLpUnlocked})),n.o(r,"isUnlocked")&&n.d(e,"isUnlocked",(function(){return r.isUnlocked})),n.o(r,"removeLiquidity")&&n.d(e,"removeLiquidity",(function(){return r.removeLiquidity})),n.o(r,"removeLpLiquidity")&&n.d(e,"removeLpLiquidity",(function(){return r.removeLpLiquidity})),n.o(r,"tradeWithMargin")&&n.d(e,"tradeWithMargin",(function(){return r.tradeWithMargin})),n.o(r,"unlock")&&n.d(e,"unlock",(function(){return r.unlock})),n.o(r,"unlockLp")&&n.d(e,"unlockLp",(function(){return r.unlockLp})),n.o(r,"withdrawMargin")&&n.d(e,"withdrawMargin",(function(){return r.withdrawMargin}));var o=n(239);n.d(e,"connectWallet",(function(){return o.a})),n.d(e,"getUserWalletBalance",(function(){return o.b}));n(45);var u=n(31);n.d(e,"mintDToken",(function(){return u.e})),n.d(e,"mintAirdrop",(function(){return u.d}));var p=n(29);n.d(e,"getUserInfoAll",(function(){return p.d})),n.d(e,"getLpPoolInfoApy",(function(){return p.a})),n.d(e,"getUserInfoInPool",(function(){return p.f})),n.d(e,"getUserInfoAllForAirDrop",(function(){return p.e}));n(30);var l=n(240);n.d(e,"addLpLiquidity",(function(){return l.a})),n.d(e,"getLpLiquidityInfo",(function(){return l.b})),n.d(e,"getLpWalletBalance",(function(){return l.c})),n.d(e,"isLpUnlocked",(function(){return l.d})),n.d(e,"removeLpLiquidity",(function(){return l.e})),n.d(e,"unlockLp",(function(){return l.f}));var d=n(242);n.d(e,"addLiquidity",(function(){return d.a})),n.d(e,"closePosition",(function(){return d.b})),n.d(e,"depositMargin",(function(){return d.c})),n.d(e,"getContractAddressConfig",(function(){return d.d})),n.d(e,"getEstimatedFee",(function(){return d.e})),n.d(e,"getEstimatedFundingRate",(function(){return d.f})),n.d(e,"getEstimatedLiquidityUsed",(function(){return d.g})),n.d(e,"getFundingRate",(function(){return d.h})),n.d(e,"getLiquidityInfo",(function(){return d.i})),n.d(e,"getLiquidityUsed",(function(){return d.j})),n.d(e,"getPoolInfoApy",(function(){return d.k})),n.d(e,"getPoolLiquidity",(function(){return d.l})),n.d(e,"getPositionInfo",(function(){return d.m})),n.d(e,"getSpecification",(function(){return d.n})),n.d(e,"getTradeHistory",(function(){return d.o})),n.d(e,"getWalletBalance",(function(){return d.p})),n.d(e,"isUnlocked",(function(){return d.q})),n.d(e,"removeLiquidity",(function(){return d.r})),n.d(e,"tradeWithMargin",(function(){return d.s})),n.d(e,"unlock",(function(){return d.t})),n.d(e,"withdrawMargin",(function(){return d.u}));var c=n(16);n.d(e,"getPoolBTokensBySymbolId",(function(){return c.l}))},22:function(t,e,n){"use strict";n.d(e,"d",(function(){return a})),n.d(e,"b",(function(){return s})),n.d(e,"k",(function(){return r})),n.d(e,"i",(function(){return o})),n.d(e,"f",(function(){return u})),n.d(e,"a",(function(){return p})),n.d(e,"e",(function(){return l})),n.d(e,"h",(function(){return d})),n.d(e,"g",(function(){return c})),n.d(e,"c",(function(){return y})),n.d(e,"j",(function(){return m}));var i=n(0);const a=(t,e,n,a,s)=>Object(i.c)(t*e*n/a*s).abs(),s=(t,e,n,i,a)=>t*e*n/i*a,r=(t,e)=>{const n=Object(i.j)(t);return Object(i.c)(e).times(n)},o=(t,e)=>t.eq(0)?Object(i.c)(0):e.div(t),u=(t,e,n,a,s,r,u,p)=>{const l=o(e,n),d=a.times(p).times(r),c=n.plus(s).minus(d).minus(d.abs().times(u));return Object(i.z)(Object(i.A)(t,c.div(l)),Object(i.c)(0))},p=(t,e,n)=>t.eq(0)?Object(i.c)(0):e.div(t).div(n),l=(t,e,n,i)=>e.abs().times(t).times(n).times(i),d=(t,e,n,i)=>e.times(t).times(n).minus(i),c=(t,e,n,a,s,r)=>{if(e.eq(0))return n;const o=l(t,e,s,r),u=d(t,e,s,a);return Object(i.z)(n.plus(u).minus(o.times(1.02)),Object(i.c)(0))},y=(t,e,n,a,s)=>{const r=n.minus(e).div(t).div(a);let o=t.gt(0)?r.div(Object(i.c)(1).minus(s)):r.div(Object(i.c)(1).plus(s));return o=Object(i.z)(o,Object(i.c)(0)),o},m=(t,e,n,i,a,s,r,o,u,p)=>{const l=n.plus(u).abs().times(t).times(s).times(o),d=i.div(r).div(t).div(s);return e.plus(p).gte(l)?u.lte(d.minus(a))&&u.gte(d.negated().minus(a))?{success:!0}:{success:!1,message:"Pool insufficient liquidity"}:{success:!1,message:"Trader insufficient margin"}}},238:function(t,e){},239:function(t,e,n){"use strict";n.d(e,"a",(function(){return o})),n.d(e,"b",(function(){return u}));var i=n(10),a=n.n(i),s=n(86),r=n(0);const o=async(t,e)=>{if(void 0!==typeof window.ethereum){const n=await window.ethereum.request({method:"eth_requestAccounts"}),i=parseInt(await window.ethereum.request({method:"net_version"})),a=Array.isArray(n)&&n[0];return window.ethereum.on("accountsChanged",(t=>{let n;n=t.length>0?t[0]:"","function"===typeof e?e(n):window.location.reload()})),window.ethereum.on("chainChanged",(e=>{let n=Object(r.w)(e);"function"===typeof t?t(n):window.location.reload()})),{success:!0,account:a,chainId:i}}return{success:!1,error:"Cannot connect wallet, please install MetaMask."}},u=async(t,e)=>{const n=Object(s.a)(),i=await n.eth.getBalance(e);return a.a.utils.fromWei(i)}},240:function(t,e,n){"use strict";n.d(e,"b",(function(){return u})),n.d(e,"a",(function(){return p})),n.d(e,"e",(function(){return l})),n.d(e,"d",(function(){return d})),n.d(e,"f",(function(){return c})),n.d(e,"c",(function(){return y}));var i=n(52),a=n(53),s=n(54),r=n(33),o=n(0);const u=async(t,e,n)=>{const{type:r}=Object(o.p)(t,e);return"slp"===r?await Object(i.b)(t,e,n):"clp"===r?await Object(s.b)(t,e,n):"clp2"===r?await Object(a.b)(t,e,n):void console.log(`getLpLiquidityInfo(): invalid lp type ${r}`)},p=async(t,e,n,i)=>{const{type:a}=Object(o.p)(t,e);return"slp"===a?await Object(r.d)(t,e,n,i):"clp"===a?await Object(r.b)(t,e,n,i):"clp2"===a?await Object(r.a)(t,e,n,i):void console.log(`addLpLiquidity(): invalid lp type ${a}`)},l=async(t,e,n,i)=>{const{type:a}=Object(o.p)(t,e);return"slp"===a?await Object(r.j)(t,e,n,i):"clp"===a?await Object(r.h)(t,e,n,i):"clp2"===a?await Object(r.g)(t,e,n,i):void console.log(`removeLpLiquidity(): invalid lp type ${a}`)},d=async(t,e,n)=>{const{type:r}=Object(o.p)(t,e);return"slp"===r?await Object(i.d)(t,e,n):"clp"===r?await Object(s.d)(t,e,n):"clp2"===r?await Object(a.d)(t,e,n):void console.log(`isLpLiquidity(): invalid lp type ${r}`)},c=async(t,e,n)=>{const{type:r}=Object(o.p)(t,e);return"slp"===r?await Object(i.f)(t,e,n):"clp"===r?await Object(s.f)(t,e,n):"clp2"===r?await Object(a.f)(t,e,n):void console.log(`unlockLp(): invalid lp type ${r}`)},y=async(t,e,n)=>{const{type:r}=Object(o.p)(t,e);return"slp"===r?await Object(i.c)(t,e,n):"clp"===r?await Object(s.c)(t,e,n):"clp2"===r?await Object(a.c)(t,e,n):void console.log(`getLpWalletBalance(): invalid lp type ${r}`)}},242:function(t,e,n){"use strict";n.d(e,"d",(function(){return s})),n.d(e,"i",(function(){return p})),n.d(e,"l",(function(){return l})),n.d(e,"k",(function(){return d})),n.d(e,"a",(function(){return y})),n.d(e,"r",(function(){return m})),n.d(e,"n",(function(){return f})),n.d(e,"m",(function(){return T})),n.d(e,"p",(function(){return g})),n.d(e,"q",(function(){return h})),n.d(e,"e",(function(){return w})),n.d(e,"h",(function(){return v})),n.d(e,"f",(function(){return A})),n.d(e,"j",(function(){return M})),n.d(e,"g",(function(){return k})),n.d(e,"t",(function(){return O})),n.d(e,"c",(function(){return C})),n.d(e,"u",(function(){return x})),n.d(e,"s",(function(){return j})),n.d(e,"b",(function(){return P})),n.d(e,"o",(function(){return B}));const{getContractAddressConfig:i}=n(11),{getPoolConfigList:a}=n(6),s=(t="dev",e)=>{if(e&&"1"!==e&&"v1"!==e){if("2"===e||"v2"===e)return a(t).concat(i(t));throw new Error(`getPoolContractAddress: invalid version: ${e}`)}return i(t)};var r=n(30),o=n(29),u=n(16);const p=async(t,e,n,i)=>void 0===i?Object(r.c)(t,e,n):Object(u.j)(t,e,n,i),l=async(t,e,n)=>void 0===n?Object(o.c)(t,e):Object(u.n)(t,e,n),d=async(t,e,n)=>void 0===n?Object(o.b)(t,e):Object(u.m)(t,e,n);var c=n(33);const y=async(t,e,n,i,a)=>void 0===a?Object(c.c)(t,e,n,i):Object(u.a)(t,e,n,i,a),m=async(t,e,n,i,a,s)=>void 0===a?Object(c.i)(t,e,n,i):Object(u.t)(t,e,n,i,a,s);var b=n(45);const f=async(t,e,n,i)=>void 0===i?Object(r.e)(t,e):Object(u.p)(t,e,n,i),T=async(t,e,n,i)=>void 0===i?Object(b.e)(t,e,n):Object(u.o)(t,e,n,i),g=async(t,e,n,i)=>void 0===i?Object(b.f)(t,e,n):Object(u.r)(t,e,n,i),h=async(t,e,n,i)=>void 0===i?Object(b.g)(t,e,n):Object(u.s)(t,e,n,i),w=async(t,e,n,i)=>void 0===i?Object(b.a)(t,e,n):Object(u.d)(t,e,n,i),v=async(t,e,n)=>void 0===n?Object(r.a)(t,e):Object(u.h)(t,e,n),A=async(t,e,n,i)=>void 0===i?Object(b.b)(t,e,n):Object(u.e)(t,e,n,i),M=async(t,e,n)=>void 0===n?Object(r.d)(t,e):Object(u.k)(t,e,n),k=async(t,e,n,i)=>void 0===i?Object(b.c)(t,e,n):Object(u.f)(t,e,n,i);var I=n(31);const O=async(t,e,n,i)=>void 0===i?Object(I.h)(t,e,n):Object(u.v)(t,e,n,i),C=async(t,e,n,i,a)=>void 0===a?Object(c.f)(t,e,n,i):Object(u.c)(t,e,n,i,a),x=async(t,e,n,i,a,s)=>void 0===a?Object(c.l)(t,e,n,i):Object(u.w)(t,e,n,i,a,s),j=async(t,e,n,i,a)=>void 0===a?Object(c.k)(t,e,n,i):Object(u.u)(t,e,n,i,a),P=async(t,e,n,i)=>void 0===i?Object(c.e)(t,e,n):Object(u.b)(t,e,n,i),B=async(t,e,n,i)=>void 0===i?Object(r.f)(t,e,n):Object(u.q)(t,e,n,i)},260:function(t,e,n){},272:function(t,e){},29:function(t,e,n){"use strict";n.d(e,"d",(function(){return s})),n.d(e,"c",(function(){return r})),n.d(e,"b",(function(){return o})),n.d(e,"a",(function(){return u})),n.d(e,"f",(function(){return p})),n.d(e,"e",(function(){return l}));var i=n(4),a=n(0);const s=async t=>{const e=await(async t=>{const e=Object(i.e)(!0);t=Object(a.D)(t);const n=await e.getValues([`${t}.claim.chainId`,`${t}.claim.amount`,`${t}.claim.deadline`,`${t}.claim.nonce`,`${t}.claim.v`,`${t}.claim.r`,`${t}.claim.s`,`${t}.claim.valid`]).catch((t=>console.log("getUserInfo",t)));if(n){const[t,e,i,s,r,o,u,p]=n;return{chainId:Object(a.g)(t),amount:Object(a.f)(e).toString(),deadline:Object(a.g)(i),nonce:Object(a.g)(s),v:Object(a.g)(r),r:o,s:u,valid:Object(a.e)(p)}}})(t),n=await(async t=>{const e=Object(i.e)(!0);t=Object(a.D)(t);const n=await e.getValues([`${t}.claim.harvest.lp`,`${t}.claim.harvest.trade`]).catch((t=>console.log("getUserInfoHarvest",t)));if(n){const[t,e]=n;return{lp:Object(a.f)(t).toString(),trade:Object(a.f)(e).toString()}}})(t),s=await(async t=>{const e=Object(i.e)(!0);t=Object(a.D)(t);const n=await e.getValues([`${t}.claim.total`]).catch((t=>console.log("getUserInfoTotal",t)));if(n){const[t]=n;return{total:Object(a.f)(t).toString()}}})(t);return Object.assign(e,n,s)},r=async(t,e)=>{const n=Object(i.e)();try{const i=await n.getValues([`${t}.${e}.liquidity`]).catch((t=>console.log("getPoolLiquidity",t))),{symbol:s}=Object(a.t)(t,e);if(i){const[t]=i;return{liquidity:Object(a.f)(t).toString(),symbol:s}}}catch(s){console.log(s)}},o=async(t,e)=>{const n=Object(i.e)(!0);try{const i=Object(a.r)(t),s=await n.getValues([`${i}.${e}.apy`,`${i}.${e}.volume.1h`,`${i}.${e}.volume.24h`]).catch((t=>console.log("getPoolInfoApy",t)));if(s){const[t,e,n]=s;return{apy:Object(a.f)(t).toString(),volume1h:Object(a.f)(e).toString(),volume24h:Object(a.f)(n).toString()}}}catch(s){console.log(s)}},u=async(t,e)=>{const n=Object(i.e)(!0);try{const i=Object(a.r)(t),s=await n.getValues([`${i}.${e}.apy`,`${i}.${e}.apy2`,`${i}.${e}.volume.1h`,`${i}.${e}.volume.24h`]).catch((t=>console.log("getPoolInfoApy",t)));if(s){const[t,e,n,i]=s;return{apy:Object(a.f)(t).toString(),apy2:Object(a.f)(e).toString(),volume1h:Object(a.f)(n).toString(),volume24h:Object(a.f)(i).toString()}}}catch(s){console.log(s)}},p=async(t,e,n)=>{const s=Object(i.e)(!0);n=Object(a.D)(n);try{const i=Object(a.r)(t),r=await s.getValues([`${i}.${e}.${n}.volume.1h`,`${i}.${e}.${n}.volume.24h`]).catch((t=>console.log("getUserInfoInPool",t)));if(r){const[t,e]=r;return{volume1h:Object(a.f)(t).toString(),volume24h:Object(a.f)(e).toString()}}}catch(r){console.log(r)}},l=async t=>{const e=Object(i.d)(!0);t=Object(a.D)(t);const n=await e.getValues([`${t}.claim.chainId`,`${t}.claim.amount`,`${t}.claim.deadline`,`${t}.claim.nonce`,`${t}.claim.v1`,`${t}.claim.r1`,`${t}.claim.s1`,`${t}.claim.v2`,`${t}.claim.r2`,`${t}.claim.s2`,`${t}.claim.valid`]).catch((t=>console.log("getUserInfoAllForAirDrop",t)));if(n){const[t,e,i,s,r,o,u,p,l,d,c]=n;return{chainId:Object(a.g)(t),amount:Object(a.f)(e).toString(),deadline:Object(a.g)(i),nonce:Object(a.g)(s),v1:Object(a.g)(r),r1:o,s1:u,v2:Object(a.g)(p),r2:l,s2:d,valid:Object(a.e)(c)}}}},295:function(t,e){},297:function(t,e){},30:function(t,e,n){"use strict";n.d(e,"e",(function(){return c})),n.d(e,"a",(function(){return y})),n.d(e,"d",(function(){return m})),n.d(e,"b",(function(){return b})),n.d(e,"c",(function(){return f})),n.d(e,"f",(function(){return T}));var i=n(11),a=n(0),s=n(4);const r=async(t,e,n,i,s,r,o)=>{const u=Object(a.f)(n.tradeVolume),p=await t._getTimeStamp(i),l=u.gt(0)?"LONG":"SHORT",d=Object(a.f)(n.price),c=+p.timestamp+"000",y=t._calculateFee(u,d,r,o),m=u.abs().times(d).times(r),b=u.abs();return{direction:l,baseToken:e,price:d.toString(),notional:m.toString(),volume:b.toString(),transactionFee:y.toString(),transactionHash:s.toString(),time:c}},o=async(t,e,n,i)=>{const s=Object(a.f)(t.volume).abs(),r=`${t.timestamp}000`,o=Object(a.f)(t.price),u=s.times(o).times(i);return{direction:"Liquidation",baseToken:n,price:o.toString(),notional:u.toString(),volume:s.toString(),transactionFee:"0",transactionHash:e.toString(),time:r}},u=async(t,e,n,i)=>{const{bTokenSymbol:o}=Object(a.t)(t,e),u=Object(s.l)(t,e),p=await u._getBlockInfo("latest");i=parseInt(i);const l={owner:n},d=await u._getPastEvents("Trade",l,i,p.number),{multiplier:c,feeRatio:y,minInitialMarginRatio:m}=await u.getParameters(),b=[];for(let a=0;a<d.length;a++){const t=d[a],e=await r(u,o,t.returnValues,t.blockNumber,t.transactionHash,c,y);b.unshift(e)}return b},p=async(t,e,n,i)=>{const{bTokenSymbol:r}=Object(a.t)(t,e),u=Object(s.l)(t,e),p=await u._getBlockInfo("latest");i=parseInt(i);const l={owner:n},d=await u._getPastEvents("Liquidate",l,i,p.number),{multiplier:c}=await u.getParameters(),y=[];for(let a=0;a<d.length;a++){const t=d[a],e=await o(t.returnValues,t.transactionHash,r,c);y.unshift(e)}return y},l=()=>Object(i.getRestServerConfig)(i.DeriEnv.get()),d=async t=>{const e=await fetch(t);return await e.json()},c=async(t,e)=>{const n=await d(`${l()}/specification/${e}`);return n&&n.success?n.data:n},y=async(t,e)=>{const n=await d(`${l()}/funding_rate/${e}`);return n&&n.success?n.data:n},m=async(t,e)=>{const n=await d(`${l()}/liquidity_used/${e}`);return n&&n.success?n.data:n},b=async(t,e)=>{const n=await d(`${l()}/funding_rate_cache/${e}`);if(n&&n.success){let t=n.data;return t.price=Object(a.c)(t.price),t.fundingRate=Object(a.c)(t.fundingRate),t.liquidityUsed=Object(a.c)(t.liquidityUsed),t}return n},f=async(t,e,n)=>{const i=await d(`${l()}/liquidity_info/${t}/${e}/${n}`);return i&&i.success?i.data:i},T=async(t,e,n)=>{let i,s,r;const o=await d(`${l()}/trade_history/${t}/${e}/${n}`);if(o&&o.success&&(i=parseInt(o.data.tradeHistoryBlock),s=parseInt(o.data.liquidateHistoryBlock),r=o.data.tradeHistory),r=r.filter((t=>t)).map((t=>({direction:t.direction.trim(),baseToken:t.baseToken.trim(),price:Object(a.f)(t.price).toString(),notional:Object(a.f)(t.notional).toString(),volume:Object(a.f)(t.volume).toString(),transactionFee:Object(a.f)(t.transactionFee).toString(),transactionHash:t.transactionHash,time:t.time.toString()}))),0!==i&&0!==s){const[a,o]=await Promise.all([u(t,e,n,i+1),p(t,e,n,s+1)]);return a.concat(o).concat(r).sort(((t,e)=>parseInt(e.time)-parseInt(t.time)))}{const{initialBlock:r}=Object(a.t)(t,e);i=parseInt(r),s=parseInt(r);const[o,l]=await Promise.all([u(t,e,n,i+1),p(t,e,n,s+1)]);return o.concat(l).sort(((t,e)=>parseInt(e.time)-parseInt(t.time)))}}},31:function(t,e,n){"use strict";n.d(e,"h",(function(){return u})),n.d(e,"c",(function(){return p})),n.d(e,"i",(function(){return l})),n.d(e,"a",(function(){return d})),n.d(e,"f",(function(){return c})),n.d(e,"g",(function(){return y})),n.d(e,"b",(function(){return m})),n.d(e,"e",(function(){return b})),n.d(e,"d",(function(){return f}));var i=n(4),a=n(29),s=n(0),r=n(11),o=n(22);const u=async(t,e,n)=>{const{bTokenAddress:a}=Object(s.t)(t,e),r=Object(i.a)(t,a,e);let o;try{o={success:!0,transaction:await r.unlock(n)}}catch(u){o={success:!1,error:u}}return o},p=async(t,e,n,a)=>{const r=Object(i.l)(t,e);return await r.depositMargin(n,Object(s.B)(a))},l=async(t,e,n,a)=>{let r;const{pTokenAddress:u}=Object(s.t)(t,e),p=Object(i.l)(t,e),l=Object(i.k)(t,u,e),d=await Object(s.k)(t,e),{volume:c,margin:y,cost:m}=await l.getPositionInfo(n),{multiplier:b,minInitialMarginRatio:f}=await p.getParameters(),T=Object(o.g)(d,c,y,m,b,f);if(Object(s.c)(a).lte(T))try{r={success:!0,transaction:await p._transactPool("withdrawMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)",[Object(s.B)(a)],n)}}catch(g){r={success:!1,error:g}}else r={success:!1,error:"amount exceeds allowed"};return r},d=async(t,e,n,a)=>{const r=Object(i.l)(t,e);let o;try{o={success:!0,transaction:await r._transactPool("addLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)",[Object(s.B)(a)],n)}}catch(u){o={success:!1,error:u}}return o},c=async(t,e,n,a)=>{const{lTokenAddress:r}=Object(s.t)(t,e),u=Object(i.l)(t,e),p=Object(i.h)(t,r,e),l=await Object(s.k)(t,e),[d,c]=await Promise.all([p.balance(n),p.totalSupply()]),{multiplier:y,minPoolMarginRatio:m}=await u.getParameters(),{liquidity:b,tradersNetVolume:f,tradersNetCost:T}=await u.getStateValues(),g=Object(o.f)(d,c,b,f,T,y,m,l);let h;if(Object(s.c)(a).lte(g))try{h={success:!0,transaction:await u._transactPool("removeLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)",[Object(s.B)(a)],n)}}catch(w){h={success:!1,error:w}}else h={success:!1,error:"shares exceeds allowed"};return h},y=async(t,e,n,a,r="0")=>{const u=await Object(s.k)(t,e),{pTokenAddress:p}=Object(s.t)(t,e),l=Object(i.l)(t,e),d=Object(i.k)(t,p,e),{multiplier:c,minInitialMarginRatio:y,minPoolMarginRatio:m}=await l.getParameters(),{liquidity:b,tradersNetVolume:f}=await l.getStateValues(),{volume:T,margin:g}=await d.getPositionInfo(n);let h;const w=Object(o.j)(u,g,T,b,f,c,m,y,Object(s.c)(a),Object(s.c)(r));if(w.success)try{h={success:!0,transaction:await l._transactPool("tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)",[Object(s.B)(a),Object(s.B)(r)],n)}}catch(v){h={success:!1,error:v}}else h={success:!1,error:w.message};return h},m=async(t,e,n)=>{const{pTokenAddress:a}=Object(s.t)(t,e),r=Object(i.l)(t,e),o=Object(i.k)(t,a,e);let u,{volume:p}=await o.getPositionInfo(n);if(p=p.negated(),p.eq(0))u={success:!1,error:"no position to close"};else try{u={success:!0,transaction:await r._transactPool("tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)",[Object(s.B)(p),"0"],n)}}catch(l){u={success:!1,error:l}}return u},b=async(t,e)=>{let n;const r=await Object(a.d)(e),o=Object(s.B)(r.amount),{deadline:u}=r,{nonce:p}=r,{v:l}=r,{r:d}=r,{s:c}=r;if(r.valid){const a=Object(s.q)(t);if(a){const s=Object(i.i)(t,a);try{n={success:!0,transaction:await s.mintDToken(e,o,u,p,l,d,c)}}catch(y){n={success:!1,error:y}}}else n={success:!1,error:`cannot find the mining vault address in chain ${t}`}}else n={success:!1,error:"userinfo is not valid"};return n},f=async(t,e)=>{let n;const o=await Object(a.e)(e),u=Object(s.B)(o.amount).toString(),{deadline:p,nonce:l,v1:d,r1:c,s1:y,v2:m,r2:b,s2:f}=o;if(o.valid){const a=Object(r.getMiningVaultRouterContractAddress)(t);if(a){const s=Object(i.j)(t,a);try{n={success:!0,transaction:await s.mint(e,u,p,l,d,c,y,m,b,f)}}catch(T){n={success:!1,error:T}}}else n={success:!1,error:`cannot find the mining vault router address in chain ${t}`}}else n={success:!1,error:"userinfo is not valid"};return n}},311:function(t,e){},312:function(t,e){},33:function(t,e,n){"use strict";n.d(e,"k",(function(){return l})),n.d(e,"e",(function(){return d})),n.d(e,"f",(function(){return c})),n.d(e,"l",(function(){return y})),n.d(e,"c",(function(){return m})),n.d(e,"i",(function(){return b})),n.d(e,"d",(function(){return f})),n.d(e,"j",(function(){return T})),n.d(e,"b",(function(){return g})),n.d(e,"h",(function(){return h})),n.d(e,"a",(function(){return w})),n.d(e,"g",(function(){return v}));var i=n(31),a=n(52),s=n(54),r=n(53),o=n(34),u=n(11);const p=async t=>{const e=o.d.getOrSet(Object(u.getRestServerConfig)(u.DeriEnv.get()));await e.send(t);return await((t,e)=>new Promise((n=>{t.on(e,(function(t){n(JSON.parse(t))}))})))(e,"trade_tx_receipt")},l=async(t,e,n,a,s="0")=>{const r=await Object(i.g)(t,e,n,a,s);if(r.success){return{...await p(`trade_with_margin(${t},${e},${n})`),...r}}return r},d=async(t,e,n,a,s="0")=>{const r=await Object(i.b)(t,e,n,a,s);if(r.success){return{...await p(`close_position(${t},${e},${n})`),...r}}return r},c=async(t,e,n,a="0")=>{const s=await Object(i.c)(t,e,n,a);if(s.success){return{...await p(`deposit_margin(${t},${e},${n})`),...s}}return s},y=async(t,e,n,a="0")=>{const s=await Object(i.i)(t,e,n,a);if(s.success){return{...await p(`withdraw_margin(${t},${e},${n})`),...s}}return s},m=async(t,e,n,a="0")=>{const s=await Object(i.a)(t,e,n,a);if(s.success){return{...await p(`add_liquidity(${t},${e},${n})`),...s}}return s},b=async(t,e,n,a="0")=>{const s=await Object(i.f)(t,e,n,a);if(s.success){return{...await p(`remove_liquidity(${t},${e},${n})`),...s}}return s},f=async(t,e,n,i="0")=>{const s=await Object(a.a)(t,e,n,i);if(s.success){return{...await p(`add_slp_liquidity(${t},${e},${n})`),...s}}return s},T=async(t,e,n,i="0")=>{const s=await Object(a.e)(t,e,n,i);if(s.success){return{...await p(`remove_slp_liquidity(${t},${e},${n})`),...s}}return s},g=async(t,e,n,i="0")=>{const a=await Object(s.a)(t,e,n,i);if(a.success){return{...await p(`add_clp_liquidity(${t},${e},${n})`),...a}}return a},h=async(t,e,n,i="0")=>{const a=await Object(s.e)(t,e,n,i);if(a.success){return{...await p(`remove_clp_liquidity(${t},${e},${n})`),...a}}return a},w=async(t,e,n,i="0")=>{const a=await Object(r.a)(t,e,n,i);if(a.success){return{...await p(`add_clp_liquidity(${t},${e},${n})`),...a}}return a},v=async(t,e,n,i="0")=>{const a=await Object(r.e)(t,e,n,i);if(a.success){return{...await p(`remove_clp_liquidity(${t},${e},${n})`),...a}}return a}},34:function(t,e,n){"use strict";n.d(e,"b",(function(){return r})),n.d(e,"c",(function(){return o})),n.d(e,"a",(function(){return u})),n.d(e,"d",(function(){return p}));var i=n(4),a=n(0),s=n(99);const r=function(){let t={};return{get(e,n){const i=`${e}.${n}`;if(Object.keys(t).includes(i))return t[i];console.log(`Cache key is not in resouceMap: ${i}`)},set(e,n,i){t[`${e}.${n}`]=i}}}(),o=(function(){let t=""}(),function(){let t="",e=null;return{get:()=>(""===t&&console.log("please init 'price' first"),t),async _update(e,n){try{const i=await Object(a.k)(e,n);""!==i&&(t=i)}catch(i){console.log(`priceCache.update: ${i}`)}},update(t,n){const i=this;e=setInterval((()=>{i._update(t,n)}),3e3)},clear(){e&&clearInterval(e),t=""}}}()),u=function(){let t={};return{get:()=>(t.multiplier||console.log("please init 'perpetual pool parameters' first"),t),async update(e,n){const a=Object(i.l)(e,n),s=await a.getParameters();return s.multiplier&&(t=s),s}}}(),p=function(){let t=null;return{get(){if(t)return t;console.log("wsInstance.get() error: ws instance is not init")},set(e){try{const n=Object(s.io)(e,{transports:["websocket"],path:"/ws"});n.on("connect",(()=>{console.log("hello from ws:",n.id)})),n?t=n:console.log("wsInstance.get() error: ws instance is not init")}catch(n){console.log("wsInstance.set():",n)}},getOrSet(e){return t||this.set(e),t}}}()},35:function(t,e,n){"use strict";n.d(e,"a",(function(){return r})),n.d(e,"c",(function(){return o})),n.d(e,"d",(function(){return u})),n.d(e,"b",(function(){return p})),n.d(e,"g",(function(){return l})),n.d(e,"h",(function(){return d})),n.d(e,"f",(function(){return c})),n.d(e,"k",(function(){return m})),n.d(e,"i",(function(){return b})),n.d(e,"j",(function(){return f})),n.d(e,"e",(function(){return T}));var i=n(20),a=n.n(i);const s="deri-current-version";function r(t,e=0){return 0==e?a()(t):e>0?a()(t).times(a()("1"+"0".repeat(e))):a()(t).div(a()("1"+"0".repeat(-e)))}function o(t){return t&&`${t.substr(0,6)}...${t.substr(-4)}`}function u(t){return t&&(+t).toFixed(4)}function p(t,e){return+t===+e}function l(t){return"0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd"===t||"0x73feaa1eE314F8c655E354234017bE2193C9E24E"===t}function d(t){return"0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd"===t}function c(t){return"0x73feaa1eE314F8c655E354234017bE2193C9E24E"===t}function y(t){return`${t}-current-trading-pool`}function m(t){sessionStorage.setItem(s,t)}function b(){return sessionStorage.getItem(s)}function f(t,e){if(e){const n=y(t);sessionStorage.setItem(n,JSON.stringify(e))}}function T(t){return JSON.parse(sessionStorage.getItem(y(t)))}},364:function(t,e){},366:function(t,e){},398:function(t,e){},4:function(t,e,n){"use strict";n.d(e,"e",(function(){return U})),n.d(e,"f",(function(){return N})),n.d(e,"d",(function(){return V})),n.d(e,"l",(function(){return H})),n.d(e,"a",(function(){return W})),n.d(e,"k",(function(){return z})),n.d(e,"h",(function(){return G})),n.d(e,"i",(function(){return X})),n.d(e,"m",(function(){return Y})),n.d(e,"c",(function(){return J})),n.d(e,"b",(function(){return K})),n.d(e,"g",(function(){return Q})),n.d(e,"n",(function(){return Z})),n.d(e,"j",(function(){return tt}));var i=n(10),a=n.n(i),s=n(86);const r=532731;class o{constructor(t,e,n){this.chainId=t,this.contractAddress=e,this.web3=n?Object(s.b)(t):Object(s.a)()}setAccount(t){return this.accountAddress=t,this}setPool(t){return this.poolAddress=t,this}async _call(t,e=[]){return await this.contract.methods[t](...e).call()}async _estimatedGas(t,e=[],n){let i=0;for(let s=0;s<2;s++)try{i=await this.contract.methods[t](...e).estimateGas({from:n}),i=parseInt(1.25*i);break}catch(a){}return 0==i&&(i=r),i>r&&(i=r),i}_getTransactionReceipt(t){const e=this;return function n(i,a){e.web3.eth.getTransactionReceipt(t,((t,e)=>{t?a(t):null===e?setTimeout((()=>n(i,a)),500):!1===e.status?(e.errorMessage="Transaction failed",a(e)):i(e)}))}}async _transact(t,e,n){const i=await this._estimatedGas(t,e,n);let s=[{from:n,to:this.contractAddress,gas:a.a.utils.numberToHex(i),value:a.a.utils.numberToHex("0"),data:this.contract.methods[t](...e).encodeABI()}],r=await window.ethereum.request({method:"eth_sendTransaction",params:s});return await new Promise(this._getTransactionReceipt(r))}}var u=n(0),p=n(22);const l=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!1,internalType:"uint256",name:"lShares",type:"uint256"},{indexed:!1,internalType:"uint256",name:"bAmount",type:"uint256"}],name:"AddLiquidity",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!1,internalType:"uint256",name:"bAmount",type:"uint256"}],name:"DepositMargin",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"migrationTimestamp",type:"uint256"},{indexed:!1,internalType:"address",name:"source",type:"address"},{indexed:!1,internalType:"address",name:"target",type:"address"}],name:"ExecuteMigration",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!1,internalType:"int256",name:"volume",type:"int256"},{indexed:!1,internalType:"int256",name:"cost",type:"int256"},{indexed:!1,internalType:"uint256",name:"margin",type:"uint256"},{indexed:!1,internalType:"uint256",name:"timestamp",type:"uint256"},{indexed:!1,internalType:"uint256",name:"price",type:"uint256"},{indexed:!1,internalType:"address",name:"liquidator",type:"address"},{indexed:!1,internalType:"uint256",name:"reward",type:"uint256"}],name:"Liquidate",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"migrationTimestamp",type:"uint256"},{indexed:!1,internalType:"address",name:"source",type:"address"},{indexed:!1,internalType:"address",name:"target",type:"address"}],name:"PrepareMigration",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!1,internalType:"uint256",name:"lShares",type:"uint256"},{indexed:!1,internalType:"uint256",name:"bAmount",type:"uint256"}],name:"RemoveLiquidity",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!1,internalType:"int256",name:"tradeVolume",type:"int256"},{indexed:!1,internalType:"uint256",name:"price",type:"uint256"}],name:"Trade",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!1,internalType:"uint256",name:"bAmount",type:"uint256"}],name:"WithdrawMargin",type:"event"},{inputs:[{internalType:"uint256",name:"bAmount",type:"uint256"}],name:"addLiquidity",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"bAmount",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"addLiquidity",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"approveMigration",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"controller",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"bAmount",type:"uint256"}],name:"depositMargin",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"bAmount",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"depositMargin",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"source",type:"address"}],name:"executeMigration",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"getAddresses",outputs:[{internalType:"address",name:"bToken",type:"address"},{internalType:"address",name:"pToken",type:"address"},{internalType:"address",name:"lToken",type:"address"},{internalType:"address",name:"oracle",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getParameters",outputs:[{internalType:"uint256",name:"multiplier",type:"uint256"},{internalType:"uint256",name:"feeRatio",type:"uint256"},{internalType:"uint256",name:"minPoolMarginRatio",type:"uint256"},{internalType:"uint256",name:"minInitialMarginRatio",type:"uint256"},{internalType:"uint256",name:"minMaintenanceMarginRatio",type:"uint256"},{internalType:"uint256",name:"minAddLiquidity",type:"uint256"},{internalType:"uint256",name:"redemptionFeeRatio",type:"uint256"},{internalType:"uint256",name:"fundingRateCoefficient",type:"uint256"},{internalType:"uint256",name:"minLiquidationReward",type:"uint256"},{internalType:"uint256",name:"maxLiquidationReward",type:"uint256"},{internalType:"uint256",name:"liquidationCutRatio",type:"uint256"},{internalType:"uint256",name:"priceDelayAllowance",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getStateValues",outputs:[{internalType:"int256",name:"cumuFundingRate",type:"int256"},{internalType:"uint256",name:"cumuFundingRateBlock",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"int256",name:"tradersNetVolume",type:"int256"},{internalType:"int256",name:"tradersNetCost",type:"int256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"string",name:"symbol_",type:"string"},{internalType:"address[4]",name:"addresses_",type:"address[4]"},{internalType:"uint256[12]",name:"parameters_",type:"uint256[12]"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"liquidate",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"liquidate",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"migrationDestination",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"migrationTimestamp",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newPool",type:"address"},{internalType:"uint256",name:"graceDays",type:"uint256"}],name:"prepareMigration",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"lShares",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidity",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"lShares",type:"uint256"}],name:"removeLiquidity",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newController",type:"address"}],name:"setController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"int256",name:"tradeVolume",type:"int256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"trade",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"int256",name:"tradeVolume",type:"int256"}],name:"trade",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"int256",name:"tradeVolume",type:"int256"},{internalType:"uint256",name:"bAmount",type:"uint256"}],name:"tradeWithMargin",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"int256",name:"tradeVolume",type:"int256"},{internalType:"uint256",name:"bAmount",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"tradeWithMargin",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"bAmount",type:"uint256"}],name:"withdrawMargin",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"bAmount",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"price",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"withdrawMargin",outputs:[],stateMutability:"nonpayable",type:"function"}];class d extends o{constructor(t,e,n){super(t,e,n),this.contract=new this.web3.eth.Contract(l,this.contractAddress)}async symbol(){return await this._call("symbol")}async getStateValues(){let t;const e=Object(u.c)(0);try{const e=await this._call("getStateValues");t={cumuFundingRate:Object(u.f)(e.cumuFundingRate),cumuFundingRateBlock:Object(u.c)(e.cumuFundingRateBlock),liquidity:Object(u.f)(e.liquidity),tradersNetVolume:Object(u.f)(e.tradersNetVolume),tradersNetCost:Object(u.f)(e.tradersNetCost)}}catch(n){t={cumuFundingRate:e,cumuFundingRateBlock:e,liquidity:e,tradersNetCost:e,tradersNetVolume:e},console.log(`getStateValues: ${n}`)}return t}async getParameters(){let t;const e=Object(u.c)(0);try{const e=await this._call("getParameters");t={multiplier:Object(u.f)(e.multiplier),feeRatio:Object(u.f)(e.feeRatio),minPoolMarginRatio:Object(u.f)(e.minPoolMarginRatio),minInitialMarginRatio:Object(u.f)(e.minInitialMarginRatio),minMaintenanceMarginRatio:Object(u.f)(e.minMaintenanceMarginRatio),minAddLiquidity:Object(u.f)(e.minAddLiquidity),redemptionFeeRatio:Object(u.f)(e.redemptionFeeRatio),fundingRateCoefficient:Object(u.f)(e.fundingRateCoefficient),minLiquidationReward:Object(u.f)(e.minLiquidationReward),maxLiquidationReward:Object(u.f)(e.maxLiquidationReward),liquidationCutRatio:Object(u.f)(e.liquidationCutRatio),priceDelayAllowance:Object(u.c)(e.priceDelayAllowance)}}catch(n){t={multiplier:e,feeRatio:e,minPoolMarginRatio:e,minInitialMarginRatio:e,minMaintenanceMarginRatio:e,minAddLiquidity:e,redemptionFeeRatio:e,fundingRateCoefficient:e,minLiquidationReward:e,maxLiquidationReward:e,liquidationCutRatio:e,priceDelayAllowance:e},console.log(`getParameters: ${n}`)}return t}_getTransactionReceipt(t){const e=this;return function n(i,a){e.web3.eth.getTransactionReceipt(t,((t,e)=>{t?a(t):null==e?setTimeout((()=>n(i,a)),500):!1===e.status?(e.errorMessage="Transaction failed",a(e)):i(e)}))}}async _estimatedGas(t,e,n){let i=0;for(let s=0;s<20;s++)try{i=await this.contract.methods[t](...e).estimateGas({from:n}),i=parseInt(1.25*i);break}catch(a){}return 0==i&&(i=532731),i>532731&&(i=532731),i}async _transactPool(t,e=[],n){const i=await Object(u.s)(this.chainId,this.contractAddress);let s=[i.timestamp,i.price,i.v,i.r,i.s];const r=await this._estimatedGas(t,[...e,...s],n);let o=[{from:n,to:this.contractAddress,gas:a.a.utils.numberToHex(r),value:a.a.utils.numberToHex("0"),data:this.contract.methods[t](...e,...s).encodeABI()}],p=await window.ethereum.request({method:"eth_sendTransaction",params:o});return await new Promise(this._getTransactionReceipt(p))}async getFundingRate(){let t,e,n,i;t=await Object(u.k)(this.chainId,this.contractAddress);try{const{tradersNetVolume:a,liquidity:s}=await this.getStateValues(),{multiplier:r,fundingRateCoefficient:o,minPoolMarginRatio:l}=await this.getParameters(),d=[a,t,r,s,o];Object(u.v)(...d)?(e="0",n="0"):(n=Object(p.b)(...d),e=Object(p.k)(this.chainId,n));const c=[a,t,r,s,l];return i=Object(u.v)(...c)?"0":Object(p.d)(...c),{price:t,multiplier:r.toString(),fundingRate:e,fundingRatePerBlock:n,tradersNetVolume:a.toString(),liquidity:s.toString(),fundingRateCoefficient:o.toString(),liquidityUsed:i,poolMarginRatio:l.toString()}}catch(a){throw console.log("PerpetualPool#gerFundingRate():",a),a}}async depositMargin(t,e){let n;console.log("depositMargin");try{n={success:!0,transaction:await this._transactPool("depositMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)",[e],t)}}catch(i){console.log("here"),n={success:!1,error:i}}return n}async _getBlockInfo(t){return await this.web3.eth.getBlock(t)}async _getPastEvents(t,e={},n=0,i=0){let a,s=[];for(a="56"===this.chainId?1999:4999,n+a>i&&(a=i-n);n<=i;){let r=await this.contract.getPastEvents(t,{filter:e,fromBlock:n,toBlock:n+a});for(let t of r)s.push(t);(n+=a+1)+a>i&&(a=i-n)}return s}async _getTimeStamp(t){return await this.web3.eth.getBlock(t)}_calculateFee(t,e,n,i){return Object(u.c)(t).abs().times(e).times(n).times(i).toString()}}const c=[{constant:!0,inputs:[],name:"name",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_upgradedAddress",type:"address"}],name:"deprecate",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_spender",type:"address"},{name:"_value",type:"uint256"}],name:"approve",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"deprecated",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_evilUser",type:"address"}],name:"addBlackList",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"totalSupply",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_from",type:"address"},{name:"_to",type:"address"},{name:"_value",type:"uint256"}],name:"transferFrom",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"upgradedAddress",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"",type:"address"}],name:"balances",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"decimals",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"maximumFee",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"_totalSupply",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[],name:"unpause",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"account",type:"address"},{name:"amount",type:"uint256"}],name:"mint",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_maker",type:"address"}],name:"getBlackListStatus",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"",type:"address"},{name:"",type:"address"}],name:"allowed",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"paused",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"who",type:"address"}],name:"balanceOf",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[],name:"pause",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"getOwner",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"owner",outputs:[{name:"",type:"address"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"symbol",outputs:[{name:"",type:"string"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_to",type:"address"},{name:"_value",type:"uint256"}],name:"transfer",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"newBasisPoints",type:"uint256"},{name:"newMaxFee",type:"uint256"}],name:"setParams",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"amount",type:"uint256"}],name:"issue",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"amount",type:"uint256"}],name:"redeem",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[{name:"_owner",type:"address"},{name:"_spender",type:"address"}],name:"allowance",outputs:[{name:"remaining",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[],name:"basisPointsRate",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!0,inputs:[{name:"",type:"address"}],name:"isBlackListed",outputs:[{name:"",type:"bool"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"_clearedUser",type:"address"}],name:"removeBlackList",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!0,inputs:[],name:"MAX_UINT",outputs:[{name:"",type:"uint256"}],payable:!1,stateMutability:"view",type:"function"},{constant:!1,inputs:[{name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{constant:!1,inputs:[{name:"_blackListedUser",type:"address"}],name:"destroyBlackFunds",outputs:[],payable:!1,stateMutability:"nonpayable",type:"function"},{inputs:[{name:"_name",type:"string"},{name:"_symbol",type:"string"}],payable:!1,stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,name:"amount",type:"uint256"}],name:"Issue",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"amount",type:"uint256"}],name:"Redeem",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"newAddress",type:"address"}],name:"Deprecate",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"feeBasisPoints",type:"uint256"},{indexed:!1,name:"maxFee",type:"uint256"}],name:"Params",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"_blackListedUser",type:"address"},{indexed:!1,name:"_balance",type:"uint256"}],name:"DestroyedBlackFunds",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"_user",type:"address"}],name:"AddedBlackList",type:"event"},{anonymous:!1,inputs:[{indexed:!1,name:"_user",type:"address"}],name:"RemovedBlackList",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"owner",type:"address"},{indexed:!0,name:"spender",type:"address"},{indexed:!1,name:"value",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,name:"from",type:"address"},{indexed:!0,name:"to",type:"address"},{indexed:!1,name:"value",type:"uint256"}],name:"Transfer",type:"event"},{anonymous:!1,inputs:[],name:"Pause",type:"event"},{anonymous:!1,inputs:[],name:"Unpause",type:"event"}];class y extends o{constructor(t,e,n,i){super(t,e,i),this.poolAddress=n,this.contract=new this.web3.eth.Contract(c,this.contractAddress)}async isUnlocked(t){let e=await this._call("allowance",[t,this.poolAddress]);return e=Object(u.f)(e),e.gt(0)}async unlock(t){return await this._transact("approve",[this.poolAddress,u.b],t)}async symbol(){return await this._call("symbol")}async decimals(){return await this._call("decimals")}async _balance(t){return await this._call("balanceOf",[t])}async balance(t){const[e,n]=await Promise.all([this._balance(t),this.decimals()]);return Object(u.c)(e,-n)}}const m=[{inputs:[{internalType:"string",name:"name_",type:"string"},{internalType:"string",name:"symbol_",type:"string"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"operator",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"operator",type:"address"},{indexed:!1,internalType:"bool",name:"approved",type:"bool"}],name:"ApprovalForAll",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Transfer",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!1,internalType:"int256",name:"volume",type:"int256"},{indexed:!1,internalType:"int256",name:"cost",type:"int256"},{indexed:!1,internalType:"int256",name:"lastCumuFundingRate",type:"int256"},{indexed:!1,internalType:"uint256",name:"margin",type:"uint256"},{indexed:!1,internalType:"uint256",name:"lastUpdateTimestamp",type:"uint256"}],name:"Update",type:"event"},{inputs:[{internalType:"address",name:"operator",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"approve",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"exists",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"exists",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getApproved",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"getPosition",outputs:[{internalType:"int256",name:"volume",type:"int256"},{internalType:"int256",name:"cost",type:"int256"},{internalType:"int256",name:"lastCumuFundingRate",type:"int256"},{internalType:"uint256",name:"margin",type:"uint256"},{internalType:"uint256",name:"lastUpdateTimestamp",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getPosition",outputs:[{internalType:"int256",name:"volume",type:"int256"},{internalType:"int256",name:"cost",type:"int256"},{internalType:"int256",name:"lastCumuFundingRate",type:"int256"},{internalType:"uint256",name:"margin",type:"uint256"},{internalType:"uint256",name:"lastUpdateTimestamp",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"operator",type:"address"}],name:"isApprovedForAll",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"uint256",name:"margin",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"ownerOf",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"pool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"safeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],name:"safeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"operator",type:"address"},{internalType:"bool",name:"approved",type:"bool"}],name:"setApprovalForAll",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newPool",type:"address"}],name:"setPool",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalMinted",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"transferFrom",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"int256",name:"volume",type:"int256"},{internalType:"int256",name:"cost",type:"int256"},{internalType:"int256",name:"lastCumuFundingRate",type:"int256"},{internalType:"uint256",name:"margin",type:"uint256"},{internalType:"uint256",name:"lastUpdateTimestamp",type:"uint256"}],name:"update",outputs:[],stateMutability:"nonpayable",type:"function"}];class b extends o{constructor(t,e,n,i){super(t,e,i),this.poolAddress=n,this.contract=new this.web3.eth.Contract(m,this.contractAddress)}async getPositionInfo(t){let e={};try{const n=await this._call("getPosition(address)",[t]);e={volume:Object(u.f)(n[0]),cost:Object(u.f)(n[1]),lastCumuFundingRate:Object(u.f)(n[2]),margin:Object(u.f)(n[3]),lastUpdateTimestamp:Object(u.c)(n[4])}}catch(n){e={volume:Object(u.c)(0),cost:Object(u.c)(0),lastCumuFundingRate:Object(u.c)(0),margin:Object(u.c)(0),lastUpdateTimestamp:Object(u.c)(0)}}return e}async exists(t){return await this._call("exists",[t])}}const f=[{inputs:[{internalType:"string",name:"name_",type:"string"},{internalType:"string",name:"symbol_",type:"string"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"pool",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newPool",type:"address"}],name:"setPool",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}];class T extends o{constructor(t,e,n,i){super(t,e,i),this.poolAddress=n,this.contract=new this.web3.eth.Contract(f,this.contractAddress)}async balance(t){return Object(u.f)(await this._call("balanceOf",[t]))}async totalSupply(){return Object(u.f)(await this._call("totalSupply"))}}var g=n(44);const h=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"address",name:"newController",type:"address"}],name:"addController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"controllers",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"string",name:"",type:"string"}],name:"data",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"oldController",type:"address"}],name:"delController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"string[]",name:"keys",type:"string[]"}],name:"getValues",outputs:[{internalType:"bytes32[]",name:"",type:"bytes32[]"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"string",name:"key",type:"string"},{internalType:"bytes32",name:"value",type:"bytes32"}],internalType:"structDatabase.Params1[]",name:"pairs",type:"tuple[]"}],name:"setValues",outputs:[],stateMutability:"nonpayable",type:"function"}];class w{constructor(t,e){this.providerUrl=e,this.contractAddress=t,this.providerUrl&&this._init()}_init(){this.web3=new a.a(new a.a.providers.HttpProvider(this.providerUrl)),this.contract=new this.web3.eth.Contract(h,this.contractAddress)}async updateProviderUrl(){this.providerUrl?this.providerUrl&&!await Object(u.d)(this.providerUrl)&&(this.providerUrl=await Object(u.i)(Object(g.c)()),this._init()):(this.providerUrl=await Object(u.i)(Object(g.c)()),this._init())}async getValues(t){let e,n=3;for(;n>0;){try{await this.updateProviderUrl(),e=await this.contract.methods.getValues(t).call()}catch(i){this.providerUrl=null}if(e)break;n-=1}if(0===n&&!e)throw new Error("database getValues(): exceed max retry 3.");return e}}const v=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"address",name:"newController",type:"address"}],name:"addController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"controllers",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"oldController",type:"address"}],name:"delController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{components:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"fromChainId",type:"uint256"},{internalType:"address",name:"fromWormhole",type:"address"},{internalType:"uint256",name:"toChainId",type:"uint256"},{internalType:"address",name:"toWormhole",type:"address"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],internalType:"structDatabase.Params1[]",name:"values",type:"tuple[]"}],name:"setSignature",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"signature",outputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"fromChainId",type:"uint256"},{internalType:"address",name:"fromWormhole",type:"address"},{internalType:"uint256",name:"toChainId",type:"uint256"},{internalType:"address",name:"toWormhole",type:"address"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"},{internalType:"bool",name:"valid",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address[]",name:"values",type:"address[]"}],name:"unsetSignature",outputs:[],stateMutability:"nonpayable",type:"function"}];class A{constructor(t,e){this.providerUrl=e,this.contractAddress=t,this.providerUrl&&this._init()}async updateProviderUrl(){this.providerUrl?this.providerUrl&&!await Object(u.d)(this.providerUrl)&&(this.providerUrl=await Object(u.i)(Object(g.c)()),this._init()):(this.providerUrl=await Object(u.i)(Object(g.c)()),this._init())}_init(){this.web3=new a.a(new a.a.providers.HttpProvider(this.providerUrl)),this.contract=new this.web3.eth.Contract(v,this.contractAddress)}async signature(t){let e,n=3;for(;n>0;){try{await this.updateProviderUrl(),e=await this.contract.methods.signature(t).call()}catch(i){this.providerUrl=null}if(e)break;n-=1}if(0===n&&!e)throw new Error("database getValues(): exceed max retry 3.");return e}}const M=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{inputs:[{internalType:"address",name:"newController",type:"address"}],name:"addController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"controllers",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"string",name:"",type:"string"}],name:"data",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"oldController",type:"address"}],name:"delController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"string[]",name:"keys",type:"string[]"}],name:"getValues",outputs:[{internalType:"bytes32[]",name:"",type:"bytes32[]"}],stateMutability:"view",type:"function"},{inputs:[{components:[{internalType:"string",name:"key",type:"string"},{internalType:"bytes32",name:"value",type:"bytes32"}],internalType:"structDatabase.Params1[]",name:"pairs",type:"tuple[]"}],name:"setValues",outputs:[],stateMutability:"nonpayable",type:"function"}];class k{constructor(t,e){this.providerUrl=e,this.contractAddress=t,this.providerUrl&&this._init()}_init(){this.web3=new a.a(new a.a.providers.HttpProvider(this.providerUrl)),this.contract=new this.web3.eth.Contract(M,this.contractAddress)}async updateProviderUrl(){this.providerUrl?this.providerUrl&&!await Object(u.d)(this.providerUrl)&&(this.providerUrl=await Object(u.i)(Object(g.c)()),this._init()):(this.providerUrl=await Object(u.i)(Object(g.c)()),this._init())}async getValues(t){let e,n=3;for(;n>0;){try{await this.updateProviderUrl(),e=await this.contract.methods.getValues(t).call()}catch(i){this.providerUrl=null}if(e)break;n-=1}if(0===n&&!e)throw new Error("database getValues(): exceed max retry 3.");return e}}const I=[{inputs:[{internalType:"address",name:"tokenAddress_",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"migrationTimestamp",type:"uint256"},{indexed:!1,internalType:"address",name:"source",type:"address"},{indexed:!1,internalType:"address",name:"destination",type:"address"}],name:"ApproveMigration",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"deadline",type:"uint256"},{indexed:!1,internalType:"uint256",name:"nonce",type:"uint256"}],name:"Claim",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"migrationTimestamp",type:"uint256"},{indexed:!1,internalType:"address",name:"source",type:"address"},{indexed:!1,internalType:"address",name:"destination",type:"address"}],name:"ExecuteMigration",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"migrationTimestamp",type:"uint256"},{indexed:!1,internalType:"address",name:"source",type:"address"},{indexed:!1,internalType:"address",name:"destination",type:"address"}],name:"PrepareMigration",type:"event"},{inputs:[],name:"CLAIM_TYPEHASH",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"DOMAIN_TYPEHASH",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"approveMigration",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"chainId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"claim",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"controller",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"source",type:"address"}],name:"executeMigration",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"isMigrated",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"migrationDestination",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"migrationTimestamp",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"destination",type:"address"},{internalType:"uint256",name:"graceDays",type:"uint256"}],name:"prepareMigration",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newController",type:"address"}],name:"setController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"tokenAddress",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"usedHash",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}];class O extends o{constructor(t,e,n){super(t,e,n),this.contract=new this.web3.eth.Contract(I,this.contractAddress)}async mintDToken(t,...e){const n=await this._estimatedGas("claim",[t,...e],t);console.log(n);let i=[{from:t,to:this.contractAddress,gas:a.a.utils.numberToHex(n),value:a.a.utils.numberToHex("0"),data:this.contract.methods.claim(t,...e).encodeABI()}],s=await window.ethereum.request({method:"eth_sendTransaction",params:i});return await new Promise(this._getTransactionReceipt(s))}}const C=[{inputs:[{internalType:"address",name:"token_",type:"address"},{internalType:"address",name:"miningVault_",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"deadline",type:"uint256"},{indexed:!1,internalType:"uint256",name:"nonce",type:"uint256"}],name:"Claim",type:"event"},{inputs:[],name:"CLAIM_TYPEHASH",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"DOMAIN_TYPEHASH",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"chainId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint256",name:"nonce",type:"uint256"},{internalType:"uint8",name:"v1",type:"uint8"},{internalType:"bytes32",name:"r1",type:"bytes32"},{internalType:"bytes32",name:"s1",type:"bytes32"},{internalType:"uint8",name:"v2",type:"uint8"},{internalType:"bytes32",name:"r2",type:"bytes32"},{internalType:"bytes32",name:"s2",type:"bytes32"}],name:"claim",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"claimNewController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"controller",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"miningVault",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newController",type:"address"}],name:"setNewController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"token",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"usedHash",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}];class x extends o{constructor(t,e,n){super(t,e,n),this.contract=new this.web3.eth.Contract(C,this.contractAddress)}async mint(t,...e){const n=await this._estimatedGas("claim",[t,...e],t);let i=[{from:t,to:this.contractAddress,gas:a.a.utils.numberToHex(n),value:a.a.utils.numberToHex("0"),data:this.contract.methods.claim(t,...e).encodeABI()}],s=await window.ethereum.request({method:"eth_sendTransaction",params:i});return await new Promise(this._getTransactionReceipt(s))}}var j=n(71),P=n(11);const B=[{inputs:[{internalType:"contractSushiToken",name:"_sushi",type:"address"},{internalType:"address",name:"_devaddr",type:"address"},{internalType:"uint256",name:"_sushiPerBlock",type:"uint256"},{internalType:"uint256",name:"_startBlock",type:"uint256"},{internalType:"uint256",name:"_bonusEndBlock",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!0,internalType:"uint256",name:"pid",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Deposit",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!0,internalType:"uint256",name:"pid",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"EmergencyWithdraw",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!0,internalType:"uint256",name:"pid",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Withdraw",type:"event"},{inputs:[],name:"BONUS_MULTIPLIER",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_allocPoint",type:"uint256"},{internalType:"contractIERC20",name:"_lpToken",type:"address"},{internalType:"bool",name:"_withUpdate",type:"bool"}],name:"add",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"bonusEndBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_devaddr",type:"address"}],name:"dev",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"devaddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"}],name:"emergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_from",type:"uint256"},{internalType:"uint256",name:"_to",type:"uint256"}],name:"getMultiplier",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"massUpdatePools",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"}],name:"migrate",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"migrator",outputs:[{internalType:"contractIMigratorChef",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"pendingSushi",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"poolInfo",outputs:[{internalType:"contractIERC20",name:"lpToken",type:"address"},{internalType:"uint256",name:"allocPoint",type:"uint256"},{internalType:"uint256",name:"lastRewardBlock",type:"uint256"},{internalType:"uint256",name:"accSushiPerShare",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"poolLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"uint256",name:"_allocPoint",type:"uint256"},{internalType:"bool",name:"_withUpdate",type:"bool"}],name:"set",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"contractIMigratorChef",name:"_migrator",type:"address"}],name:"setMigrator",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"startBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"sushi",outputs:[{internalType:"contractSushiToken",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"sushiPerBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalAllocPoint",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"}],name:"updatePool",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"address",name:"",type:"address"}],name:"userInfo",outputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"rewardDebt",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"}];class _ extends o{constructor(t,e,n){super(t,e,n),this.contract=new this.web3.eth.Contract(B,this.contractAddress)}async addLiquidity(t,e){const n=[152,Object(u.B)(e)];return await this._transact("deposit",n,t)}async removeLiquidity(t,e){const n=[152,Object(u.B)(e)];return await this._transact("withdraw",n,t)}async getLiquidity(t){const e=await this._call("userInfo",[152,t]);return e&&e.amount?Object(u.f)(e.amount):(console.log("the amount is not exist "),"0")}}const S=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!1,internalType:"uint256",name:"mintAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"bAmount",type:"uint256"}],name:"AddLiquidity",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"migrationTimestamp",type:"uint256"},{indexed:!1,internalType:"address",name:"source",type:"address"},{indexed:!1,internalType:"address",name:"target",type:"address"}],name:"ExecuteMigration",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"migrationTimestamp",type:"uint256"},{indexed:!1,internalType:"address",name:"source",type:"address"},{indexed:!1,internalType:"address",name:"target",type:"address"}],name:"PrepareMigration",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!1,internalType:"uint256",name:"lAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"removeAmount",type:"uint256"}],name:"RemoveLiquidity",type:"event"},{inputs:[{internalType:"uint256",name:"bAmount",type:"uint256"}],name:"addLiquidity",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"approveMigration",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"controller",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"source",type:"address"}],name:"executeMigration",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"getAddresses",outputs:[{internalType:"address",name:"bToken",type:"address"},{internalType:"address",name:"lToken",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"getParameters",outputs:[{internalType:"uint256",name:"minAddLiquidity",type:"uint256"},{internalType:"uint256",name:"redemptionFeeRatio",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getStateValues",outputs:[{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"string",name:"symbol_",type:"string"},{internalType:"address[2]",name:"addresses_",type:"address[2]"},{internalType:"uint256[2]",name:"parameters_",type:"uint256[2]"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"migrationDestination",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"migrationTimestamp",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newPool",type:"address"},{internalType:"uint256",name:"graceDays",type:"uint256"}],name:"prepareMigration",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"lAmount",type:"uint256"}],name:"removeLiquidity",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newController",type:"address"}],name:"setController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"}];class F extends o{constructor(t,e,n){super(t,e,n),this.contract=new this.web3.eth.Contract(S,this.contractAddress)}async addLiquidity(t,e){const n=[Object(u.B)(e)];return await this._transact("addLiquidity",n,t)}async removeLiquidity(t,e){const n=[Object(u.B)(e)];return await this._transact("removeLiquidity",n,t)}async getParameters(){const t=await this._call("getParameters");return{minAddLiquidity:Object(u.f)(t.minAddLiquidity),redemptionFeeRatio:Object(u.f)(t.redemptionFeeRatio)}}async getStateValues(){const t=await this._call("getStateValues");return{liquidity:Object(u.f)(t)}}async getLiquidity(){const t=await this._call("getStateValues");if(t&&t.liquidity)return Object(u.f)(t.liquidity);throw new Error(`unable to get liquidity of this clp pool ${this.poolAddress}`)}}const E=[{inputs:[{internalType:"contract CakeToken",name:"_cake",type:"address"},{internalType:"contract SyrupBar",name:"_syrup",type:"address"},{internalType:"address",name:"_devaddr",type:"address"},{internalType:"uint256",name:"_cakePerBlock",type:"uint256"},{internalType:"uint256",name:"_startBlock",type:"uint256"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!0,internalType:"uint256",name:"pid",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Deposit",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!0,internalType:"uint256",name:"pid",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"EmergencyWithdraw",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!0,internalType:"uint256",name:"pid",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Withdraw",type:"event"},{inputs:[],name:"BONUS_MULTIPLIER",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_allocPoint",type:"uint256"},{internalType:"contract IBEP20",name:"_lpToken",type:"address"},{internalType:"bool",name:"_withUpdate",type:"bool"}],name:"add",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"cake",outputs:[{internalType:"contract CakeToken",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"cakePerBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_devaddr",type:"address"}],name:"dev",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"devaddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"}],name:"emergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"enterStaking",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_from",type:"uint256"},{internalType:"uint256",name:"_to",type:"uint256"}],name:"getMultiplier",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"leaveStaking",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"massUpdatePools",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"}],name:"migrate",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"migrator",outputs:[{internalType:"contract IMigratorChef",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"pendingCake",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"poolInfo",outputs:[{internalType:"contract IBEP20",name:"lpToken",type:"address"},{internalType:"uint256",name:"allocPoint",type:"uint256"},{internalType:"uint256",name:"lastRewardBlock",type:"uint256"},{internalType:"uint256",name:"accCakePerShare",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"poolLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"uint256",name:"_allocPoint",type:"uint256"},{internalType:"bool",name:"_withUpdate",type:"bool"}],name:"set",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"contract IMigratorChef",name:"_migrator",type:"address"}],name:"setMigrator",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"startBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"syrup",outputs:[{internalType:"contract SyrupBar",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalAllocPoint",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"multiplierNumber",type:"uint256"}],name:"updateMultiplier",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"}],name:"updatePool",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"address",name:"",type:"address"}],name:"userInfo",outputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"rewardDebt",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"}];class R extends o{constructor(t,e,n){super(t,e,n),this.contract=new this.web3.eth.Contract(E,this.contractAddress)}async addLiquidity(t,e){const n=[391,Object(u.B)(e)];return await this._transact("deposit",n,t)}async removeLiquidity(t,e){const n=[391,Object(u.B)(e)];return await this._transact("withdraw",n,t)}async getLiquidity(t){const e=await this._call("userInfo",[391,t]);return e&&e.amount?Object(u.f)(e.amount):(console.log("the amount is not exist "),"0")}}const D=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Approval",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"oldController",type:"address"},{indexed:!1,internalType:"address",name:"newController",type:"address"}],name:"ChangeController",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Transfer",type:"event"},{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"burn",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"controller",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"newController",type:"address"}],name:"setController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}];class q extends o{constructor(t,e,n,i){super(t,e,i),this.poolAddress=n,this.contract=new this.web3.eth.Contract(D,this.contractAddress)}async isUnlocked(t){let e=await this._call("allowance",[t,this.poolAddress]);return Object(u.f)(e).gt(0)}async unlock(t){return await this._transact("approve",[this.poolAddress,u.b],t)}async decimals(){return await this._call("decimals")}async _balance(t){return await this._call("balanceOf",[t])}async balance(t){const[e,n]=await Promise.all([this._balance(t),this.decimals()]);return Object(u.c)(e,-n)}}const $=[{inputs:[{internalType:"address",name:"tokenAddress_",type:"address"},{internalType:"bool",name:"allowMintBurn_",type:"bool"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"migrationTimestamp",type:"uint256"},{indexed:!1,internalType:"address",name:"source",type:"address"},{indexed:!1,internalType:"address",name:"destination",type:"address"}],name:"ApproveMigration",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"fromChainId",type:"uint256"},{indexed:!1,internalType:"address",name:"fromWormhole",type:"address"},{indexed:!1,internalType:"uint256",name:"toChainId",type:"uint256"},{indexed:!1,internalType:"address",name:"toWormhole",type:"address"},{indexed:!1,internalType:"uint256",name:"nonce",type:"uint256"},{indexed:!1,internalType:"uint256",name:"timestamp",type:"uint256"}],name:"Claim",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"migrationTimestamp",type:"uint256"},{indexed:!1,internalType:"address",name:"source",type:"address"},{indexed:!1,internalType:"address",name:"destination",type:"address"}],name:"ExecuteMigration",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"account",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"fromChainId",type:"uint256"},{indexed:!1,internalType:"address",name:"fromWormhole",type:"address"},{indexed:!1,internalType:"uint256",name:"toChainId",type:"uint256"},{indexed:!1,internalType:"address",name:"toWormhole",type:"address"},{indexed:!1,internalType:"uint256",name:"nonce",type:"uint256"},{indexed:!1,internalType:"uint256",name:"timestamp",type:"uint256"}],name:"Freeze",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"migrationTimestamp",type:"uint256"},{indexed:!1,internalType:"address",name:"source",type:"address"},{indexed:!1,internalType:"address",name:"destination",type:"address"}],name:"PrepareMigration",type:"event"},{inputs:[],name:"CLAIM_TYPEHASH",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"DOMAIN_TYPEHASH",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},{inputs:[],name:"allowMintBurn",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"approveMigration",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"chainId",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"fromChainId",type:"uint256"},{internalType:"address",name:"fromWormhole",type:"address"},{internalType:"uint256",name:"fromNonce",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"claim",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"controller",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"source",type:"address"}],name:"executeMigration",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"toChainId",type:"uint256"},{internalType:"address",name:"toWormhole",type:"address"}],name:"freeze",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"isMigrated",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"migrationDestination",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"migrationTimestamp",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"nonce",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"destination",type:"address"},{internalType:"uint256",name:"graceDays",type:"uint256"}],name:"prepareMigration",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"newController",type:"address"}],name:"setController",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"tokenAddress",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"usedHash",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}];class L extends o{constructor(t,e,n){super(t,e,n),this.contract=new this.web3.eth.Contract($,this.contractAddress)}async freeze(t,e,n){const{wormholeAddress:i}=Object(u.o)(n);return this._transact("freeze",[Object(u.B)(e),n,i],t)}async mintDeri(t,e,n,i,a,s,r,o){return this._transact("claim",[e,n,i,a,s,r,o],t)}}const U=(()=>{const t={};return(e=!1)=>{const n=Object(P.getDBAddressConfig)(j.a.get(),e),i=n;if(Object.keys(t).includes(i))return t[i];const a=new w(n);return t[i]=a,a}})(),N=(()=>{const t={};return(e=!1)=>{const n=Object(P.getDBWormholeAddressConfig)(j.a.get(),e),i=n;if(Object.keys(t).includes(i))return t[i];const a=new A(n);return t[i]=a,a}})(),V=(()=>{const t={};return(e=!1)=>{const n=Object(P.getDBAirdropAddressConfig)(j.a.get(),e),i=n;if(Object.keys(t).includes(i))return t[i];const a=new k(n);return t[i]=a,a}})(),H=(()=>{const t={};return(e,n,i=!1)=>{let a;if(a=i?`${e}.${n}.isProvider`:`${e}.${n}`,Object.keys(t).includes(a))return t[a];const s=new d(e,n,i);return t[a]=s,s}})(),W=function(){const t={};return(e,n,i,a=!1)=>{let s;if(s=a?`${e}.${n}.${i}.isProvider`:`${e}.${n}.${i}`,Object.keys(t).includes(s))return t[s];const r=new y(e,n,i,a);return t[s]=r,r}}(),z=function(){const t={};return(e,n,i,a=!1)=>{let s;if(s=a?`${e}.${n}.${i}.isProvider`:`${e}.${n}.${i}`,Object.keys(t).includes(s))return t[s];const r=new b(e,n,i,a);return t[s]=r,r}}(),G=function(){const t={};return(e,n,i,a=!1)=>{let s;if(s=a?`${e}.${n}.${i}.isProvider`:`${e}.${n}.${i}`,Object.keys(t).includes(s))return t[s];const r=new T(e,n,i,a);return t[s]=r,r}}(),X=function(){const t={};return(e,n,i=!1)=>{let a;if(a=i?`${e}.${n}.isProvider`:`${e}.${n}`,Object.keys(t).includes(a))return t[a];const s=new O(e,n,i);return t[a]=s,s}}(),Y=function(){const t={};return(e,n,i=!1)=>{let a;if(a=i?`${e}.${n}.isProvider`:`${e}.${n}`,Object.keys(t).includes(a))return t[a];const s=new _(e,n,i);return t[a]=s,s}}(),J=function(){const t={};return(e,n,i=!1)=>{let a;if(a=i?`${e}.${n}.isProvider`:`${e}.${n}`,Object.keys(t).includes(a))return t[a];const s=new F(e,n,i);return t[a]=s,s}}(),K=function(){const t={};return(e,n,i=!1)=>{let a;if(a=i?`${e}.${n}.isProvider`:`${e}.${n}`,Object.keys(t).includes(a))return t[a];const s=new R(e,n,i);return t[a]=s,s}}(),Q=function(){const t={};return(e,n,i,a=!1)=>{let s;if(s=a?`${e}.${n}.isProvider`:`${e}.${n}`,Object.keys(t).includes(s))return t[s];const r=new q(e,n,i,a);return t[s]=r,r}}(),Z=function(){const t={};return(e,n,i=!1)=>{let a;if(a=i?`${e}.${n}.isProvider`:`${e}.${n}`,Object.keys(t).includes(a))return t[a];const s=new L(e,n,i);return t[a]=s,s}}(),tt=function(){const t={};return(e,n,i=!1)=>{let a;if(a=i?`${e}.${n}.isProvider`:`${e}.${n}`,Object.keys(t).includes(a))return t[a];const s=new x(e,n,i);return t[a]=s,s}}()},403:function(t,e){},405:function(t,e){},412:function(t,e){},425:function(t,e){},44:function(t,e,n){"use strict";n.d(e,"c",(function(){return i})),n.d(e,"a",(function(){return a})),n.d(e,"d",(function(){return s})),n.d(e,"b",(function(){return r}));const i=()=>["https://data-seed-prebsc-1-s1.binance.org:8545/","https://data-seed-prebsc-2-s1.binance.org:8545/","https://data-seed-prebsc-1-s2.binance.org:8545/","https://data-seed-prebsc-2-s2.binance.org:8545/","https://data-seed-prebsc-1-s3.binance.org:8545/","https://data-seed-prebsc-2-s3.binance.org:8545/"],a=(t="dev",e)=>"prod"!==t&&"production"!==t||!e?"0x7C1267188379f57d92e640E519151229E1eA5565":"0x824B6238EdCbaCCAF83C3F60C0cEB38bEb7C9e89",s=(t="dev",e)=>"prod"!==t&&"production"!==t||!e?"0x3c9118C7f9f4ef0Ab5333cD710922dBCCC2d870d":"0xd8137F05c1F432A80525053c473d0e286c4F46f0",r=(t="dev",e)=>"prod"!==t&&"production"!==t||!e?"0x7C1267188379f57d92e640E519151229E1eA5565":"0x35b2650eFb799DF4696b292D11b4770a0fFaa7c7"},443:function(t,e){},45:function(t,e,n){"use strict";n.d(e,"e",(function(){return o})),n.d(e,"f",(function(){return u})),n.d(e,"g",(function(){return p})),n.d(e,"d",(function(){return l})),n.d(e,"a",(function(){return d})),n.d(e,"b",(function(){return c})),n.d(e,"c",(function(){return y}));var i=n(4),a=(n(29),n(34)),s=n(0),r=n(22);const o=async(t,e,n)=>{let a="";try{a=await Object(s.k)(t,e)}catch(f){console.log(f)}const{pTokenAddress:o}=Object(s.t)(t,e),u=Object(i.l)(t,e),p=Object(i.k)(t,o,e),{multiplier:l,minInitialMarginRatio:d,minMaintenanceMarginRatio:c}=await u.getParameters(),{volume:y,margin:m,cost:b}=await p.getPositionInfo(n);return""===a?{price:a,volume:y.toString(),averageEntryPrice:Object(r.a)(y,b,l).toString(),margin:m.toString(),marginHeld:"",unrealizedPnl:"",liquidationPrice:Object(r.c)(y,m,b,l,c).toString()}:{price:a,volume:y.toString(),averageEntryPrice:Object(r.a)(y,b,l).toString(),margin:m.toString(),marginHeld:Object(r.e)(a,y,l,d).toString(),unrealizedPnl:Object(r.h)(a,y,l,b).toString(),liquidationPrice:Object(r.c)(y,m,b,l,c).toString()}},u=async(t,e,n)=>{const{bTokenAddress:a}=Object(s.t)(t,e),r=Object(i.a)(t,a,e);return(await r.balance(n)).toString()},p=async(t,e,n)=>{const{bTokenAddress:a}=Object(s.t)(t,e),r=Object(i.a)(t,a,e);return await r.isUnlocked(n)},l=async(t,e,n,a,r)=>{const o=await Object(s.k)(t,e),u=Object(i.l)(t,e),{multiplier:p}=await u.getParameters();return Object(s.c)(a).abs().times(o).times(p).div(Object(s.c)(r)).toString()},d=async(t,e,n)=>{let i=a.c.get(),r=a.a.get();""===i&&(await a.c.update(t,e),i=a.c.get()),r.multiplier||(r=await a.a.update(t,e));const{multiplier:o,feeRatio:u}=r;return Object(s.c)(n).abs().times(i).times(o).times(u).toString()},c=async(t,e,n)=>{let o,u;if(u=a.b.get(t,e),!u){const n=Object(i.l)(t,e);u=await n.getFundingRate()}if(u){const e=[Object(s.c)(u.tradersNetVolume).plus(Object(s.c)(n)).toString(),u.price,u.multiplier,u.liquidity,u.fundingRateCoefficient];return Object(s.v)(...e)?{fundingRate1:"0"}:(o=Object(r.b)(...e),o=Object(r.k)(t,o),{fundingRate1:Object(s.C)(o)})}},y=async(t,e,n)=>{let o;if(o=a.b.get(t,e),!o){const n=Object(i.l)(t,e);o=await n.getFundingRate().catch((t=>console.log("getLiquidityUsed",t)))}if(o){const t=[Object(s.c)(o.tradersNetVolume).plus(Object(s.c)(n)).toString(),o.price,o.multiplier,o.liquidity,o.poolMarginRatio];if(Object(s.v)(...t))return{liquidityUsed1:"0"};const e=Object(r.d)(...t);return{liquidityUsed1:Object(s.C)(e)}}}},454:function(t,e){},457:function(t,e){},52:function(t,e,n){"use strict";n.d(e,"b",(function(){return s})),n.d(e,"a",(function(){return r})),n.d(e,"e",(function(){return o})),n.d(e,"d",(function(){return u})),n.d(e,"f",(function(){return p})),n.d(e,"c",(function(){return l}));var i=n(4),a=n(0);const s=async(t,e,n)=>{const{bTokenAddress:s}=Object(a.u)(t,e);if(s){const a=Object(i.m)(t,e),r=Object(i.a)(t,s,e),[o,u,p]=await Promise.all([r.balance(e),r.balance(n),a.getLiquidity(n)]);return{poolLiquidity:o.toString(),bTokenBalance:u.toString(),shares:p.toString(),shareValue:"1"}}return console.log("no SlpPool address, please check"),{}},r=async(t,e,n,s)=>{let r;const{bTokenAddress:o}=Object(a.u)(t,e);if(o){const a=Object(i.m)(t,e);try{r={success:!0,transaction:await a.addLiquidity(n,s)}}catch(u){r={success:!1,error:u}}}else r={success:!1,error:"unable to get bToken address of slp pool"};return r},o=async(t,e,n,s)=>{let r;const{bTokenAddress:o}=Object(a.u)(t,e);if(o){const a=Object(i.m)(t,e);try{r={success:!0,transaction:await a.removeLiquidity(n,s)}}catch(u){r={success:!1,error:u}}}else r={success:!1,error:"unable to get bToken address of slp pool"};return r},u=async(t,e,n)=>{const{bTokenAddress:s}=Object(a.u)(t,e),r=Object(i.a)(t,s,e);return await r.isUnlocked(n)},p=async(t,e,n)=>{const{bTokenAddress:s}=Object(a.u)(t,e),r=Object(i.a)(t,s,e);let o;try{o={success:!0,transaction:await r.unlock(n)}}catch(u){o={success:!1,error:u}}return o},l=async(t,e,n)=>{const{bTokenAddress:s}=Object(a.u)(t,e),r=Object(i.a)(t,s,e);return(await r.balance(n)).toString()}},525:function(t,e,n){"use strict";n.r(e);var i=n(2),a=n.n(i),s=n(87),r=n.n(s),o=n(139),u=n(134),p=n(101),l=n(43);const d=Object(p.a)((()=>n.e(7).then(n.bind(null,600)))),c=Object(p.a)((()=>n.e(8).then(n.bind(null,599))));var y=function(){return u.isBrowser?Object(l.jsx)(d,{}):u.isMobile?Object(l.jsx)(c,{}):void 0},m=(n(260),n(138)),b=n(17),f=n(140),T=n(35),g=n(3);var h=class{constructor(){this.detail={},this.isConnected=()=>!!this.detail.account,this.approve=async(t,e)=>{if(this.detail.chainId){return await Object(b.unlock)(this.detail.chainId,t,this.detail.account,e)}},this.connect=async()=>{const t=await Object(b.connectWallet)();return new Promise((async(e,n)=>{if(t.success){const{chainId:n,account:i}=t;e(await this.loadWalletBalance(n,i))}else n(null)}))},this.loadWalletBalance=async(t,e)=>{const n=await Object(b.getUserWalletBalance)(t,e),i={chainId:t,account:e,balance:n,formatBalance:Object(T.d)(n)},a=b.DeriEnv.get(),{chainInfo:s}=f[a];return s[t]&&Object.assign(i,{...s[t],supported:!0}),this.setDetail(i),i},this.get=()=>this.detail,Object(g.n)(this,{detail:g.p,setDetail:g.f,supportV2:g.g,supportChain:g.g})}async isApproved(t,e){if(this.detail.chainId){const n=await Object(b.isUnlocked)(this.detail.chainId,t,this.detail.account,e);return this.detail.isApproved=n,this.setDetail(this.detail),n}}setDetail(t){this.detail=t}get supportV2(){return Object(T.b)(this.detail.chainId,56)||Object(T.b)(this.detail.chainId,97)||Object(T.b)(this.detail.chainId,80001)}get supportChain(){return this.detail.supported}},w=n(99),v=n.n(w);var A=class{constructor(){this.symbol="BTCUSD",this.timeType="min",this.index=0,this.kData=[],this.ws=null,this.paused=!1,this.listeners={},this.already=!1,Object(g.n)(this,{index:g.p,kData:g.p,setIndex:g.f}),this.initWebSocket()}initWebSocket(){null===this.ws&&(this.ws=new v.a("wss://oracle4.deri.finance",{transports:["websocket"],withCredentials:!0}),this.ws.on("connect",(()=>{this.already&&(this.ws.emit("get_kline_update",{symbol:this.symbol,time_type:this.timeType}),console.log("ws is reconnected already")),console.log("ws is already connected")})))}load(t,e="min"){this.ws.on("kline_update",(t=>{const e={};let n=t.time;if(t.symbol.toUpperCase()===this.symbol.toUpperCase()&&(e.time=n,e.low=Number(t.low),e.high=Number(t.high),e.open=Number(t.open),e.close=Number(t.close),e.volume=Number(t.volume),e.time_type=t.time_type,e.symbol=t.symbol,!this.paused)){this.setIndex(e.close);for(const t of Object.keys(this.listeners))"function"===typeof this.listeners[t]&&this.listeners[t](e)}})),t!==this.symbol&&this.unsubscribeBars(this.symbol),this.setSymbol(t),this.setTimeType(e),this.ws.emit("get_kline_update",{symbol:this.symbol,time_type:this.timeType}),this.already=!0}addListener(t,e){this.listeners[t]||(this.listeners[t]=e)}unsubscribeBars(t){this.ws.emit("un_get_kline_update",{symbol:t,time_type:"min"})}loadHistory(t,e,n){this.ws.on("kline_history",(t=>{const e=t.map((t=>({time:t.time,low:Number(t.low),high:Number(t.high),open:Number(t.open),close:Number(t.close),volume:Number(t.volume)})));n&&(console.log("history ->",e[e.length-1].time),n(e))})),this.ws.emit("get_kline",{symbol:t,time_type:e,bars:1e3})}resume(){this.setPause(!1)}pause(){this.setPause(!0)}setIndex(t){this.paused||(this.index=t)}setSymbol(t){this.symbol=t}setTimeType(t){this.timeType=t}setPause(t){this.paused=t}};class M{constructor(){this.callback=()=>{},this.wallet=null,this.spec=null,this.mockPositionInfo={averageEntryPrice:"",liquidationPrice:"",margin:"20000",marginHeld:"10068.26538",marginHeldBySymbol:"293.16152",unrealizedPnl:"3.1311",volume:"800"}}async load(t,e,n){if(t&&t.isConnected()&&t.supportChain&&e&&e.pool){const i=await Object(b.getPositionInfo)(t.detail.chainId,e.pool,t.detail.account,e.symbolId);return i&&n&&n(i),this.start(t,e,n),i}}start(t,e,n){this.interval||(this.interval=window.setInterval((()=>this.load(t,e,n)),3e3),t&&(this.wallet=t),e&&(this.spec=e),n&&(this.callback=n))}pause(){clearInterval(this.interval),this.interval=null}resume(t,e,n){this.start(t,e,n||this.callback)}}class k{constructor(){this.info={bSymbol:"BUSD",symbol:"BTCUSD",multiplier:"0.0001",fundingRateCoefficient:"0.0000025",minInitialMarginRatio:.1,minMaintenanceMarginRatio:.05,feeRatio:5e-4}}async load(t,e){if(t&&t.supportChain&&e&&e.pool!==this.info.pool){const n=await Object(b.getSpecification)(t.detail.chainId,e.pool,e.bTokenId,e.symbolId);this.setInfo(n)}return this.info}setInfo(t){this.info=t}}class I{async load(t,e){if(t&&t.detail.chainId&&e&&e.pool){return await Object(b.getTradeHistory)(t.detail.chainId,e.pool,t.detail.account,e.symbolId)}return[]}}var O=n(141);const C=new h,x=new class{constructor(){this.version=null,this.wallet=null,this.configs=[],this.config=null,this.index="",this.volume="",this.paused=!1,this.slideIncrementMargin=0,this.position={},this.contract={},this.fundingRate={},this.history=[],this.userSelectedDirection="long",Object(g.o)(this,{index:g.p,volume:g.p,slideIncrementMargin:g.p,fundingRate:g.p,position:g.p,history:g.p,contract:g.p,userSelectedDirection:g.p,setWallet:g.f,setConfigs:g.f,setConfig:g.f,setIndex:g.f,setContract:g.f,setPosition:g.f,setVolume:g.f,setUserSelectedDirection:g.f,setFundingRate:g.f,setHistory:g.f,setSlideMargin:g.f,amount:g.g,fundingRateTip:g.g,direction:g.g,volumeDisplay:g.g,isNegative:g.g,isPositive:g.g}),this.configInfo=new O.a,this.oracle=new A,this.positionInfo=new M,this.contractInfo=new k,this.historyInfo=new I}async init(t,e){e&&(this.version=e);const n=await this.configInfo.load(e);if(t&&t.isConnected()){this.setWallet(t),this.setConfigs(n.filter((e=>Object(T.b)(t.detail.chainId,e.chainId))));let e=this.getDefaultConfig(this.configs,t);e||(e=n.length>0?n[0]:{}),this.setConfig(e)}if(!t.isConnected()&&0===this.configs.length&&n.length>0){let t=n.find((t=>"BTCUSD"===t.symbol));t=t||n[0],this.setConfig(t)}this.loadByConfig(this.wallet,this.config,!0),this.setVolume("")}async switch(t){const e=this.configs.find((e=>e.pool===t.pool&&e.symbolId===t.symbolId));let n=!1;this.version&&(n=this.version.isV1?t.pool!==this.config.pool:t.symbolId!==this.config.symbolId),e&&(this.pause(),this.setConfig(e),this.loadByConfig(this.wallet,e,n),n&&this.store(e),this.resume(),this.setVolume(""))}async loadByConfig(t,e,n){if(this.positionInfo.load(t,e,(t=>{this.setPosition(t)})),n&&e){this.oracle.unsubscribeBars(),this.oracle.addListener("trading",(t=>{this.setIndex(t.close)}));const t=this.version.isV2?`${e.symbol}_V2`:e.symbol;this.oracle.load(t)}const i=await this.contractInfo.load(t,e),a=await this.loadFundingRate(t,e),s=await this.historyInfo.load(t,e);i&&this.setContract(i),a&&this.setFundingRate(a),s&&this.setHistory(s)}getDefaultConfig(t=[],e){let n=null;if(t.length>0){const i=this.getFromStore();if(i&&Object(T.b)(e.detail.chainId,i.chainId)&&(n=i),n){-1===t.findIndex((t=>t.pool===n.pool))&&(n=t[0])}else n=t[0]}return n}store(t){Object(T.j)(this.version.current,t)}getFromStore(){return Object(T.e)(this.version.current)}async refresh(){this.pause();const t=await this.positionInfo.load(this.wallet,this.config);this.wallet.loadWalletBalance(this.wallet.detail.chainId,this.wallet.detail.account);const e=await this.loadFundingRate(this.wallet,this.config),n=await this.historyInfo.load(this.wallet,this.config);e&&this.setFundingRate(e),t&&this.setPosition(t),n&&this.setHistory(n),this.setVolume(""),this.resume()}pause(){this.setPaused(!0),this.oracle.pause(),this.positionInfo.pause()}resume(){this.setPaused(!1),this.oracle.resume(),this.positionInfo.resume(this.wallet,this.config)}setWallet(t){this.wallet=t}setConfigs(t){this.configs=t}setConfig(t){this.config=t}setIndex(t){this.index=t}setPosition(t){t&&(this.position=t)}setContract(t){this.contract=t}setHistory(t){this.history=t}setFundingRate(t){this.fundingRate=t}setVolume(t){this.volume=t}setPaused(t){this.paused=t}setUserSelectedDirection(t){this.userSelectedDirection=t}setSlideMargin(t){if(""!==t){this.slideIncrementMargin=t;const e=this.position,n=e.price||this.index,i=(t-e.marginHeld)/(n*this.contract.multiplier*this.contract.minInitialMarginRatio);this.setVolume(i.toFixed(0))}}get volumeDisplay(){return 0===Math.abs(this.volume)||""===this.volume||"-"===this.volume||"e"===this.volume||isNaN(this.volume)?"":Math.abs(this.volume)}get amount(){const t=this.position,e=this.contract,n=""===this.volume||isNaN(this.volume)?0:Math.abs(this.volume);let{margin:i,marginHeldBySymbol:a,marginHeld:s,unrealizedPnl:r}=t;const o=t.price||this.index;let u=Object(b.bg)(s).minus(a);u=u.isNaN()?Object(b.bg)(0):u;const p=n*o*e.multiplier*e.minInitialMarginRatio;let l=Object(b.bg)(s);this.isPositive&&"short"===this.userSelectedDirection||this.isNegative&&"long"===this.userSelectedDirection?(l=l.minus(p),l.lt(u)&&(l=u.plus(u.minus(l).abs())),a=Object(b.bg)(a).minus(p).abs().toFixed(2)):(l=Object(b.bg)(s).plus(p),a&&(a=Object(b.bg)(a).plus(p).toFixed(2)));const d=i&&Object(b.bg)(i).plus(r).toFixed(2);l=l.gt(d)?d:l.toFixed(2),a&&(a=+a>+d?d:(+a).toFixed(2));let c=Object(b.bg)(d).minus(l).toFixed(2);const y=Object(b.bg)(n).multipliedBy(e.multiplier).toFixed(4),m=("short"===this.userSelectedDirection?-this.volumeDisplay+ +t.volume:+this.volumeDisplay+ +t.volume)*o*e.multiplier,f=Math.abs(m/+d).toFixed(1);return c=+c<0?0:c,{volume:this.volume,dynBalance:d,margin:l,available:c,exchanged:y,currentSymbolMarginHeld:a,leverage:f}}get direction(){if(""!==this.margin){if(+this.position.volume>0)return Math.abs(this.volume)>Math.abs(this.position.volume)?"long":"short";if(+this.position.volume<0)return+this.volume>Math.abs(+this.position.volume)?"short":"long"}return 0}get isPositive(){return Object(b.bg)(this.position.volume).gt(0)}get isNegative(){return Object(b.bg)(this.position.volume).isNegative()}async loadFundingRate(t,e){if(e){const n=t&&t.isConnected()&&t.supportChain?t.detail.chainId:e.chainId;if(e){return await Object(b.getFundingRate)(n,e.pool,e.symbolId)}}}get fundingRateTip(){if(this.version&&this.version.isV2){if(this.fundingRate&&this.fundingRate.fundingRatePerBlock&&this.config)return`Funding  Rate (per block) = ${this.fundingRate.fundingRatePerBlock}\n1 Long contract pays 1 short contract (${this.fundingRate.fundingRatePerBlock} * IndexPrice * ${this.contract.multiplier} ) ${this.config.bTokenSymbol} per block`}else if(this.fundingRate&&this.fundingRate.fundingRatePerBlock&&this.config)return`Funding  Rate (per block) = ${this.fundingRate.fundingRatePerBlock}\n(1 Long contract pays 1 short contract ${this.fundingRate.fundingRatePerBlock} ${this.config.bTokenSymbol} per block)`;return""}},j=new class{constructor(){this.current=null,Object(g.n)(this,{current:g.p,setCurrent:g.f,isV1:g.g,isV2:g.g});const t=Object(T.i)();this.current=t||null}setCurrent(t,e){this.current=t,e||Object(T.k)(t)}switch(){"v1"===this.current?this.setCurrent("v2"):this.setCurrent("v1")}get isV1(){return"v1"===this.current}get isV2(){return"v2"===this.current}};r.a.render(Object(l.jsx)(a.a.StrictMode,{children:Object(l.jsx)(o.a,{children:Object(l.jsx)(m.a,{wallet:C,trading:x,version:j,children:Object(l.jsx)(y,{})})})}),document.getElementById("root"))},53:function(t,e,n){"use strict";n.d(e,"b",(function(){return s})),n.d(e,"a",(function(){return r})),n.d(e,"e",(function(){return o})),n.d(e,"d",(function(){return u})),n.d(e,"f",(function(){return p})),n.d(e,"c",(function(){return l}));var i=n(4),a=n(0);const s=async(t,e,n)=>{const{bTokenAddress:s}=Object(a.m)(t,e);if(s){const a=Object(i.b)(t,e),r=Object(i.a)(t,s,e),[o,u,p]=await Promise.all([r.balance(e),r.balance(n),a.getLiquidity(n)]);return{poolLiquidity:o.toString(),bTokenBalance:u.toString(),shares:p.toString(),shareValue:"1"}}return console.log("no Clp2Pool address, please check"),{}},r=async(t,e,n,s)=>{let r;const{bTokenAddress:o}=Object(a.m)(t,e);if(o){const a=Object(i.b)(t,e);try{r={success:!0,transaction:await a.addLiquidity(n,s)}}catch(u){r={success:!1,error:u}}}else r={success:!1,error:"unable to get bToken address of clp2 pool"};return r},o=async(t,e,n,s)=>{let r;const{bTokenAddress:o}=Object(a.m)(t,e);if(o){const a=Object(i.b)(t,e);try{r={success:!0,transaction:await a.removeLiquidity(n,s)}}catch(u){r={success:!1,error:u}}}else r={success:!1,error:"unable to get bToken address of clp2 pool"};return r},u=async(t,e,n)=>{const{bTokenAddress:s}=Object(a.m)(t,e),r=Object(i.a)(t,s,e);return await r.isUnlocked(n)},p=async(t,e,n)=>{const{bTokenAddress:s}=Object(a.m)(t,e),r=Object(i.a)(t,s,e);let o;try{o={success:!0,transaction:await r.unlock(n)}}catch(u){o={success:!1,error:u}}return o},l=async(t,e,n)=>{const{bTokenAddress:s}=Object(a.m)(t,e),r=Object(i.a)(t,s,e);return(await r.balance(n)).toString()}},54:function(t,e,n){"use strict";n.d(e,"b",(function(){return s})),n.d(e,"a",(function(){return r})),n.d(e,"e",(function(){return o})),n.d(e,"d",(function(){return u})),n.d(e,"f",(function(){return p})),n.d(e,"c",(function(){return l}));var i=n(4),a=n(0);const s=async(t,e,n)=>{const{lTokenAddress:s}=Object(a.n)(t,e),r=Object(i.c)(t,e),o=Object(i.h)(t,s,e),[u,p]=await Promise.all([o.balance(n),o.totalSupply()]),{liquidity:l}=await r.getStateValues();return{totalSupply:p.toString(),poolLiquidity:l.toString(),shares:u.toString(),shareValue:(p.eq(0)?Object(a.c)(0):l.div(p)).toString(),maxRemovableShares:u.toString()}},r=async(t,e,n,s)=>{let r;const{bTokenAddress:o}=Object(a.n)(t,e);if(o){const a=Object(i.c)(t,e);try{const t=await a.addLiquidity(n,s);console.log(t,typeof t),r={success:!0,transaction:t}}catch(u){r={success:!1,error:u}}}else r={success:!1,error:"unable to get bToken address of clp pool"};return r},o=async(t,e,n,s)=>{let r;const{bTokenAddress:o}=Object(a.n)(t,e);if(o){const a=Object(i.c)(t,e);try{r={success:!0,transaction:await a.removeLiquidity(n,s)}}catch(u){r={success:!1,error:u}}}else r={success:!1,error:"unable to get bToken address of clp pool"};return r},u=async(t,e,n)=>{const{bTokenAddress:s}=Object(a.n)(t,e),r=Object(i.a)(t,s,e);return await r.isUnlocked(n)},p=async(t,e,n)=>{const{bTokenAddress:s}=Object(a.n)(t,e),r=Object(i.a)(t,s,e);let o;try{o={success:!0,transaction:await r.unlock(n)}}catch(u){o={success:!1,error:u}}return o},l=async(t,e,n)=>{const{bTokenAddress:s}=Object(a.n)(t,e),r=Object(i.a)(t,s,e);return(await r.balance(n)).toString()}},6:function(t,e,n){"use strict";n.r(e),n.d(e,"getChainProviderUrls",(function(){return i})),n.d(e,"getAnnualBlockNumberConfig",(function(){return a})),n.d(e,"MAX_UINT256",(function(){return s})),n.d(e,"MAX_INT256",(function(){return r})),n.d(e,"getPoolConfigList",(function(){return u})),n.d(e,"getFilteredPoolConfigList",(function(){return p})),n.d(e,"getPoolConfig",(function(){return l})),n.d(e,"getOracleConfigList",(function(){return d})),n.d(e,"getOracleConfig",(function(){return c}));const i=t=>{const e=[{provider_urls:["https://mainnet.infura.io/v3/d0e6582644a845ee8d7c3c18683fec06"],chainId:"1"},{provider_urls:["https://bsc-dataseed.binance.org","https://bsc-dataseed1.defibit.io/","https://bsc-dataseed1.ninicoin.io/"],chainId:"56"},{provider_urls:["https://http-mainnet.hecochain.com"],chainId:"128"},{provider_urls:["https://rpc-mainnet.matic.network","https://rpc-mainnet.maticvigil.com","https://rpc-mainnet.matic.quiknode.pro","https://matic-mainnet.chainstacklabs.com","https://matic-mainnet-full-rpc.bwarelabs.com","https://matic-mainnet-archive-rpc.bwarelabs.com"],chainId:"137"},{provider_urls:["https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584"],chainId:"3"},{provider_urls:["https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584"],chainId:"42"},{provider_urls:["https://data-seed-prebsc-2-s1.binance.org:8545/","https://data-seed-prebsc-1-s2.binance.org:8545/","https://data-seed-prebsc-2-s2.binance.org:8545/","https://data-seed-prebsc-1-s3.binance.org:8545/","https://data-seed-prebsc-1-s1.binance.org:8545/","https://data-seed-prebsc-2-s3.binance.org:8545/"],chainId:"97"},{provider_urls:["https://http-testnet.hecochain.com"],chainId:"256"},{provider_urls:["https://rpc-mumbai.matic.today","https://rpc-mumbai.maticvigil.com","https://matic-mumbai.chainstacklabs.com","https://matic-testnet-archive-rpc.bwarelabs.com"],chainId:"80001"}].filter((e=>e.chainId===t));if(e.length>0)return e[0].provider_urls;throw new Error(`getChainProviderUrls: no urls for chainId ${t}`)},a=()=>({1:"2367422",56:"10497304",128:"10511369",3:"2367422",97:"10497304",256:"10511369"}),s="0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",r="0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff";var o=n(11);const u=(t="dev")=>"prod"===t?[{pool:"0x19c2655A0e1639B189FB0CF06e02DC0254419D92",pToken:"0x2AA5865BF556ab3f6Cd9405e565099f70234dF05",lToken:"0x6f8F1C2781b555B63F1A1BE85BF99aEe27d87cB2",router:"0xC9C234243f48Fa05A993c29B4F5f93048f5b07E4",bToken:"0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56",bTokenId:"0",initialBlock:"7884650",bTokenSymbol:"BUSD",symbol:"BTCUSD",symbolId:"0",unit:"BTC",chainId:"56",version:"v2"},{pool:"0x19c2655A0e1639B189FB0CF06e02DC0254419D92",pToken:"0x2AA5865BF556ab3f6Cd9405e565099f70234dF05",lToken:"0x6f8F1C2781b555B63F1A1BE85BF99aEe27d87cB2",router:"0xC9C234243f48Fa05A993c29B4F5f93048f5b07E4",bToken:"0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56",bTokenId:"0",initialBlock:"7884650",bTokenSymbol:"BUSD",symbol:"ETHUSD",symbolId:"1",unit:"ETH",chainId:"56",version:"v2"}]:[{pool:"0x54a71Cad29C314eA081b2B0b1Ac25a7cE3b7f7A5",pToken:"0x270128C2d7E8713c8c25F7800738C29214eAFeBA",lToken:"0x904262d92B21e5214278632d01405738d841d82a",router:"0x07fb21FE50A31dFaf312dFa9f5BA5CF14DC7E1e6",bToken:"0x4038191eFb39Fe1d21a48E061F8F14cF4981A0aF",bTokenId:"0",initialBlock:"9516935",bTokenSymbol:"BUSD",symbol:"BTCUSD",symbolId:"0",unit:"BTC",chainId:"97",version:"v2"},{pool:"0x54a71Cad29C314eA081b2B0b1Ac25a7cE3b7f7A5",pToken:"0x270128C2d7E8713c8c25F7800738C29214eAFeBA",lToken:"0x904262d92B21e5214278632d01405738d841d82a",router:"0x07fb21FE50A31dFaf312dFa9f5BA5CF14DC7E1e6",bToken:"0x4038191eFb39Fe1d21a48E061F8F14cF4981A0aF",bTokenId:"0",initialBlock:"9516935",bTokenSymbol:"BUSD",symbol:"ETHUSD",symbolId:"1",unit:"ETH",chainId:"97",version:"v2"},{pool:"0x54a71Cad29C314eA081b2B0b1Ac25a7cE3b7f7A5",pToken:"0x270128C2d7E8713c8c25F7800738C29214eAFeBA",lToken:"0x904262d92B21e5214278632d01405738d841d82a",router:"0x07fb21FE50A31dFaf312dFa9f5BA5CF14DC7E1e6",bToken:"0xd2F37BADdB702FF778aA038C63b7068054d93508",bTokenId:"1",initialBlock:"9516935",bTokenSymbol:"AUTO",symbol:"BTCUSD",symbolId:"0",unit:"BTC",chainId:"97",version:"v2"},{pool:"0x54a71Cad29C314eA081b2B0b1Ac25a7cE3b7f7A5",pToken:"0x270128C2d7E8713c8c25F7800738C29214eAFeBA",lToken:"0x904262d92B21e5214278632d01405738d841d82a",router:"0x07fb21FE50A31dFaf312dFa9f5BA5CF14DC7E1e6",bToken:"0xd2F37BADdB702FF778aA038C63b7068054d93508",bTokenId:"1",initialBlock:"9516935",bTokenSymbol:"AUTO",symbol:"ETHUSD",symbolId:"1",unit:"ETH",chainId:"97",version:"v2"},{pool:"0x54a71Cad29C314eA081b2B0b1Ac25a7cE3b7f7A5",pToken:"0x270128C2d7E8713c8c25F7800738C29214eAFeBA",lToken:"0x904262d92B21e5214278632d01405738d841d82a",router:"0x07fb21FE50A31dFaf312dFa9f5BA5CF14DC7E1e6",bToken:"0x5b403E0f6686725171c2Baa7A0b7cD4253B0bc57",bTokenId:"2",initialBlock:"9516935",bTokenSymbol:"CAKE",symbol:"BTCUSD",symbolId:"0",unit:"BTC",chainId:"97",version:"v2"},{pool:"0x54a71Cad29C314eA081b2B0b1Ac25a7cE3b7f7A5",pToken:"0x270128C2d7E8713c8c25F7800738C29214eAFeBA",lToken:"0x904262d92B21e5214278632d01405738d841d82a",router:"0x07fb21FE50A31dFaf312dFa9f5BA5CF14DC7E1e6",bToken:"0x5b403E0f6686725171c2Baa7A0b7cD4253B0bc57",bTokenId:"2",initialBlock:"9516935",bTokenSymbol:"CAKE",symbol:"ETHUSD",symbolId:"1",unit:"ETH",chainId:"97",version:"v2"},{pool:"0x35a85396e7A8a9E85170fbb589ce085abcAd8266",pToken:"0x3495f770eC0dc8701d2b89454047A8521306E070",lToken:"0xeFCbBF65100FC2C2b96E92c9AbFfeC384177943e",router:"0x4861a9958B65eA8146B89Af929a80c352c905270",bToken:"0x1BD7B233B054AD4D1FBb767eEa628f28fdE314c6",bTokenId:"0",initialBlock:"14917984",bTokenSymbol:"USDT",symbol:"ETHUSD",symbolId:"0",unit:"ETH",chainId:"80001",version:"v2"},{pool:"0x35a85396e7A8a9E85170fbb589ce085abcAd8266",pToken:"0x3495f770eC0dc8701d2b89454047A8521306E070",lToken:"0xeFCbBF65100FC2C2b96E92c9AbFfeC384177943e",router:"0x4861a9958B65eA8146B89Af929a80c352c905270",bToken:"0x1BD7B233B054AD4D1FBb767eEa628f28fdE314c6",bTokenId:"0",initialBlock:"14917984",bTokenSymbol:"USDT",symbol:"MATICUSD",symbolId:"1",unit:"MATIC",chainId:"80001",version:"v2"}],p=(t,e,n)=>{e="number"===typeof e?e.toString():e,n="number"===typeof n?n.toString():n;const i=u(o.DeriEnv.get()),a=null!=e?null!=n?i=>i.pool===t&&i.bTokenId===e&&i.symbolId===n:n=>n.pool===t&&n.bTokenId===e:null!=n?e=>e.pool===t&&e.symbolId===n:e=>e.pool===t;if(i.length>0){const t=i.filter(a);if(t&&t.length>0)return t}throw new Error(`Cannot find the pool config by poolAddress(${t}) bTokenId(${e}) and symbolId(${n})`)},l=(t,e,n)=>p(t,e,n)[0],d=()=>"prod"===o.DeriEnv.get()?[{chainId:"56",symbol:"BTCUSD",address:"0xe3C58d202D4047Ba227e437b79871d51982deEb7"},{chainId:"56",symbol:"ETHUSD",address:"0x9BA8966B706c905E594AcbB946Ad5e29509f45EB"}]:[{chainId:"97",symbol:"BTCUSD",address:"0x72Dba14f90bFF7D74B7556A37205c1291Db7f1E9",decimal:"18"},{chainId:"97",symbol:"ETHUSD",address:"0x36aF683ba23ef721780FCc0e64F25EB72B294020",decimal:"18"},{chainId:"80001",symbol:"ETHUSD",address:"0x0715A7794a1dc8e42615F059dD6e406A6594651A",decimal:"8"},{chainId:"80001",symbol:"MATICUSD",address:"0xd0D5e3DB44DE05E9F294BB0a3bEEaF030DE24Ada",decimal:"8"}],c=(t,e)=>{const n=d().filter((n=>e?n.chainId===t&&n.symbol===e:n.chainId===t));if(n.length>0)return e?n[0]:n;throw new Error("getOracleConfig(): invalid chainId or symbol.",t,e)}},71:function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));const i=(()=>{let t="dev";return{get:()=>t,set:e=>{if("dev"!==e&&"prod"!==e&&"production"!==e)throw new Error("please use 'dev' or 'prod' for DeriEnv");t=e}}})()},86:function(t,e,n){"use strict";n.d(e,"a",(function(){return r})),n.d(e,"b",(function(){return o}));var i=n(10),a=n.n(i),s=n(0);const r=function(){let t=null;return()=>{if(null!==t)return t;let e;if(void 0===typeof window.ethereum)throw new Error("Please install MetaMask first");return e=new a.a(window.ethereum),t=e,e}}(),o=function(){const t={};return async e=>{if(Object.keys(t).includes(e))return t[e];console.log(`==== web3Factory(${e}), please caution the access limits ===`);const n=await Object(s.l)(e),i=new a.a(new a.a.providers.HttpProvider(n));return t[e]=i,i}}()}},[[525,5,6]]]);
//# sourceMappingURL=main.c0630733.chunk.js.map