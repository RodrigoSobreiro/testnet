{"version":3,"sources":["lib/web3js/v2/config/oracle.js","lib/web3js/v2/utils/convert.js","lib/web3js/factory/web3.js","lib/web3js/v2/config/broker.js","lib/web3js/config/database.js","lib/web3js/v2/utils/network.js","lib/web3js/v2/utils/chain.js","utils/LoadableComponent.js","lib/web3js/v2/factory.js","lib/web3js/config/rest_server.js","lib/web3js/utils.js","lib/web3js/config/chain.js","lib/web3js/config/contract.js","lib/web3js/v2/calculation/position.js","lib/web3js/v2/calculation/funding_rate.js","lib/web3js/v2/calculation/liquidity.js","lib/web3js/v2/api/mining_query_api.js","lib/web3js/v2/api/mining_transaction_api.js","lib/web3js/v2/api/api_globals.js","lib/web3js/v2/api/trade_query_api.js","lib/web3js/v2/api/trade_history_api.js","lib/web3js/v2/api/trade_transaction_api.js","lib/web3js/v2/api/broker_api.js","lib/web3js/indexV2.js","lib/web3js/api/walletApi.js","lib/web3js/api/lpPoolApi.js","model/Config.js","lib/web3js/api_wrapper/config_api.js","lib/web3js/api_wrapper/mining_query_api.js","lib/web3js/api_wrapper/mining_transaction_api.js","lib/web3js/api_wrapper/trade_query_api.js","lib/web3js/api_wrapper/trade_transaction_api.js","lib/web3js/api_wrapper/trade_history_api.js","lib/web3js/v2/utils/oracle.js","lib/web3js/calculation/fundingRate.js","lib/web3js/calculation/index.js","lib/web3js/api/contractTransactionApi.js","lib/web3js/api/databaseApi.js","lib/web3js/api/tradeHistoryApi.js","lib/web3js/api/restApi.js","lib/web3js/api/contractTransactionApiV2.js","lib/web3js/api/apiGlobals.js","model/Version.js","utils/utils.js","lib/web3js/api/contractQueryApi.js","../lang).)*/.json$","lib/web3js/v2/contract/contract_base.js","lib/web3js/v2/contract/abis.js","lib/web3js/v2/contract/perpetual_pool.js","lib/web3js/v2/contract/perpetual_pool_router.js","lib/web3js/v2/contract/b_token.js","lib/web3js/v2/contract/l_token.js","lib/web3js/v2/contract/p_token.js","lib/web3js/v2/contract/woo_oracle.js","lib/web3js/v2/contract/chainlink_oracle.js","lib/web3js/v2/contract/wrapped_oracle.js","lib/web3js/v2/contract/broker_manager.js","App.js","model/Intl.js","model/Wallet.js","model/Oracle.js","model/Position.js","model/Contract.js","model/History.js","model/Trading.js","index.js","lib/web3js/v2/config/pool.js","lib/web3js/v2/config/chain.js","lib/web3js/api/slpPoolApi.js","lib/web3js/api/clp2PoolApi.js","lib/web3js/api/clpPoolApi.js","lib/web3js/v2/config/config.js","lib/web3js/contract/contract.js","lib/web3js/contract/perpetual_pool.js","lib/web3js/contract/bToken.js","lib/web3js/contract/pToken.js","lib/web3js/contract/lToken.js","lib/web3js/contract/database_base.js","lib/web3js/contract/database.js","lib/web3js/contract/database_wormhole.js","lib/web3js/contract/database_airdrop.js","lib/web3js/contract/mining_vault_pool.js","lib/web3js/contract/mining_vault_router.js","lib/web3js/contract/slp_pool.js","lib/web3js/contract/clp_pool.js","lib/web3js/contract/clp2_pool.js","lib/web3js/contract/deri.js","lib/web3js/contract/wormhole.js","lib/web3js/factory/contracts.js","lib/web3js/v2/utils/validate.js","lib/web3js/config/env.js"],"names":["getOracleConfigList","getConfig","oracle","getOracleConfig","chainId","symbol","filteredByChainId","filter","c","length","Error","BigNumber","config","DECIMAL_PLACES","ROUNDING_MODE","ROUND_DOWN","EXPONENTIAL_AT","bg","value","base","times","repeat","div","max","value1","value2","gte","min","lte","hexToNumber","Web3","utils","deriToNatural","naturalToDeri","toFixed","numberToHex","isBrowser","window","document","isJsDom","navigator","userAgent","includes","metaMaskWeb3","web3Instance","web3","undefined","ethereum","web3Factory","web3InstanceMap","a","Object","keys","console","log","getChainProviderUrl","providerUrl","providers","HttpProvider","getBrokerConfigList","brokerManager","getBrokerConfig","getDBProviderUrlsConfig","getDBAddressConfig","env","useProductionDB","getDBWormholeAddressConfig","getDBAirdropAddressConfig","shuffleArray","array","i","j","Math","floor","random","temp","getBlockNumber","url","res","blockNumber","duration","Number","MAX_SAFE_INTEGER","startTime","Date","now","eth","getLatestRPCServer","urls","promises","push","Promise","all","blockNumbers","sort","b","latestBlockNumber","reduce","index","findIndex","startsWith","async","normalizeChainId","getChainProviderUrls","getDailyBlockNumber","getDailyBlockNumberConfig","parseInt","LoadingPage","NProgress","start","done","React","Component","LoadableComponent","component","Loadable","loader","loading","factory","klass","instances","address","key","get","perpetualPoolFactory","PerpetualPool","perpetualPoolRouterFactory","PerpetualPoolRouter","bTokenFactory","BToken","lTokenFactory","LToken","pTokenFactory","PToken","oracleFactory","instanceMap","decimal","ChainlinkOracle","WrappedOracle","WooOracle","brokerManagerFactory","BrokerManager","getRestServerConfig","process","getRedisWorkerQueneConfig","toChecksumAddress","hexToString","hexToUtf8","hexToNumberString","naturalWithPercentage","sd","toString","deriToString","deriToBool","toNumber","hasInvalidArgsValue","args","some","isNaN","err","MAX_VALUE","getNetworkName","poolNetwork","getPoolContractAddress","poolAddress","pool","getContractAddressConfig","DeriEnv","p","bTokenAddress","bToken","pTokenAddress","pToken","lTokenAddress","lToken","dTokenAdress","dToken","MinningVaultAddress","MiningVault","bTokenSymbol","unit","initialBlock","getMiningVaultContractAddress","pools","getSlpContractAddress","getSlpContractAddressConfig","getClp2ContractAddress","getClp2ContractAddressConfig","getClpContractAddress","getClpContractAddressConfig","getLpContractAddress","getLpContractAddressConfig","type","getDeriContractAddress","getDeriContractAddressConfig","deriAddress","Deri","wormholeAddress","Wormhole","getOracleInfo","addSymbolParam","getOracleUrl","retry","fetch","mode","cache","ok","json","getBTCUSDPrice","responseJson","price","getChainProviderUrlsConfig","format","bigNumber","toFormat","replaceAll","chainIds","getChainIds","ChainProviderUrls","provider_urls","version","getMiningVaultRouterContractAddress","filteredConfig","MiningVaultRouter","chainBlockNumberList","accum","calculateEntryPrice","volume","cost","multiplier","eq","calculateLiquidationPrice","margin","dynamicCost","minMaintenanceMarginRatio","tmp","minus","gt","plus","isOrderValid","marginHeld","liquidity","liquidityUsed","minMargin","success","error","calculateFundingRate","tradersNetVolume","fundingRateCoefficient","validateArgs","processFundingRate","fundingRate","annualBlockCount","calculateFundingFee","dynamicEquity","cumulativeFundingRate","lastCumulativeFundingRate","lastUpdatedBlockNumber","calculateBTokenDynamicEquities","bTokens","discount","pnl","isBToken0RatioValid","bTokenId","amount","bToken0Ratio","totalDynamicEquity","lt","isPoolMarginRatioValid","userLiquidity","symbols","poolMarginRatio","totalCost","s","tradersNetCost","abs","calculateMaxRemovableLiquidity","restLiquidity","minPoolMarginRatio","getLiquidityInfo","accountAddress","getPoolConfig2","perpetualPool","bTokenIdList","getPoolBTokenIdList","symbolIdList","getPoolSymbolIdList","getParameters","getBToken","getAsset","parameterInfo","bTokenInfo","lTokenAsset","getSymbol","totalPnl","poolLiquidity","lastCumulativePnl","maxRemovableShares","approximatePnl","cumulativePnl","shares","getPoolLiquidity","db","databaseFactory","getValues","catch","getPoolInfoApy","apy","volume1h","volume24h","addLiquidity","routerAddress","router","perpetualPoolRouter","minBToken0Ratio","validation","tx","transaction","removeLiquidity","isMaximum","priceCache","_prices","symbolId","split","set","val","parseFloat","timestamp","fundingRateCache","resourceMap","contractAddress","resource","getSpecification","symbolInfo","feeRatio","minInitialMarginRatio","minLiquidationReward","maxLiquidationReward","liquidationCutRatio","protocolFeeCollectRatio","bSymbol","getPositionInfo","symbolConfigList","getPoolSymbolList","map","symbolList","getLastUpdatedBlockNumber","getLatestBlockNumber","getPosition","getMargins","getPositions","getOraclePrice","positionInfo","margins","positions","latestPrice","symbolPrices","marginHeldBySymbol","unrealizedPnl","unrealizedPnlList","fundingFee","averageEntryPrice","liquidationPrice","getWalletBalance","balanceOf","balance","isUnlocked","getEstimatedFee","_getFundingRate","getEstimatedMargin","leverage","getFundingRateCache","promiseList","bTokenInfoList","fundingRatePerBlock","liquidityUsedInAmount","getFundingRate","fundingRate0","getEstimatedFundingRate","newNetVolume","fundingRate1","getLiquidityUsed","liquidityUsed0","getEstimatedLiquidityUsed","liquidityUsed1","getPoolBTokensBySymbolId","bTokenList","getPoolBTokenList","resultList","walletBalance","availableBalance","fetchJson","resp","processTradeEvent","info","txHash","tradeVolume","_getTimeStamp","timeStamp","direction","time","transactionFee","_calculateFee","notional","transactionHash","getTradeHistoryOnline","fromBlock","_getBlockInfo","toBlock","filters","owner","_getPastEvents","number","events","result","returnValues","item","unshift","getTradeHistory","tradeHistory","tradeFromBlock","data","tradeHistoryBlock","Array","isArray","trim","tradeHistoryOnline","concat","unlock","depositMargin","addMargin","withdrawMargin","removeMargin","tradeWithMargin","newVolume","orderValidation","trade","closePosition","negated","setBroker","brokerAddress","normalizeAddress","brokerManagerAddress","connectWallet","handleChainChanged","handleAccountChanged","request","method","accounts","account","on","location","reload","getUserWalletBalance","walletAddress","getBalance","fromWei","getLpLiquidityInfo","getSlpLiquidityInfo","getClpLiquidityInfo","getClp2LiquidityInfo","addLpLiquidity","addSlpLiquidity","addClpLiquidity","addClp2Liquidity","removeLpLiquidity","removeSlpLiquidity","removeClpLiquidity","removeClp2Liquidity","isLpUnlocked","isSlpUnlocked","isClpUnlocked","isClp2Unlocked","unlockLp","unlockSlp","unlockClp","unlockClp2","getLpWalletBalance","getSlpWalletBalance","getClpWalletBalance","getClp2WalletBalance","Config","makeObservable","this","observable","setAll","action","current","configs","isV2","total","cur","getContractAddressConfig2","require","getPoolConfigListV2","getPoolConfigList","getLiquidityInfo2","getLiquidityInfoV2","getPoolLiquidity2","getPoolLiquidityV2","getPoolInfoApy2","getPoolInfoApyV2","addLiquidity2","addLiquidityV2","removeLiquidity2","removeLiquidityV2","getSpecification2","getSpecificationV2","getPositionInfo2","getPositionInfoV2","getWalletBalance2","getWalletBalanceV2","isDeriUnlocked","isUnlocked2","isUnlockedV2","getEstimatedFee2","getEstimatedFeeV2","getFundingRate2","getFundingRateV2","getEstimatedFundingRate2","getEstimatedFundingRateV2","getLiquidityUsed2","getLiquidityUsedV2","getEstimatedLiquidityUsed2","getEstimatedLiquidityUsedV2","unlockDeri","unlock2","unlockV2","depositMargin2","depositMarginV2","withdrawMargin2","withdrawMarginV2","tradeWithMargin2","tradeWithMarginV2","closePosition2","closePositionV2","getTradeHistory2","getTradeHistoryV2","getPrice","calculateLiquidityUsed","calculateShareValue","lTokenTotalSupply","calculateMaxRemovableShares","lTokenBalance","shareValue","removable","calculateMarginHeld","calculatePnl","calculateMaxWithdrawMargin","held","poolMaxVolume","message","pPool","maxWithdrawMargin","_transactPool","totalSupply","getStateValues","mintDToken","getUserInfoAll","userInfo","deadline","nonce","v","r","valid","miningVaultAddress","miningVault","miningVaultPoolFactory","freeze","toChainId","wormhole","wormholeFactory","mintDeri","databaseWormhole","databaseWormholeFactory","signature","fromChainId","fromWormhole","fromNonce","deri","deriFactory","mintAirdrop","getUserInfoAllForAirDrop","v1","r1","s1","v2","r2","s2","miningVaultRouter","miningVaultRouterFactory","mint","getUserInfo","userAddress","getUserInfoHarvest","harvestLp","harvestTrade","lp","getUserInfoTotal","userInfoHarvest","userInfoTotal","assign","getLpPoolInfoApy","apy2","getUserInfoInPool","databaseAirdropFactory","baseToken","processLiquidateEvent","national","getLiquidateHistoryOnline","getHttpBase","fetchRestApi","path","getFundingRateCache2","liquidateFromBlock","liquidateHistoryBlock","liquidateHistoryOnline","wsOnPromise","ws","event","resolve","JSON","parse","sendTradeTxToWorkerQuene","methodCall","wsInstance","getOrSet","send","res2","addSlpLiquidity2","removeSlpLiquidity2","addClpLiquidity2","removeClpLiquidity2","addClp2Liquidity2","removeClp2Liquidity2","_accountAddress","_price","_interval","_update","update","self","setInterval","clear","clearInterval","PerpetualPoolParametersCache","_parameters","_ws","io","transports","id","Version","makeAutoObservable","setCurrent","isV1","computed","formatAddress","substr","formatBalance","eqInNumber","str1","str2","isLP","isSushiLP","isCakeLP","sessionStorageKey","storeConfig","sessionStorage","setItem","stringify","getConfigFromStore","getItem","storeChain","chainInfo","storeLocale","locale","restoreLocale","addParam","param","urlString","href","URL","searchParams","has","append","hasParam","getParam","getFormatSymbol","curChain","code","toUpperCase","parameters","getUserWormholeSignature","getDeriBalance","webpackContext","req","webpackContextResolve","__webpack_require__","o","e","module","exports","MAX_GAS_AMOUNT","ContractBase","contractAbi","contract","Contract","_init","methods","call","gas","estimateGas","from","_transactionReceipt","reject","getTransactionReceipt","receipt","setTimeout","status","errorMessage","_estimatedGas","txRaw","to","encodeABI","params","_getTransactionReceipt","perpetualPoolAbi","perpetualPoolRouterAbi","bTokenAbi","lTokenAbi","pTokenAbi","wooOracleAbi","chainlinkOracleAbi","wrappedOracleAbi","brokerManagerAbi","bTokenCount","symbolCount","protocolFeeCollector","protocolFeeAccrued","getLengths","getAddresses","_call","decimals0","swapperAddress","oracleAddress","decimals","getBlock","getStorageAt","eventName","getPastEvents","es","_transact","MAX_INT256","priceInfos","_balanceOf","allowance","MAX_UINT256","processAsset","processPosition","answer","DesktopApp","MobileApp","inject","observer","intl","isMobile","Wallet","detail","supportWeb3","isConnected","approve","approved","connect","loadWalletBalance","wallet","supported","setDetail","supportV2","supportV1","supportAllVersion","supportChain","isApproved","Oracle","timeType","kData","paused","listeners","already","setIndex","WebSocket","withCredentials","emit","initWebSocket","obj","low","high","open","close","time_type","unsubscribeBars","setSymbol","setTimeType","listener","callback","history","el","setPause","Position","spec","mockPositionInfo","position","interval","load","setInfo","History","forEach","lang","page","toLowerCase","test","pageName","setLocale","dict","localeLabel","language","prefix","supportedCatalog","Trading","slideIncrementMargin","userSelectedDirection","setWallet","setConfigs","setConfig","setContract","setPosition","setVolume","setUserSelectedDirection","setSupportChain","setFundingRate","setHistory","setSlideMargin","fundingRateTip","volumeDisplay","isNegative","isPositive","configInfo","contractInfo","historyInfo","defaultConfig","getDefaultConfig","find","loadByConfig","changed","pause","store","resume","symbolChanged","addListener","loadFundingRate","fromStore","getFromStore","pos","syncFundingRate","setPaused","support","currentSymbolMarginHeld","otherMarginHeld","incrementMarginHeld","totalMarginHeld","dynBalance","available","exchanged","multipliedBy","totalContractValue","Intl","trading","ReactDOM","render","StrictMode","getElementById","flat","expendPoolConfig","getFilteredPoolConfigList","poolConfigList","check","getPoolConfig","_getPoolConfig","broker","slpPool","slpPoolFactory","getLiquidity","bTokenBalance","clp2Pool","clp2PoolFactory","clpPool","clpPoolFactory","processConfig","jsonConfig","validateObjectKeyExist","validateIsArray","prop","getJsonConfig","isProvider","POOL_ABI","defaultValue","cumuFundingRate","cumuFundingRateBlock","minAddLiquidity","redemptionFeeRatio","priceDelayAllowance","signed","args1","args2","CONTRACT_ABI","BTokenContract","_balance","PTokenContract","lastCumuFundingRate","lastUpdateTimestamp","LTokenContract","DatabaseBaseContract","updateProviderUrl","DB_CONTRACT_ABI","DatabaseContract","keyArray","DatabaseWormholeContract","DatabaseAirdropContract","MiningVaultPool","SlpPool","ClpPool","Clp2Pool","DeriContract","useProvider","WormholeContract","toWormholeAddress","databaseInstanceMap","database","perpetualPoolInstanceMap","bTokenInstanceMap","pTokenInstanceMap","lTokenInstanceMap","mVaultInstanceMap","mVault","slpPoolInstanceMap","clpPoolInstanceMap","clp2PoolInstanceMap","deriInstanceMap","wormholeInstanceMap","every","keyList","valName","_deriEnv"],"mappings":"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","file":"static/js/main.b6967345.chunk.js","sourcesContent":["import { getConfig } from './config';\n\nexport const getOracleConfigList = () => {\n  const config = getConfig()\n  return config.oracle\n};\n\nexport const getOracleConfig = (chainId, symbol) => {\n  const filteredByChainId = getOracleConfigList().filter((c) =>\n    symbol\n      ? c.chainId === chainId && c.symbol === symbol\n      : c.chainId === chainId\n  );\n  if (filteredByChainId.length > 0) {\n    if (symbol) {\n      return filteredByChainId[0];\n    } else {\n      return filteredByChainId;\n    }\n  }\n  throw new Error(`getOracleConfig(): invalid chainId(${chainId}) or symbol(${symbol}).`);\n};\n","import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\n\n// == bg\nBigNumber.config({\n  DECIMAL_PLACES: 18,\n  ROUNDING_MODE: BigNumber.ROUND_DOWN,\n  EXPONENTIAL_AT: 256,\n});\n\nexport const bg = (value, base = 0) => {\n  if (base === 0) {\n    return BigNumber(value);\n  }\n  if (base > 0) {\n    return BigNumber(value).times(BigNumber(`1${'0'.repeat(base)}`));\n  }\n  return BigNumber(value).div(BigNumber(`1${'0'.repeat(-base)}`));\n};\n\nexport const max = (value1, value2) => {\n  if (value1.gte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\nexport const min = (value1, value2) => {\n  if (value1.lte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\nexport const fromWei = (value, unit='ether') => Web3.utils.fromWei(value, unit)\n\nexport const toWei = (value, unit='ether') => Web3.utils.toWei(value, unit)\n\nexport const toNatural = (value, num = 0) => BigNumber(value).toFixed(num).toString();\n\nexport const toHex = (value) => Web3.utils.toHex(value);\n\nexport const toChecksumAddress = (value) => Web3.utils.toChecksumAddress(value);\n\nexport const hexToString = (value) => Web3.utils.hexToUtf8(value);\n\nexport const hexToNumber = (value) => Web3.utils.hexToNumber(value);\n\nexport const hexToNumberString = (value) => Web3.utils.hexToNumberString(value);\n\nexport const hexToDeri = (value) => bg(hexToNumberString(value));\n\nexport const hexToNatural = (value) => bg(hexToNumberString(value), -18);\n\nexport const deriToNatural = (value) => bg(value, -18);\n\nexport const naturalToDeri = (value) => bg(value, 18).toFixed(0);\n\n// == convert\nexport const numberToHex = (value) => Web3.utils.numberToHex(value);\n\n\n// == utils\nexport const isBrowser = () => typeof window !== 'undefined' && typeof window.document !== 'undefined'\nexport const isNodejs = () => typeof process !== 'undefined' && process.versions != null && process.versions.node != null\nexport const isJsDom = () => typeof window !== 'undefined' && navigator.userAgent.includes('jsdom')\n","import Web3 from 'web3';\nimport { getChainProviderUrl } from '../utils';\n\nexport const metaMaskWeb3 = (function () {\n  let web3Instance = null;\n  return () => {\n    if (web3Instance !== null) {\n      return web3Instance;\n    }\n    let web3;\n    if (typeof window.ethereum !== undefined) {\n      web3 = new Web3(window.ethereum);\n    } else {\n      // console.log(\"Please install MetaMask first\")\n      throw new Error('Please install MetaMask first');\n    }\n    web3Instance = web3;\n    return web3;\n  };\n})();\n\nexport const web3Factory = (function () {\n  const web3InstanceMap = {};\n  return async(chainId) => {\n    if (Object.keys(web3InstanceMap).includes(chainId)) {\n      return web3InstanceMap[chainId];\n    }\n    if (['1', '3', '42'].includes(chainId)) {\n      console.log(\n        `==== web3Factory(${chainId}), please caution the access limits ===`\n      );\n    }\n    const providerUrl = await getChainProviderUrl(chainId);\n    const web3 = new Web3(new Web3.providers.HttpProvider(providerUrl));\n    web3InstanceMap[chainId] = web3;\n    return web3;\n  };\n})();\n","import { getConfig } from './config';\n\nexport const getBrokerConfigList = () => {\n  const config = getConfig()\n  return config.brokerManager\n};\n\nexport const getBrokerConfig = (chainId) => {\n  const filteredByChainId = getBrokerConfigList().filter((c) =>c.chainId === chainId);\n  if (filteredByChainId.length > 0) {\n    return filteredByChainId[0];\n  }\n  throw new Error(`getBrokerConfig(): invalid chainId(${chainId}).`);\n};\n","export const getDBProviderUrlsConfig = () => [\n  //'https://data-seed-prebsc-1-s1.binance.org:8545/',\n  'https://data-seed-prebsc-1-s2.binance.org:8545/',\n  'https://data-seed-prebsc-1-s3.binance.org:8545/',\n  'https://data-seed-prebsc-2-s1.binance.org:8545/',\n  'https://data-seed-prebsc-2-s2.binance.org:8545/',\n  'https://data-seed-prebsc-2-s3.binance.org:8545/',\n];\n\nexport const getDBAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0x824B6238EdCbaCCAF83C3F60C0cEB38bEb7C9e89';\n  }\n  // for test\n  return '0x7C1267188379f57d92e640E519151229E1eA5565';\n};\n\nexport const getDBWormholeAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0xd8137F05c1F432A80525053c473d0e286c4F46f0';\n  }\n  // for test\n  return '0x3c9118C7f9f4ef0Ab5333cD710922dBCCC2d870d';\n};\n\nexport const getDBAirdropAddressConfig = (env = 'dev', useProductionDB) => {\n  if ((env === 'prod' || env === 'production') && useProductionDB) {\n    // for production\n    return '0x35b2650eFb799DF4696b292D11b4770a0fFaa7c7';\n  }\n  // for test\n  return '0x7C1267188379f57d92e640E519151229E1eA5565';\n};\n","import Web3 from 'web3';\n// == func\n// const np = () => {}\n// const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms))\n\nexport const fetchWithTimeout = (url, options = {}) => {\n  const { timeout = 1200, ...fetchOptions } = options\n\n  return Promise.race([\n    fetch(url, fetchOptions),\n    new Promise((resolve) => {\n      setTimeout(() => {\n        // reject(\n        //   new Error(\n        //     `Request for ${url} timed out after ${timeout} ms`,\n        //   ),\n        // )\n        resolve({timeout:true})\n      }, timeout)\n    }),\n  ])\n}\n\nexport const checkHttpServerIsAlive = async (url) => {\n  try {\n    const response = await fetch(url);\n    if (response.ok) {\n      return true;\n    }\n  } catch (err) {\n    if (!err.toString().includes('FetchError')) {\n      console.log(err);\n    }\n  }\n  return false;\n};\n\nconst shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n};\n\nexport const getAliveHttpServer = async (urls = []) => {\n  urls = shuffleArray(urls)\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    //console.log(url)\n    if (await checkHttpServerIsAlive(url)) {\n      return url;\n    }\n  }\n  throw new Error(`getAliveHttpServer(): No alive http server in ${urls}`);\n};\n\nconst getBlockNumber = async (url) => {\n  let res = { url: url, blockNumber: -1, duration: Number.MAX_SAFE_INTEGER,};\n  try {\n    const web3 = new Web3(new Web3.providers.HttpProvider(url))\n    const startTime = Date.now()\n    res.blockNumber = await web3.eth.getBlockNumber()\n    res.duration = Date.now() - startTime\n  } catch (err) {\n    console.log(`getBlockNumber(${url}) error: ${err}`)\n  }\n  return res\n};\n\nexport const getLatestRPCServer = async (urls = []) => {\n  urls = shuffleArray(urls)\n  let promises = []\n  for (let i = 0; i < urls.length; i++) {\n    promises.push(getBlockNumber(urls[i]));\n  }\n  let blockNumbers = await Promise.all(promises)\n  blockNumbers = blockNumbers.sort((a, b) => a.duration - b.duration)\n  // console.log('blockNumbers',  blockNumbers)\n  const latestBlockNumber = blockNumbers.reduce((a, b) => b.blockNumber !== -1 ? a > b.blockNumber ? a : b.blockNumber : a, 0)\n  const index = blockNumbers.findIndex((b) => b.blockNumber === latestBlockNumber);\n  const res = blockNumbers[index].url\n  // console.log(res)\n  if (res.startsWith('http')) {\n    return res\n  } else {\n    throw new Error(`getLatestRPCServer(): no alive RPC server in ${urls}`)\n  }\n};","import {\n  getChainProviderUrls,\n  getDailyBlockNumberConfig,\n} from '../config/chain';\nimport { normalizeChainId } from './validate';\nimport { getLatestRPCServer } from './network';\n\nexport const getChainProviderUrl = async (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const urls = getChainProviderUrls(chainId);\n  if (urls.length > 0) {\n   const url =  await getLatestRPCServer(urls);\n   // console.log('url', url)\n   return url\n  } else {\n    throw new Error(\n      `Cannot find the chain provider url with chainId: ${chainId}`\n    );\n  }\n};\nexport const getDailyBlockNumber = (chainId) => {\n  const blockNumbers = getDailyBlockNumberConfig();\n  if (blockNumbers[chainId]) {\n    return parseInt(blockNumbers[chainId]);\n  } else {\n    throw new Error(`Invalid annual block number with chainId: ${chainId}`);\n  }\n};\n","import React from 'react'\nimport Loadable from 'react-loadable'\nimport NProgress from 'nprogress'\nimport 'nprogress/nprogress.css'\n\nclass LoadingPage extends React.Component {\n  //类似github页面加载的那个加载条\n  componentWillMount(){\n    NProgress.start()\n  }\n  componentWillUnmount(){\n    NProgress.done()\n  }\n  render () {\n    return (\n      <div/>\n    )\n  }\n}\n\nconst LoadableComponent = (component) => {\n  return Loadable({\n    loader: component,\n    loading: ()=><LoadingPage/>\n  })\n}\n\nexport default LoadableComponent","import Web3 from 'web3';\nimport {\n  PerpetualPool,\n  PerpetualPoolRouter,\n  BToken,\n  LToken,\n  PToken,\n  WooOracle,\n  ChainlinkOracle,\n  WrappedOracle,\n  BrokerManager,\n} from './contract';\nimport { getChainProviderUrl } from './utils/chain';\n\nconst factory = (klass) => {\n  let instances = {}\n  return (chainId, address) => {\n    const key = address\n    if (Object.keys(instances).includes(key)) {\n      return instances[key];\n    } else {\n      instances[key] = new klass(chainId, address);\n      return instances[key];\n    }\n  }\n}\n\nexport const metaMaskWeb3 = (function () {\n  let web3Instance = null;\n  return () => {\n    if (web3Instance !== null) {\n      return web3Instance;\n    }\n    if (typeof window.ethereum !== undefined) {\n      web3Instance = new Web3(window.ethereum);\n      return web3Instance;\n    } else {\n      // console.log(\"Please install MetaMask first\")\n      throw new Error('Please install MetaMask first');\n    }\n  };\n})();\n\nexport const web3Factory = (function () {\n  const web3InstanceMap = {};\n  return {\n    async get(chainId) {\n      if (Object.keys(web3InstanceMap).includes(chainId)) {\n        return web3InstanceMap[chainId];\n      }\n      if (['1', '3', '42'].includes(chainId)) {\n        console.log(\n          `==== web3Factory(${chainId}), please caution the access limits ===`\n        );\n      }\n      const providerUrl = await getChainProviderUrl(chainId);\n      web3InstanceMap[chainId] = new Web3(\n        new Web3.providers.HttpProvider(providerUrl)\n      );\n      return web3InstanceMap[chainId];\n    },\n  };\n})();\n\nexport const perpetualPoolFactory = factory(PerpetualPool)\n\nexport const perpetualPoolRouterFactory = factory(PerpetualPoolRouter)\n\nexport const bTokenFactory = factory(BToken)\n\nexport const lTokenFactory = factory(LToken)\n\nexport const pTokenFactory = factory(PToken)\n\nexport const oracleFactory = (function () {\n  const instanceMap = {};\n  return (chainId, address, symbol, decimal) => {\n    const key = address;\n    if (Object.keys(instanceMap).includes(key)) {\n      return instanceMap[key];\n    } else {\n      if (['80001'].includes(chainId)) {\n        instanceMap[key] = new ChainlinkOracle(\n          chainId,\n          address,\n          symbol,\n          decimal\n        );\n      } else if (['137'].includes(chainId)) {\n        instanceMap[key] = new WrappedOracle(chainId, address, symbol, decimal);\n      } else {\n        instanceMap[key] = new WooOracle(chainId, address, symbol, decimal);\n      }\n      return instanceMap[key];\n    }\n  };\n})();\n\nexport const brokerManagerFactory = factory(BrokerManager);","/**\n * Get REST server config\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {string} server url\n */\nexport const getRestServerConfig = (env = 'dev') => {\n  if (env === 'prod' || env === 'production') {\n    // for production\n    return (process && process.env && process.env.REACT_APP_REST_SERVER_URL) || 'https://api.deri.finance';\n    //return 'https://alphaapi.deri.finance';\n  } else {\n    // for test\n    return 'https://testnetapi.deri.finance';\n    //return 'http://localhost:8082';\n  }\n};\n\nexport const getRedisWorkerQueneConfig = (env = \"dev\") => {\n  if (env === \"prod\") {\n    return ['trade_tx_quene', 'trade_worker_group']\n  } else {\n    return ['trade_tx_quene_dev', 'trade_worker_group_dev']\n  }\n};\n","import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\nimport {\n  DeriEnv,\n  getChainProviderUrlsConfig,\n  getContractAddressConfig,\n  getSlpContractAddressConfig,\n  getClpContractAddressConfig,\n  getClp2ContractAddressConfig,\n  getLpContractAddressConfig,\n  getDailyBlockNumberConfig,\n  getDeriContractAddressConfig,\n  getChainIds,\n} from './config';\n\n/** @module utils */\n\nBigNumber.config({\n  DECIMAL_PLACES: 18,\n  ROUNDING_MODE: BigNumber.ROUND_DOWN,\n  EXPONENTIAL_AT: 256,\n});\n\nexport { BigNumber };\n\n/**\n * Change the value to BigNumber type\n * @func\n * @param {string|number} value - the number that need to changed to BigNumber type\n * @param {string} base - base of the number\n * @returns {BigNumber}\n */\nexport const bg = (value, base = 0) => {\n  if (base === 0) {\n    return BigNumber(value);\n  }\n  if (base > 0) {\n    return BigNumber(value).times(BigNumber(`1${'0'.repeat(base)}`));\n  }\n  return BigNumber(value).div(BigNumber(`1${'0'.repeat(-base)}`));\n};\n\n/**\n * Get the max value\n * @func\n * @param {BigNumber} value1\n * @param {BigNumber} value2\n * @returns {BigNumber}\n */\nexport const max = (value1, value2) => {\n  if (value1.gte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\n/**\n * Get the min value\n * @func\n * @param {BigNumber} value1\n * @param {BigNumber} value2\n * @returns {BigNumber}\n */\nexport const min = (value1, value2) => {\n  if (value1.lte(value2)) {\n    return value1;\n  }\n  return value2;\n};\n\n/**\n * Convert the number to a fixed precision\n * @func\n * @param {string} value - the number that need to convert\n * @param {number} num - the number for method toFixed()\n * @returns {string}\n */\nexport const toNatural = (value, num = 0) =>\n  BigNumber(value).toFixed(num).toString();\n\nexport const toHex = (value) => Web3.utils.toHex(value);\n\nexport const toChecksumAddress = (value) => Web3.utils.toChecksumAddress(value);\n\nexport const hexToString = (value) => Web3.utils.hexToUtf8(value);\n\nexport const hexToNumber = (value) => Web3.utils.hexToNumber(value);\n\nexport const hexToNumberString = (value) => Web3.utils.hexToNumberString(value);\n\nexport const hexToDeri = (value) => bg(hexToNumberString(value));\n\nexport const hexToNatural = (value) => bg(hexToNumberString(value), -18);\n\nexport const hexToNaturalWithPercentage = (value) =>\n  `${bg(hexToNumberString(value), -18)\n    .sd(4)\n    .times(100)\n    .toFixed(4)\n    .toString()}%`;\n\nexport const naturalToDeri = (value) => bg(value, 18).toFixed(0);\n\nexport const naturalWithPercentage = (value) =>\n  `${bg(value).sd(4).times(100).toFixed(4).toString()}%`;\n\nexport const deriToNatural = (value) => bg(value, -18);\n\nexport const deriToNaturalWithPercentage = (value) =>\n  `${bg(value, -18).sd(4).times(100).toFixed(4).toString()}%`;\n\nexport const deriToString = (value) => bg(value).toString();\n\nexport const deriToBool = (value) => {\n  if (bg(value).toNumber() === 1) {\n    return true;\n  }\n  return false;\n};\n\nexport const hasInvalidArgsValue = (...args) =>\n  args.some(\n    (i) =>\n      // console.log(bg(i))\n      isNaN(i.toString()) || i.toString() === '0'\n  );\n\n// language\nexport const isObject = (obj) => typeof obj === 'object';\n\n//const np = () => {}\n//const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms))\n\n// http\nexport const checkHttpServerIsAlive = async (url) => {\n  try {\n    //const response = await fetch(url);\n    const response = await fetch(url);\n    if (response.ok) {\n      return true;\n    }\n  } catch (err) {\n    //console.log(err);\n  }\n  return false;\n};\n\nconst shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n};\n\nexport const getAliveHttpServer = async (urls = []) => {\n  urls = shuffleArray(urls)\n  for (let i = 0; i < urls.length; i++) {\n    const url = urls[i];\n    if (await checkHttpServerIsAlive(url)) {\n      //console.log(url)\n      return url;\n    }\n  }\n  throw new Error('No alive http server in urls', urls);\n};\n\nconst getBlockNumber = async (url) => {\n  let res = { url: url, blockNumber: -1, duration: Number.MAX_SAFE_INTEGER,};\n  try {\n    const web3 = new Web3(new Web3.providers.HttpProvider(url))\n    const startTime = Date.now()\n    res.blockNumber = await web3.eth.getBlockNumber()\n    res.duration = Date.now() - startTime\n  } catch (err) {\n    console.log(`getBlockNumber(${url}) error: ${err}`)\n  }\n  return res\n};\n\nexport const getLatestRPCServer = async (urls = []) => {\n  urls = shuffleArray(urls)\n  let promises = []\n  for (let i = 0; i < urls.length; i++) {\n    promises.push(getBlockNumber(urls[i]));\n  }\n  let blockNumbers = await Promise.all(promises)\n  blockNumbers = blockNumbers.sort((a, b) => a.duration - b.duration)\n  //console.log('blockNumbers',  blockNumbers)\n  const latestBlockNumber = blockNumbers.reduce((a, b) => b.blockNumber !== -1 ? a > b.blockNumber ? a : b.blockNumber : a, 0)\n  const index = blockNumbers.findIndex((b) => b.blockNumber === latestBlockNumber);\n  const res = blockNumbers[index].url\n  //console.log(res)\n  if (res.startsWith('http')) {\n    return res\n  } else {\n    throw new Error(`getLatestRPCServer(): cannot find alive RPC server in ${urls}`)\n  }\n};\n\n// ethereum chain\nexport const MAX_VALUE =\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\nexport const getNetworkName = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let poolNetwork;\n  switch (chainId) {\n    case '1':\n      poolNetwork = 'ethereum';\n      break;\n    case '56':\n      poolNetwork = 'bsc';\n      break;\n    case '128':\n      poolNetwork = 'heco';\n      break;\n    case '3':\n      poolNetwork = 'ropsten';\n      break;\n    case '42':\n      poolNetwork = 'kovan';\n      break;\n    case '97':\n      poolNetwork = 'bsctestnet';\n      break;\n    case '256':\n      poolNetwork = 'hecotestnet';\n      break;\n    case '137':\n      poolNetwork = 'matic';\n      break;\n    case '80001':\n      poolNetwork = 'mumbai';\n      break;\n    default:\n      throw new Error(`The networkId is not valid for chainId ${chainId}`);\n  }\n  return poolNetwork;\n};\n\nexport const getWalletBalanceUnit = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let index;\n  const unitNetworkIdsMap = {\n    ETH: ['1', '3', '42'],\n    BNB: ['56', '97'],\n    HT: ['128', '256'],\n  };\n  const networkIdsArray = Object.values(unitNetworkIdsMap);\n  for (let i = 0; i < networkIdsArray.length; i++) {\n    if (networkIdsArray[i].includes(chainId)) {\n      index = i;\n      break;\n    }\n  }\n  if (index !== undefined) {\n    return Object.keys(unitNetworkIdsMap)[index];\n  }\n  if (chainId === '') {\n    return '';\n  }\n  throw new Error('Invalid Network:', chainId);\n};\n\nexport const getPoolBaseSymbolList = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let result = [];\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  for (let i = 0; i < pools.length; i++) {\n    const { bTokenSymbol, symbol } = pools[i];\n    if (bTokenSymbol && symbol) {\n      result.push(`${symbol}/${bTokenSymbol}`);\n    }\n  }\n  return result;\n};\n\nexport const getPoolBaseTokenAddressObject = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  let result = {};\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  for (let i = 0; i < pools.length; i++) {\n    const { bTokenSymbol, symbol, pool } = pools[i];\n    const key = `${symbol}/${bTokenSymbol}`;\n    if (bTokenSymbol && symbol) {\n      result[key] = pool;\n    }\n  }\n  return result;\n};\n\n// export const getPoolContractAddress = (chainId, bTokenSymbol) => {\n//   chainId = normalizeChainId(chainId);\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\n//     (c) => c.chainId === chainId\n//   );\n//   const pool = pools.filter((p) => p.bTokenSymbol === bTokenSymbol);\n//   if (pool.length > 0) {\n//     return [\n//       pool[0].pool,\n//       pool[0].bToken,\n//       pool[0].pToken,\n//       pool[0].lToken,\n//       pool[0].dToken,\n//       pool[0].MiningVault,\n//       pool[0].initialBlock,\n//     ];\n//   }\n//   console.log(\n//     `getPoolContractAddress(): contract address is not found: ${chainId} ${bTokenSymbol}`\n//   );\n//   return [];\n// };\n\n// get config by poolAddress\nexport const getPoolContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  // console.log('pool', pool)\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      pTokenAddress: pool[0].pToken,\n      lTokenAddress: pool[0].lToken,\n      dTokenAdress: pool[0].dToken,\n      MinningVaultAddress: pool[0].MiningVault,\n      bTokenSymbol: pool[0].bTokenSymbol,\n      symbol: pool[0].symbol,\n      unit: pool[0].unit,\n      initialBlock: pool[0].initialBlock,\n    };\n  }\n  // console.log(\n  //   `getPoolContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  // );\n  return [];\n};\n\nexport const getMiningVaultContractAddress = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  if (pools.length > 0) {\n    if (pools[0].MiningVault) {\n      return pools[0].MiningVault;\n    }\n  }\n};\n\n// export const getMiningVaultRouterContractAddress = (chainId) => {\n//   chainId = normalizeChainId(chainId);\n//   const pools = getContractAddressConfig(DeriEnv.get()).filter(\n//     (c) => c.chainId === chainId\n//   );\n//   if (pools.length > 0) {\n//     if (pools[0].MiningVaultRouter) {\n//       return pools[0].MiningVaultRouter;\n//     }\n//   }\n// };\n\nexport const getDailyBlockNumber = (chainId) => {\n  const blockNumbers = getDailyBlockNumberConfig();\n  if (blockNumbers[chainId]) {\n    return parseInt(blockNumbers[chainId]);\n  }\n  console.log(`cannot find the annual block number with chainId: ${chainId}`);\n};\n\nexport const getSlpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getSlpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      pTokenAddress: pool[0].pToken,\n      lTokenAddress: pool[0].lToken,\n      dTokenAdress: pool[0].dToken,\n      MinningVaultAddress: pool[0].MiningVault,\n    };\n  }\n  console.log(\n    `getSlpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getClp2ContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getClp2ContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      pTokenAddress: pool[0].pToken,\n      lTokenAddress: pool[0].lToken,\n      dTokenAdress: pool[0].dToken,\n      MinningVaultAddress: pool[0].MiningVault,\n    };\n  }\n  console.log(\n    `getClp2ContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getClpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getClpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      lTokenAddress: pool[0].lToken,\n    };\n  }\n  console.log(\n    `getClpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getLpContractAddress = (chainId, poolAddress) => {\n  chainId = normalizeChainId(chainId);\n  const pools = getLpContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  const pool = pools.filter((p) => p.pool === poolAddress);\n  if (pool.length > 0) {\n    return {\n      poolAddress: pool[0].pool,\n      bTokenAddress: pool[0].bToken,\n      lTokenAddress: pool[0].lToken,\n      type: pool[0].type,\n    };\n  }\n  console.log(\n    `getLpContractAddress(): contract address is not found: ${chainId} ${poolAddress}`\n  );\n  return {};\n};\n\nexport const getDeriContractAddress = (chainId) => {\n  chainId = normalizeChainId(chainId);\n  const pool = getDeriContractAddressConfig(DeriEnv.get()).filter(\n    (c) => c.chainId === chainId\n  );\n  if (pool.length > 0) {\n    return {\n      deriAddress: pool[0].Deri,\n      wormholeAddress: pool[0].Wormhole,\n      bTokenSymbol: pool[0].bTokenSymbol,\n    };\n  }\n  console.log(\n    `getDeriContractAddress(): contract address is not found: ${chainId}`\n  );\n  return {};\n};\n\nexport const getOracleUrl = (chainId, poolAddress) => {\n  const env = DeriEnv.get()\n  const { symbol } = getPoolContractAddress(chainId, poolAddress);\n  const addSymbolParam = (url, symbol='BTCUSD') => `${url}?symbol=${symbol}`;\n  if (env === 'prod' || env === 'production') {\n    // for production\n    if (symbol) {\n      return addSymbolParam('https://oracle4.deri.finance/price', symbol);\n    }\n    return 'https://oracle4.deri.finance/price';\n  } else {\n    if (symbol) {\n      return addSymbolParam('https://oracle2.deri.finance/price', symbol);\n    }\n    // for test\n    return 'https://oracle2.deri.finance/price';\n  }\n};\n\nexport const getOracleInfo = async (chainId, poolAddress) => {\n  let url = getOracleUrl(chainId, poolAddress);\n  //console.log('oracle url', url);\n  let retry = 2;\n  //let timeout = 1000;\n  let res;\n  while (retry > 0) {\n    res = await fetch(url, { mode: 'cors', cache: 'no-cache' });\n    //if (res && !res.timeout) {\n    if (res.ok) {\n      break;\n    }\n    //console.log('get oracle info timeout')\n    retry -= 1;\n    //timeout += 800;\n  }\n  if (retry === 0 && !res) {\n    throw new Error(`fetch oracle info error: exceed max retry(2).`);\n  }\n  return await res.json();\n};\n\nexport const getBTCUSDPrice = async (chainId, poolAddress) => {\n  const responseJson = await getOracleInfo(chainId, poolAddress);\n  let price = responseJson.price;\n  if (!price) {\n    price = '0';\n  }\n  return deriToNatural(responseJson.price).toString();\n};\nexport const getOraclePrice = getBTCUSDPrice;\n\nexport const getChainProviderUrl = async(chainId) => {\n  chainId = normalizeChainId(chainId);\n  const urls = getChainProviderUrlsConfig(chainId)\n  if (urls.length > 0) {\n    return await getLatestRPCServer(urls)\n  } else {\n    throw new Error(\n      `Cannot find the chain provider url with chainId: ${chainId}`\n    );\n  }\n};\n\nexport const format = (bigNumber) =>\n  bigNumber.toFormat().replaceAll(',', '').toString();\n\nexport const normalizeChainId = (chainId) => {\n  const chainIds = getChainIds()\n  let res = chainId ? chainId.toString() : chainId;\n  if (chainId && chainIds.includes(res)) {\n    return res;\n  } else {\n    throw new Error(`invalid chainId: ${chainId}`)\n  }\n};\n\nexport const normalizeAddress = (address) => {\n  if (address && typeof address === 'string' && address.startsWith('0x')) {\n    return Web3.utils.toChecksumAddress(address);\n  } else {\n    throw new Error(`invalid address: ${address}`)\n  }\n};","export const getChainIds = () => {\n  return ['1', '3', '56', '97', '128', '256', '137', '80001'];\n};\nexport const ChainProviderUrls = [\n  {\n    provider_urls: [\n      'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '1',\n  },\n  {\n    provider_urls: [\n      'https://bsc-dataseed.binance.org',\n      'https://bsc-dataseed1.defibit.io/',\n      'https://bsc-dataseed1.ninicoin.io/',\n    ],\n    chainId: '56',\n  },\n  {\n    provider_urls: ['https://http-mainnet.hecochain.com'],\n    chainId: '128',\n  },\n  {\n    provider_urls: [\n      'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '3',\n  },\n  {\n    provider_urls: [\n      'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n    ],\n    chainId: '42',\n  },\n  {\n    provider_urls: [\n      //'https://data-seed-prebsc-1-s1.binance.org:8545/',\n      'https://data-seed-prebsc-1-s2.binance.org:8545/',\n      'https://data-seed-prebsc-1-s3.binance.org:8545/',\n      'https://data-seed-prebsc-2-s1.binance.org:8545/',\n      'https://data-seed-prebsc-2-s2.binance.org:8545/',\n      'https://data-seed-prebsc-2-s3.binance.org:8545/',\n    ],\n    chainId: '97',\n  },\n  {\n    provider_urls: ['https://http-testnet.hecochain.com'],\n    chainId: '256',\n  },\n];\n\nexport const getChainProviderUrlsConfig = (chainId) => {\n  const chainProviderUrls = [\n    {\n      provider_urls: [\n        'https://mainnet.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '1',\n    },\n    {\n      provider_urls: [\n        'https://bsc-dataseed.binance.org',\n        'https://bsc-dataseed1.defibit.io/',\n        'https://bsc-dataseed1.ninicoin.io/',\n      ],\n      chainId: '56',\n    },\n    {\n      provider_urls: ['https://http-mainnet.hecochain.com'],\n      chainId: '128',\n    },\n    {\n      provider_urls: [\n        'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '3',\n    },\n    {\n      provider_urls: [\n        'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '42',\n    },\n    {\n      provider_urls: [\n        'https://data-seed-prebsc-1-s1.binance.org:8545/',\n        'https://data-seed-prebsc-1-s2.binance.org:8545/',\n        'https://data-seed-prebsc-1-s3.binance.org:8545/',\n        'https://data-seed-prebsc-2-s1.binance.org:8545/',\n        'https://data-seed-prebsc-2-s2.binance.org:8545/',\n        'https://data-seed-prebsc-2-s3.binance.org:8545/',\n      ],\n      chainId: '97',\n    },\n    {\n      provider_urls: ['https://http-testnet.hecochain.com'],\n      chainId: '256',\n    },\n  ];\n  \n  const res = chainProviderUrls.filter((i) => i.chainId  === chainId)\n  //console.log('res',res)\n  if (res.length > 0) {\n    return res[0].provider_urls\n  } else {\n    throw new Error(`getChainProviderUrlsConfig: no urls for chainId ${chainId}`)\n  }\n}\n","import { getChainIds } from './chain';\n\n/** @module config */\n\n/**\n * Get the contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].pToken - position token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].symbol - symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getContractAddressConfig = (env = 'dev') => {\n  // production environment\n  if (env === 'prod') {\n    // console.log('!!! production !!!')\n    return [\n      {\n        pool:   '0xAf081e1426f64e74117aD5F695D2A80482679DE5',\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n        pToken: '0x3c11c4990447F0AD575eBd74E8cD17bf61848A15',\n        lToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '7906919',\n        bTokenSymbol: 'BUSD',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '56',\n        version: 'v1',\n      },\n      {\n        pool:   '0x011346B81e5326904B5B76A11dECAf2c67eFFc23',\n        bToken: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\n        pToken: '0xaE6429b4CDDDFefDB6ac702183c836B4e62Da410',\n        lToken: '0xd8f78c47b0e0943B3Cb2cE1e1726472C4ddd2F98',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '6753399',\n        bTokenSymbol: 'BUSD',\n        symbol: 'COIN',\n        unit: 'COIN',\n        chainId: '56',\n        version: 'v1',\n      },\n      {\n        pool:   '0xD3f5E6D1a25dA1E64EDf7cb571f9fAD17FEb623c',\n        bToken: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\n        pToken: '0x29Be63E854727BB3Fef77eB107B8d1c33081f989',\n        lToken: '0x610b39F9ba0fF2167AEb646462473c011A431Cd7',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x6C8d3F31b2ad1AE997Afa20EAd88cb67E93C6E17',\n        initialBlock: '8005906',\n        bTokenSymbol: 'DERI',\n        symbol: 'iMEME',\n        unit: 'iMEME',\n        chainId: '56',\n        version: 'v1',\n      },\n      {\n        pool:   '0x23779AAc1e74a65F27B4840A8E41F767Ce993118',\n        bToken: '0xdAC17F958D2ee523a2206206994597C13D831ec7',\n        pToken: '0x9c6134F9e759C6812aaC102FC1a9f7cA5615fD33',\n        lToken: '0x43CA6D7129d7F490d5B91B4D14D7c877D15A92dA',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        initialBlock: '12548746',\n        bTokenSymbol: 'USDT',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '1',\n        version: 'v1',\n      },\n      {\n        pool:   '0x96a1F15676746b9339DBc185F277618359Ac6346',\n        bToken: '0x3449FC1Cd036255BA1EB19d65fF4BA2b8903A69a',\n        pToken: '0x15aD9b67cf54037127fD986Ca3bB775f9FC4ad05',\n        lToken: '0xeC27d4c53C2E29F1113A9667c0B19442df83c1f1',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        initialBlock: '12548827',\n        bTokenSymbol: 'BAC',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '1',\n        version: 'v1',\n      },\n      {\n        pool:   '0xBA7e183042c8796E26A5a2375927DE7B1AB99d97',\n        bToken: '0x0298c2b32eaE4da002a15f36fdf7615BEa3DA047',\n        pToken: '0x732Ba556B304fd74Cd14b74ab8762A7D9f26d476',\n        lToken: '0x90fE976Cbb48E0761A84DDA2974024377994a997',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0xF0bC8b772f26F8DeB46c1aebbEA7C8d502Abf3b8',\n        initialBlock: '5220431',\n        bTokenSymbol: 'HUSD',\n        symbol: 'BTCUSD',\n        unit: 'BTC',\n        chainId: '128',\n        version: 'v1',\n      },\n    ];\n  }\n  // develop environment\n  return [\n    {\n      pool: '0x372b640A00a0A6B73381e9363A39644a712cCc37',\n      bToken: '0x4038191eFb39Fe1d21a48E061F8F14cF4981A0aF',\n      pToken: '0xB9113758D771750e9E8ECb359A19689eC89AC1a5',\n      lToken: '0xC727a10Be4740441BE74960296097aF39D701980',\n      initialBlock: '9378545',\n      bTokenSymbol: 'BUSD',\n      symbol: 'BTCUSD',\n      unit: 'BTC',\n      chainId: '97',\n      version: 'v1',\n    },\n  ];\n};\n\n/**\n * Get the Slp contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].pToken - position token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].symbol - symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getSlpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool: '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        chainId: '1',\n        bTokenSymbol: 'DERI-USDT SLP',\n        symbol: '--',\n      },\n    ];\n  }\n  console.log('getSlpContractAddressConfig(): no config for dev environment');\n  return [];\n};\n\n/**\n * Get the Clp contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].pool - pool address\n * @returns {string} response[].bToken - base token address\n * @returns {string} response[].lToken - liquidity token address\n * @returns {string} response[].initialBlock - initial block of the pool\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getClpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool:   '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '6894880',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP',\n        symbol: '--',\n      },\n    ];\n  } else {\n    return [];\n  }\n};\nexport const getClp2ContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool:   '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '699498',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP SYRUP',\n        symbol: '--',\n      },\n    ];\n  } else {\n    return [];\n  }\n};\n\nexport const getLpContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        pool:   '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd',\n        bToken: '0xA3DfbF2933FF3d96177bde4928D0F5840eE55600',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        MiningVault: '0x7826Ef8Da65494EA21D64D8E6A76AB1BED042FD8',\n        chainId: '1',\n        bTokenSymbol: 'DERI-USDT SLP',\n        symbol: '--',\n        type: 'slp',\n      },\n      {\n        pool:   '0x4de2Ac273aD1BBe2F5C41f986d7b3cef8383Df98',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x83b31Abc899863B8Eb06952994580CE86414156E',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '6894880',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP',\n        symbol: '--',\n        type: 'clp',\n      },\n      {\n        pool:   '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n        bToken: '0xDc7188AC11e124B1fA650b73BA88Bf615Ef15256',\n        pToken: '0x0000000000000000000000000000000000000000',\n        lToken: '0x0000000000000000000000000000000000000000',\n        dToken: '0x0000000000000000000000000000000000000000',\n        MiningVault: '0x0000000000000000000000000000000000000000',\n        initialBlock: '699498',\n        chainId: '56',\n        bTokenSymbol: 'CAKE-LP SYRUP',\n        symbol: '--',\n        type: 'clp2',\n      },\n    ];\n  } else {\n    return [];\n  }\n};\n\nexport const getMiningVaultRouterContractAddress = (chainId) => {\n  const configs = [\n    {\n      MiningVaultRouter: '0x8d5613451Dc0592388f98d7Ab1ce5A732561936e',\n      chainId: '56',\n    },\n  ];\n  const filteredConfig = configs.filter((i) => i.chainId === chainId);\n  if (filteredConfig.length > 0) {\n    return filteredConfig[0].MiningVaultRouter;\n  } else {\n    throw new Error(\n      `getMiningVaultRouterAddressConfig: no address for chainId ${chainId}`\n    );\n  }\n};\n\n/**\n * Get the Deri contract address list based on the deri environment variable\n * @method\n * @param {string} env='dev' - Deri environment variable: 'prod' or 'dev'\n * @returns {Object[]} response\n * @returns {string} response[].Deri - deri address\n * @returns {string} response[].Wormhole - wormhole token address\n * @returns {string} response[].bTokenSymbol - base token symbol\n * @returns {string} response[].chainId - Id of the chain\n */\nexport const getDeriContractAddressConfig = (env = 'dev') => {\n  if (env === 'prod') {\n    return [\n      {\n        Deri: '0xA487bF43cF3b10dffc97A9A744cbB7036965d3b9',\n        Wormhole: '0x6874640cC849153Cb3402D193C33c416972159Ce',\n        bTokenSymbol: 'DERI',\n        chainId: '1',\n      },\n      {\n        Deri: '0xe60eaf5A997DFAe83739e035b005A33AfdCc6df5',\n        Wormhole: '0x15a5969060228031266c64274a54e02Fbd924AbF',\n        bTokenSymbol: 'DERI',\n        chainId: '56',\n      },\n      {\n        Deri: '0x2bdA3e331Cf735D9420e41567ab843441980C4B8',\n        Wormhole: '0x134A04497e9a0b1F8850fEaf87eD18ec348dDa46',\n        bTokenSymbol: 'DERI',\n        chainId: '128',\n      },\n    ];\n  }\n  return [\n    {\n      Deri: '0x88Fe79a3b6AC7EeF3d55B2e388fa18400590698B',\n      Wormhole: '0xcb28Fa7dFa1844Cdb47aD5f03484f6131293Fd2e',\n      bTokenSymbol: 'DERI',\n      chainId: '3',\n    },\n    {\n      Deri: '0x8dC0aA48bbc69BaCD2548c6b7adCDeF8DDbA50B2',\n      Wormhole: '0x9028e43114Df57C97c15355224E575DF1e244919',\n      bTokenSymbol: 'DERI',\n      chainId: '97',\n    },\n    {\n      Deri: '0x932458a637F8060AF747167656651b64d4c36620',\n      Wormhole: '0x629B0D3D32BE5ee5F7BF3845914d26446c04165d',\n      bTokenSymbol: 'DERI',\n      chainId: '256',\n    },\n  ];\n};\n\nexport const getDailyBlockNumberConfig = () => {\n  const chainBlockNumberList = [\n    '6486',\n    '6486',\n    '28759',\n    '28759',\n    '28798',\n    '28798',\n    '40405',\n    '40405',\n  ];\n  return getChainIds().reduce((accum, i, index) => {\n    accum[i] = chainBlockNumberList[index];\n    return accum;\n  }, {});\n};\n","import { bg, max } from '../utils';\n\nexport const calculateEntryPrice = (volume, cost, multiplier) =>\n  volume.eq(0) ? bg(0) : cost.div(volume).div(multiplier);\n\nexport const calculateMarginHeld = (\n  price,\n  volume,\n  multiplier,\n  minInitialMarginRatio\n) => {\n  return volume.abs().times(price).times(multiplier).times(minInitialMarginRatio)\n};\n\nexport const calculatePnl = (price, volume, multiplier, cost) => {\n  return volume.times(price).times(multiplier).minus(cost);\n}\n\n// export const calculateMaxWithdrawMargin = (\n//   price,\n//   volume,\n//   margin,\n//   cost,\n//   multiplier,\n//   minInitialMarginRatio\n// ) => {\n//   if (volume.eq(0)) {\n//     return margin;\n//   }\n//   const held = calculateMarginHeld(\n//     price,\n//     volume,\n//     multiplier,\n//     minInitialMarginRatio\n//   );\n//   const pnl = calculatePnl(price, volume, multiplier, cost);\n//   const withdrawable = max(margin.plus(pnl).minus(held.times(1.02)), bg(0));\n//   return withdrawable;\n// };\n\nexport const calculateLiquidationPrice = (\n  volume,\n  margin,\n  cost,\n  dynamicCost,\n  multiplier,\n  minMaintenanceMarginRatio\n) => {\n  const tmp = cost.minus(margin);\n  let res = volume.gt(0)\n    ? tmp.div(bg(1).minus(minMaintenanceMarginRatio)).minus(dynamicCost).div(volume).div(multiplier)\n    : tmp.div(bg(1).plus(minMaintenanceMarginRatio)).minus(dynamicCost).div(volume).div(multiplier);\n  res = max(res, bg(0));\n  return res;\n};\n\nexport const isOrderValid = (\n  //price,\n  margin,\n  marginHeld,\n  liquidity,\n  liquidityUsed,\n  // multiplier,\n  // minPoolMarginRatio,\n  // newVolume,\n) => {\n  const minMargin = marginHeld;\n  // const poolMaxVolume = liquidity.minus(liquidityUsed)\n  //   .div(minPoolMarginRatio)\n  //   .div(price)\n  //   .div(multiplier);\n  if (margin.gte(minMargin)) {\n    // if (\n    //   newVolume.lte(poolMaxVolume) &&\n    //   newVolume.gte(poolMaxVolume.negated())\n    // ) {\n    if (liquidity.minus(liquidityUsed).gte(0)) {\n      return { success: true };\n    }\n    return { success: false, error: 'Pool has insufficient liquidity' };\n  }\n  return { success: false, error: 'Trader has insufficient margin' };\n};\n","import { bg, getDailyBlockNumber, validateArgs } from '../utils';\n\nexport const calculateLiquidityUsed = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  poolMarginRatio\n) => {\n  if (\n    validateArgs(\n      tradersNetVolume,\n      price,\n      multiplier,\n      liquidity,\n      poolMarginRatio\n    )\n  ) {\n    return bg(tradersNetVolume)\n      .times(price)\n      .times(multiplier)\n      .times(poolMarginRatio)\n      .div(liquidity)\n      .abs();\n  } else {\n    const args = [\n      tradersNetVolume,\n      price,\n      multiplier,\n      liquidity,\n      poolMarginRatio,\n    ];\n    throw new Error(`calculateLiquidityUsed: invalid args: ${args}`);\n  }\n}\n\nexport const calculateFundingRate = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  fundingRateCoefficient\n) => {\n  if (\n    validateArgs(\n      tradersNetVolume,\n      price,\n      multiplier,\n      liquidity,\n      fundingRateCoefficient\n    )\n  ) {\n    return bg(liquidity).eq(0) ? bg(0) : bg(tradersNetVolume)\n      .times(price)\n      // .times(price)\n      // .times(multiplier)\n      .times(multiplier)\n      .times(fundingRateCoefficient)\n      .div(liquidity);\n  } else {\n    const args = [\n      tradersNetVolume,\n      price,\n      multiplier,\n      liquidity,\n      fundingRateCoefficient\n    ];\n    throw new Error(`calculateFundingRate: invalid args: ${args}`);\n  }\n};\n\nexport const processFundingRate = (chainId, fundingRate) => {\n  const annualBlockCount = getDailyBlockNumber(chainId);\n  //console.log(annualBlockCount);\n  return bg(fundingRate).times(annualBlockCount);\n};\n\nexport const calculateFundingFee = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  fundingRateCoefficient,\n  dynamicEquity,\n  cumulativeFundingRate,\n  lastCumulativeFundingRate,\n  lastUpdatedBlockNumber,\n  latestBlockNumber,\n  volume,\n) => {\n  if (bg(volume).eq(0)) {\n    return '0'\n  } else {\n    const args = [\n      tradersNetVolume,\n      price,\n      multiplier,\n      fundingRateCoefficient,\n      dynamicEquity,\n      cumulativeFundingRate,\n      lastCumulativeFundingRate,\n      lastUpdatedBlockNumber,\n      latestBlockNumber,\n      volume,\n    ];\n    if (\n      validateArgs(...args)\n    ) {\n      return bg(dynamicEquity).eq(0) ? bg(0) : bg(tradersNetVolume)\n        .times(price)\n        .times(multiplier)\n        .times(price)\n        .times(multiplier)\n        .times(fundingRateCoefficient)\n        .div(dynamicEquity)\n        .times(bg(latestBlockNumber).minus(lastUpdatedBlockNumber))\n        .plus(cumulativeFundingRate)\n        .minus(lastCumulativeFundingRate)\n        .times(volume)\n    } else {\n      console.log(`calculateFundingFee: invalid args: ${args}`);\n      return 'NaN'\n    }\n  }\n};","import { bg, max, min } from '../utils'\n\nexport const calculateBTokenDynamicEquities = (bTokens) => {\n  //const dynamicEquities = bTokens.map((b) => bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl))\n  //const totalDynamicEquity = dynamicEquities.reduce((accum, d) => accum.plus(d), bg(0))\n  const totalDynamicEquity = bTokens.reduce((accum, b) => accum.plus(bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl)), bg(0))\n  return totalDynamicEquity\n}\n\nexport const isBToken0RatioValid = (bTokens, bTokenId, amount, bToken0Ratio) => {\n  bTokens[bTokenId].liquidity = bg(bTokens[bTokenId].liquidity).plus(amount)\n  const totalDynamicEquity = calculateBTokenDynamicEquities(bTokens)\n  const b = bTokens['0']\n  const dynamicEquity = bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl)\n  //console.log('estimatedBToken0Ratio',dynamicEquity.div(totalDynamicEquity).toString())\n  // use 1 as efficient\n  if (\n    !totalDynamicEquity.eq(0) &&\n    dynamicEquity.div(totalDynamicEquity).times('1').lt(bToken0Ratio)\n  ) {\n    return { success: false, error: 'Trader has insufficient bToken0' };\n  } else {\n    return { success: true };\n  }\n}\n\nexport const isPoolMarginRatioValid = (bTokens, bTokenId, amount, userLiquidity, symbols, poolMarginRatio) => {\n  if (bg(amount).gte(userLiquidity)) {\n    bTokens[bTokenId].liquidity = bg(bTokens[bTokenId].liquidity).minus(userLiquidity)\n  } else {\n    bTokens[bTokenId].liquidity = bg(bTokens[bTokenId].liquidity).minus(amount)\n  }\n  let totalDynamicEquity = calculateBTokenDynamicEquities(bTokens)\n  let totalCost = bg(0)\n  for (let i=0; i<symbols.length; i++) {\n    const s = symbols[i]\n    if (!bg(s.tradersNetVolume).eq(0)) {\n      const cost = bg(s.tradersNetVolume).times(s.price).times(s.multiplier)\n      totalDynamicEquity = totalDynamicEquity.plus(s.tradersNetCost).minus(cost)\n      totalCost = totalCost.plus(cost.abs())\n    }\n  }\n  //console.log(totalDynamicEquity.toString(), totalCost.toString())\n  if (\n    !totalCost.eq(0) &&\n    totalDynamicEquity.div(totalCost).times('1').lt(poolMarginRatio)\n  ) {\n    return { success: false, error: 'Trader has insufficient liquidity' };\n  } else {\n    return { success: true };\n  }\n}\n\n\nexport const calculateMaxRemovableLiquidity = (\n  bToken,\n  userLiquidity,\n  cost,\n  pnl,\n  restLiquidity,\n  minPoolMarginRatio,\n) => {\n  if (bg(cost).eq(0)) {\n    return userLiquidity;\n  } else {\n    return max(\n      min(\n        bToken.liquidity.minus(\n          minPoolMarginRatio\n            .times(cost)\n            .plus(pnl)\n            .minus(restLiquidity)\n            .div(bToken.price)\n            .div(bToken.discount)\n        ).times('0.98'),\n        userLiquidity\n      ),\n      bg(0)\n    );\n  }\n};","import { lTokenFactory, perpetualPoolFactory } from '../factory'\nimport { getPoolConfig2, getPoolBTokenIdList, getPoolSymbolIdList} from '../config'\nimport { bg, deriToNatural } from '../utils'\nimport { getNetworkName } from '../../utils'\nimport { calculateMaxRemovableLiquidity } from '../calculation'\nimport { databaseFactory } from '../../factory/contracts';\n\nexport const getLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId,\n) => {\n  try {\n    const {lToken:lTokenAddress} = getPoolConfig2(poolAddress, bTokenId)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress)\n    const lToken = lTokenFactory(chainId, lTokenAddress);\n\n    const bTokenIdList = getPoolBTokenIdList(poolAddress)\n    const symbolIdList = getPoolSymbolIdList(poolAddress)\n\n    const [parameterInfo, bTokenInfo, lTokenAsset ] = await Promise.all([\n      perpetualPool.getParameters(),\n      perpetualPool.getBToken(bTokenId),\n      lToken.getAsset(accountAddress, bTokenId),\n    ])\n    const { minPoolMarginRatio } = parameterInfo\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n\n    const cost = symbols.reduce((accum, s) => {\n        return accum.plus(bg(s.tradersNetVolume).times(s.price).times(s.multiplier).abs())\n    }, bg(0))\n    const totalPnl = symbols.reduce((accum, s) => {\n        return accum.plus(bg(s.tradersNetVolume).times(s.price).times(s.multiplier).minus(s.tradersNetCost))\n    }, bg(0))\n    const restLiquidity = bTokens.reduce((accum, b, index) => {\n      if (index === parseInt(bTokenId)) {\n        return accum.plus(b.pnl)\n      } else {\n        return accum.plus(bg(b.liquidity).times(b.price).times(b.discount).plus(b.pnl))\n      }\n    }, bg(0))\n\n    const { liquidity: poolLiquidity } = bTokenInfo;\n    const { liquidity, pnl, lastCumulativePnl } = lTokenAsset\n    const maxRemovableShares = calculateMaxRemovableLiquidity(bTokens[bTokenId], liquidity, cost, totalPnl, restLiquidity, minPoolMarginRatio)\n    const approximatePnl = pnl.plus(bg(bTokens[bTokenId].cumulativePnl).minus(lastCumulativePnl).times(liquidity))\n    //console.log(\"approximatePnl\", approximatePnl.toString())\n    return {\n      //totalSupply: lTokenTotalSupply.toString(),\n      poolLiquidity: poolLiquidity.toString(),\n      // shares: liquidity.toString(),\n      // shareValue: '1',\n      // maxRemovableShares: liquidity.toString()\n      shares: liquidity.toString(),\n      pnl: approximatePnl.toString(),\n      maxRemovableShares: maxRemovableShares.toString()\n    };\n  } catch (err) {\n    console.log(`${err}`)\n  }\n  return {\n    poolLiquidity: '',\n    shares: '',\n    pnl: '',\n    maxRemovableShares: '',\n  };\n};\n\nexport const getPoolLiquidity = async (chainId, poolAddress, bTokenId) => {\n  // use the dev database\n  const db = databaseFactory();\n  try {\n    const res = await db\n      .getValues([`${chainId}.${poolAddress}.liquidity${bTokenId}`])\n      .catch((err) => console.log('getPoolLiquidity', err));\n    if (res) {\n      const [liquidity] = res;\n      return {\n        liquidity: deriToNatural(liquidity).toString(),\n        symbol:'',\n      };\n    }\n  } catch (err) {\n    console.log(`${err}`)\n  }\n  return {\n    liquidity: '',\n    symbol:'',\n  };\n};\n\nexport const getPoolInfoApy = async (chainId, poolAddress, bTokenId) => {\n  const db = databaseFactory(true);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy${bTokenId}`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, volume1h, volume24h] = res;\n      return {\n        apy: deriToNatural(apy).toString(),\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(`${err}`)\n  }\n};","import { getPoolBTokenIdList, getPoolConfig2, getPoolSymbolIdList } from '../config'\nimport { perpetualPoolRouterFactory, perpetualPoolFactory, lTokenFactory } from '../factory'\nimport { getOracleInfo } from '../utils'\nimport { isBToken0RatioValid, isPoolMarginRatioValid } from '../calculation'\n\nexport const addLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n   const {router:routerAddress} = getPoolConfig2(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n   const bTokenIdList = getPoolBTokenIdList(poolAddress)\n   let promises = []\n   for (let i=0; i<bTokenIdList.length; i++) {\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n   }\n   const bTokens = await Promise.all(promises)\n   const { minBToken0Ratio } = await perpetualPool.getParameters();\n   const validation = isBToken0RatioValid(bTokens, bTokenId, amount, minBToken0Ratio)\n   let res\n   if (validation.success) {\n    try {\n      const tx = await perpetualPoolRouter.addLiquidity(accountAddress, bTokenId, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err};\n    }\n   } else {\n      res = { success: false, error: validation.error};\n   }\n   return res\n}\n\nexport const removeLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum=false,\n) => {\n   const { router: routerAddress, lToken: lTokenAddress } = getPoolConfig2(\n     poolAddress,\n   );\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress)\n   const lToken = lTokenFactory(chainId, lTokenAddress);\n   const lTokenAsset = await lToken.getAsset(accountAddress, bTokenId)\n   const { liquidity:userLiquidity } = lTokenAsset\n   const bTokenIdList = getPoolBTokenIdList(poolAddress)\n   let symbolIdList = getPoolSymbolIdList(poolAddress)\n   let promises = []\n   for (let i=0; i<bTokenIdList.length; i++) {\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n   }\n   const bTokens = await Promise.all(promises)\n   promises = []\n   for (let i=0; i<symbolIdList.length; i++) {\n     promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n   }\n   const symbols = await Promise.all(promises)\n   const { minPoolMarginRatio } = await perpetualPool.getParameters();\n   const validation = isPoolMarginRatioValid(bTokens, bTokenId, amount, userLiquidity, symbols, minPoolMarginRatio)\n   let res\n   if (validation.success) {\n     try {\n       const tx = await perpetualPoolRouter.removeLiquidity(accountAddress, bTokenId, amount, isMaximum);\n       res = { success: true, transaction: tx };\n     } catch (err) {\n       res = { success: false, error: err};\n     }\n   } else {\n    res = { success: false, error: validation.error };\n   }\n   return res\n}\n\nexport const addLiquidityWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n   const {router:routerAddress} = getPoolConfig2(poolAddress)\n   const symbolIdList = getPoolSymbolIdList(poolAddress)\n   const bTokenIdList = getPoolBTokenIdList(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n   let promises = []\n   for (let i=0; i<bTokenIdList.length; i++) {\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n   }\n   const bTokens = await Promise.all(promises)\n   const { minBToken0Ratio } = await perpetualPool.getParameters();\n   const validation = isBToken0RatioValid(bTokens, bTokenId, amount, minBToken0Ratio)\n   let res\n   if (validation.success) {\n    try {\n      const promises = symbolIdList.map(async(s) => {\n        return await getOracleInfo(poolAddress, s)\n      })\n      const prices = await Promise.all(promises)\n      const priceInfos = prices.map((p, index) => {\n        return [symbolIdList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n      })\n      const tx = await perpetualPoolRouter.addLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err};\n    }\n   } else {\n    res = { success: false, error: validation.error };\n   }\n   return res\n}\n\nexport const removeLiquidityWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum = false,\n) => {\n   const {router:routerAddress, lToken:lTokenAddress} = getPoolConfig2(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress)\n\n   const lToken = lTokenFactory(chainId, lTokenAddress);\n   const lTokenAsset = await lToken.getAsset(accountAddress, bTokenId)\n   const { liquidity:userLiquidity } = lTokenAsset\n   const bTokenIdList = getPoolBTokenIdList(poolAddress)\n   let promises = []\n   for (let i=0; i<bTokenIdList.length; i++) {\n    promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n   }\n   const bTokens = await Promise.all(promises)\n   promises = []\n\n   const symbolIdList = getPoolSymbolIdList(poolAddress)\n   for (let i=0; i<symbolIdList.length; i++) {\n     promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n   }\n   const symbols = await Promise.all(promises)\n   const { minPoolMarginRatio } = await perpetualPool.getParameters();\n\n   const validation = isPoolMarginRatioValid(bTokens, bTokenId, amount, userLiquidity, symbols, minPoolMarginRatio)\n   let res\n   if (validation.success) {\n     try {\n       promises = symbolIdList.map(async(s) => {\n         return await getOracleInfo(poolAddress, s)\n       })\n       const prices = await Promise.all(promises)\n       const priceInfos = prices.map((p, index) => {\n         return [symbolIdList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n       })\n       const tx = await perpetualPoolRouter.removeLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum);\n       res = { success: true, transaction: tx };\n     } catch (err) {\n       res = { success: false, error: err};\n     }\n   } else {\n    res = { success: false, error: validation.error };\n   }\n   return res\n}\n","export const priceCache = (function(){\n  let _prices = {}\n  return {\n    get(poolAddress, symbolId) {\n      const key = `${poolAddress}.${symbolId}`\n      if (Object.keys(_prices).includes(key)) {\n        const [price, ] = _prices[key].split('|')\n        //if (parseInt(timestamp) - Date.now() < 10000) {\n          return price\n        //}\n      }\n      console.log('please init priceCache first')\n    },\n    // update(chainId, poolAddress, symbolId) {\n    //   // place holder\n    // },\n    set(poolAddress, symbolId, val) {\n      if (!isNaN(parseFloat(val))) {\n        const timestamp = Date.now().toString()\n        _prices[`${poolAddress}.${symbolId}`] = `${val}|${timestamp}`\n      }\n    }\n  }\n})()\n\nexport const fundingRateCache = (function () {\n  let resourceMap = {};\n  return {\n    get(chainId, contractAddress, symbolId) {\n      const key = `${chainId}.${contractAddress}.${symbolId}`;\n      if (Object.keys(resourceMap).includes(key)) {\n        return resourceMap[key];\n      }\n      console.log(`fundingRateCache: key is not in exist: ${key}`);\n      return undefined;\n    },\n    set(chainId, contractAddress, symbolId, resource) {\n      const key = `${chainId}.${contractAddress}.${symbolId}`;\n      resourceMap[key] = resource;\n    },\n  };\n})();","import { perpetualPoolFactory, bTokenFactory, pTokenFactory } from '../factory';\nimport { getPoolBTokenIdList, getPoolBTokenList, getPoolConfig2, getPoolSymbolIdList, getPoolSymbolList} from '../config'\nimport {\n  calculateEntryPrice,\n  calculateLiquidationPrice,\n  calculateFundingRate,\n  calculateFundingFee,\n  processFundingRate,\n} from '../calculation';\nimport { getOraclePrice, bg, min, max } from '../utils'\nimport { fundingRateCache, priceCache } from '../api/api_globals';\n\nexport const getSpecification = async (\n  chainId,\n  poolAddress,\n  bTokenId,\n  symbolId,\n) => {\n  try {\n    const {symbol, bTokenSymbol } = getPoolConfig2(poolAddress, bTokenId, symbolId)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    const [symbolInfo, parameterInfo] = await Promise.all([\n      perpetualPool.getSymbol(symbolId),\n      perpetualPool.getParameters(),\n    ])\n    const { multiplier, feeRatio, fundingRateCoefficient} = symbolInfo\n    const {\n      minPoolMarginRatio,\n      minInitialMarginRatio,\n      minMaintenanceMarginRatio,\n      minLiquidationReward,\n      maxLiquidationReward,\n      liquidationCutRatio,\n      protocolFeeCollectRatio,\n    } = parameterInfo\n    return {\n      symbol: symbol,\n      bSymbol: bTokenSymbol,\n      multiplier: multiplier.toString(),\n      feeRatio: feeRatio.toString(),\n      fundingRateCoefficient: fundingRateCoefficient.toString(),\n      minPoolMarginRatio: minPoolMarginRatio.toString(),\n      minInitialMarginRatio: minInitialMarginRatio.toString(),\n      minMaintenanceMarginRatio: minMaintenanceMarginRatio.toString(),\n      //minAddLiquidity: minAddLiquidity.toString(),\n      //redemptionFeeRatio: redemptionFeeRatio.toString(),\n      minLiquidationReward: minLiquidationReward.toString(),\n      maxLiquidationReward: maxLiquidationReward.toString(),\n      liquidationCutRatio: liquidationCutRatio.toString(),\n      protocolFeeCollectRatio: protocolFeeCollectRatio.toString(),\n    }\n  } catch (err) {\n    console.log(`${err}`)\n  }\n  return {\n    symbol: '',\n    bSymbol: '',\n    multiplier: '',\n    feeRatio: '',\n    fundingRateCoefficient: '',\n    minPoolMarginRatio: '',\n    minInitialMarginRatio: '',\n    minMaintenanceMarginRatio: '',\n    minLiquidationReward: '',\n    maxLiquidationReward: '',\n    liquidationCutRatio: '',\n    protocolFeeCollectRatio: '',\n  }\n};\n\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress, symbolId) => {\n  try {\n    const symbolConfigList = getPoolSymbolList(poolAddress)\n    const bTokenIdList = getPoolBTokenIdList(poolAddress)\n    const symbolIdList = symbolConfigList.map((i) => i.symbolId)\n    const symbolList = symbolConfigList.map((i) => i.symbol)\n    //console.log('bTokenList', bTokenList)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    const {pToken: pTokenAddress } = getPoolConfig2(poolAddress, null, symbolId)\n    const pToken = pTokenFactory(chainId, pTokenAddress);\n    const [symbolInfo, parameterInfo, lastUpdatedBlockNumber, latestBlockNumber, positionInfo, margins, positions, latestPrice] = await Promise.all([\n      perpetualPool.getSymbol(symbolId),\n      perpetualPool.getParameters(),\n      perpetualPool.getLastUpdatedBlockNumber(),\n      perpetualPool.getLatestBlockNumber(),\n      pToken.getPosition(accountAddress, symbolId),\n      pToken.getMargins(accountAddress),\n      pToken.getPositions(accountAddress),\n      getOraclePrice(chainId, symbolList[parseInt(symbolId)])\n    ])\n    const { volume, cost, lastCumulativeFundingRate } = positionInfo\n    const { multiplier, fundingRateCoefficient, tradersNetVolume, cumulativeFundingRate } = symbolInfo\n    const {\n      minInitialMarginRatio,\n      minMaintenanceMarginRatio,\n    } = parameterInfo\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const margin = bTokens.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.discount).times(margins[index]))\n    }, bg(0))\n\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    promises = []\n    for (let i=0; i<symbolList.length; i++) {\n      promises.push(getOraclePrice(chainId, symbolList[i]))\n    }\n    const symbolPrices = await Promise.all(promises)\n    const price = symbolPrices[symbolId]\n    priceCache.set(poolAddress, symbolId, price)\n    const marginHeld = symbols.reduce((accum, s, index) => {\n      return accum.plus(bg(symbolPrices[index]).times(s.multiplier).times(positions[index].volume).times(minInitialMarginRatio).abs())\n    }, bg(0))\n    const marginHeldBySymbol = bg(volume).abs().times(multiplier).times(symbolPrices[symbolId]).times(minInitialMarginRatio)\n    //console.log('margin', margin.toString(), marginHeld.toString())\n    //\n    //const unrealizedPnl = bg(positions[symbolId].volume).times(price).times(multiplier).minus(positions[symbolId].cost)\n    const unrealizedPnl = symbols.reduce((accum, s, index) => {\n      return accum.plus(bg(symbolPrices[index]).times(s.multiplier).times(positions[index].volume).minus(positions[index].cost))\n    }, bg(0))\n    const unrealizedPnlList = symbols.map((s, index) => {\n      return [s.symbol, bg(symbolPrices[index]).times(s.multiplier).times(positions[index].volume).minus(positions[index].cost).toString()]\n    })\n\n    const totalCost = positions.reduce((accum, a) => {\n      return accum.plus(bg(a.cost))\n    }, bg(0))\n    const dynamicCost = symbols.reduce((accum, s, index) => {\n      if (index !== parseInt(symbolId)) {\n        return accum.plus(bg(positions[index].volume).times(symbolPrices[index]).times(s.multiplier))\n      } else {\n        return accum\n      }\n    }, bg(0))\n    //console.log('cost', costTotal.toString())\n    const liquidity = bTokens.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\n    const fundingFee = calculateFundingFee(\n      tradersNetVolume,\n      latestPrice,\n      multiplier,\n      fundingRateCoefficient,\n      liquidity,\n      cumulativeFundingRate,\n      lastCumulativeFundingRate,\n      lastUpdatedBlockNumber,\n      latestBlockNumber,\n      volume,\n    );\n  return {\n      price: price,\n      volume: volume.toString(),\n      averageEntryPrice: calculateEntryPrice(volume, cost, multiplier).toString(),\n      margin: margin.toString(),\n      marginHeld: marginHeld.toString(),\n      marginHeldBySymbol: marginHeldBySymbol.toString(),\n      unrealizedPnl: unrealizedPnl.toString(),\n      unrealizedPnlList,\n      liquidationPrice: calculateLiquidationPrice(\n        volume,\n        margin,\n        totalCost,\n        dynamicCost,\n        multiplier,\n        minMaintenanceMarginRatio\n      ).toString(),\n      fundingFee: fundingFee.toString()\n    };\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return {\n    volume: '',\n    averageEntryPrice: '',\n    margin: '',\n    marginHeld: '',\n    unrealizedPnl: '',\n    liquidationPrice: '',\n  };\n}\n\nexport const getWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId,\n) => {\n  try {\n    const { bToken: bTokenAddress } = getPoolConfig2(poolAddress, bTokenId);\n    const balance = await bTokenFactory(chainId, bTokenAddress).balanceOf(accountAddress)\n    return balance.toString()\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return '';\n}\n\nexport const isUnlocked = async (chainId, poolAddress, accountAddress, bTokenId) => {\n  try {\n    const { bToken: bTokenAddress } = getPoolConfig2(poolAddress, bTokenId);\n    const bToken = await bTokenFactory(chainId, bTokenAddress)\n    return bToken.isUnlocked(accountAddress, poolAddress)\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return false\n}\n\nexport const getEstimatedFee = async (chainId, poolAddress, volume, symbolId) => {\n  try {\n    let price = priceCache.get(poolAddress, symbolId)\n    const {symbol} = getPoolConfig2(poolAddress, null, symbolId)\n    if (!price) {\n      //price = await getOraclePrice(poolAddress, symbolId)\n      price = await getOraclePrice(chainId, symbol)\n      priceCache.set(poolAddress, symbolId, price)\n    }\n    let cache = fundingRateCache.get(chainId, poolAddress, symbolId)\n    if (!cache || !cache.multiplier) {\n      await _getFundingRate(chainId, poolAddress, symbolId)\n      cache = fundingRateCache.get(chainId, poolAddress, symbolId)\n    }\n    const { multiplier, feeRatio } = cache;\n    //console.log(volume, price, multiplier, feeRatio)\n    return bg(volume).abs().times(price).times(multiplier).times(feeRatio).toString()\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return ''\n}\n\nexport const getEstimatedMargin = async(\n  chainId,\n  poolAddress,\n  accountAddress,\n  volume,\n  leverage,\n  symbolId,\n) => {\n  try {\n    const {symbol} = getPoolConfig2(poolAddress, null, symbolId)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    const [price, symbolInfo ] = await Promise.all([\n      //getOraclePrice(poolAddress, symbolId),\n      getOraclePrice(chainId, symbol),\n      perpetualPool.getSymbol(symbolId),\n    ])\n    priceCache.set(poolAddress, symbolId, price)\n    const {multiplier} = symbolInfo\n    //console.log('m',multiplier.toString())\n    return bg(volume).abs().times(price).times(multiplier).div(bg(leverage)).toString()\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return ''\n}\n\nexport const getFundingRateCache = async(chainId, poolAddress, symbolId) => {\n  return fundingRateCache.get(chainId, poolAddress, symbolId)\n}\n\nconst _getFundingRate = async(chainId, poolAddress, symbolId) => {\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress)\n  const {symbol} = getPoolConfig2(poolAddress, null, symbolId)\n  let bTokenIdList = getPoolBTokenIdList(poolAddress)\n  let promiseList = []\n  for (let i=0; i<bTokenIdList.length; i++) {\n    promiseList.push(perpetualPool.getBToken(i))\n  }\n  const bTokenInfoList = await Promise.all(promiseList)\n  const liquidity = bTokenInfoList.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\n  //const pnl = bTokenInfoList.reduce((accum, i) => accum.plus(i.pnl), bg(0))\n  //console.log('pnl', pnl.toString())\n\n  const [price, symbolInfo, parameterInfo ] = await Promise.all([\n    //getOraclePrice(poolAddress, symbolId),\n    getOraclePrice(chainId, symbol),\n    perpetualPool.getSymbol(symbolId),\n    perpetualPool.getParameters(),\n  ])\n  priceCache.set(poolAddress, symbolId, price)\n  const { multiplier, fundingRateCoefficient, tradersNetVolume, feeRatio } = symbolInfo;\n  const { minPoolMarginRatio } = parameterInfo;\n  const fundingRateArgs = [\n    tradersNetVolume,\n    price,\n    multiplier,\n    liquidity,\n    fundingRateCoefficient,\n  ]\n  const fundingRatePerBlock = calculateFundingRate(...fundingRateArgs)\n  const fundingRate = processFundingRate(chainId, fundingRatePerBlock)\n  // const liquidityUsedArgs = [\n  //   tradersNetVolume,\n  //   price,\n  //   multiplier,\n  //   liquidity,\n  //   minPoolMarginRatio,\n  // ]\n  let symbolIdList = getPoolSymbolIdList(poolAddress)\n  let promises = []\n  for (let i=0; i<symbolIdList.length; i++) {\n    promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n  }\n  const symbols = await Promise.all(promises)\n  //console.log('margin', margin.toString(), marginHeld.toString())\n  const liquidityUsedInAmount = symbols.reduce((accum, a) => {\n    return accum.plus(bg(a.tradersNetVolume).times(a.price).times(a.multiplier).times(minPoolMarginRatio).abs())\n  }, bg(0))\n\n  //const liquidityUsed = liquidityUsedInAmount.div(liquidity)\n  const res = {\n    price,\n    multiplier: multiplier.toString(),\n    feeRatio: feeRatio.toString(),\n    tradersNetVolume: tradersNetVolume.toString(),\n    liquidity: liquidity.toString(),\n    //pnl: pnl.toString(),\n    fundingRateCoefficient: fundingRateCoefficient.toString(),\n    minPoolMarginRatio: minPoolMarginRatio.toString(),\n    fundingRatePerBlock: fundingRatePerBlock,\n    fundingRate: fundingRate,\n    liquidityUsed: liquidityUsedInAmount.div(liquidity)\n  }\n  fundingRateCache.set(chainId, poolAddress, symbolId, res)\n  return res\n}\n\nexport const getFundingRate = async (chainId, poolAddress, symbolId) => {\n  try {\n    const res = await _getFundingRate(chainId, poolAddress, symbolId)\n    const { fundingRate, fundingRatePerBlock, liquidity, tradersNetVolume } = res\n    return {\n      fundingRate0: fundingRate.times(100).toString(),\n      fundingRatePerBlock: fundingRatePerBlock.toString(),\n      liquidity: liquidity.toString(),\n      volume: '-',\n      tradersNetVolume: tradersNetVolume.toString()\n    };\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return {\n    fundingRate0: '',\n    fundingRatePerBlock: '',\n    liquidity: '',\n    volume: '',\n    tradersNetVolume: '',\n  };\n}\n\nexport const getEstimatedFundingRate = async (\n  chainId,\n  poolAddress,\n  newNetVolume,\n  symbolId,\n) => {\n  try {\n    let res = fundingRateCache.get(chainId, poolAddress, symbolId)\n    if (!res) {\n      res = await _getFundingRate(chainId, poolAddress, symbolId)\n    }\n    const args = [\n      bg(res.tradersNetVolume).plus(newNetVolume).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.fundingRateCoefficient,\n    ]\n    let fundingRate1 = calculateFundingRate(...args)\n    fundingRate1 = processFundingRate(chainId, fundingRate1)\n    return {\n      fundingRate1: fundingRate1.times(100).toString()\n    }\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return {\n    fundingRate1: '',\n  }\n}\n\nexport const getLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  symbolId,\n) => {\n  try {\n    let res = fundingRateCache.get(chainId, poolAddress, symbolId)\n    if (!res) {\n      res = await _getFundingRate(chainId, poolAddress, symbolId)\n    }\n    return {\n      liquidityUsed0: res.liquidityUsed.times(100).toString(),\n    };\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return {\n    liquidityUsed0: '',\n  }\n};\n\nexport const getEstimatedLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  newNetVolume,\n  symbolId,\n) => {\n  try {\n    let res = fundingRateCache.get(chainId, poolAddress, symbolId)\n    if (!res) {\n      res = await _getFundingRate(chainId, poolAddress, symbolId)\n    }\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress)\n    // const {pToken: pTokenAddress } = getPoolConfig2(poolAddress, null, symbolId)\n    // const pToken = pTokenFactory(chainId, pTokenAddress);\n    // const { volume } = pToken.getPosition(accountAddress, symbolId);\n    let symbolIdList = getPoolSymbolIdList(poolAddress)\n    let promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    let liquidityUsed0 = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.price).times(a.multiplier).times(a.tradersNetVolume.plus(newNetVolume)).abs())\n      } else {\n        return accum.plus(bg(a.price).times(a.multiplier).times(a.tradersNetVolume).abs())\n      }\n    }, bg(0))\n    //liquidityUsed0 = liquidityUsed0.times(res.minPoolMarginRatio)\n    //const liquidityUsed = bg(newNetVolume).times(res.price).times(res.multiplier).times(res.minPoolMarginRatio).div(res.liquidity)\n    const liquidityUsed1 = liquidityUsed0.times(res.minPoolMarginRatio).div(res.liquidity)\n    return {\n      liquidityUsed1: liquidityUsed1.times(100).toString()\n    }\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return {\n    liquidityUsed1: '',\n  }\n}\n\n\nexport const getPoolBTokensBySymbolId = async(chainId, poolAddress, accountAddress, symbolId) => {\n  try {\n    let bTokenList = getPoolBTokenList(poolAddress)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress)\n    const {pToken: pTokenAddress } = getPoolConfig2(poolAddress, null, symbolId)\n    const pToken = pTokenFactory(chainId, pTokenAddress);\n    // let bTokenList = bTokensConfigList.map((i) => {\n    //   return {bTokenId: i.bTokenId, bTokenSymbol: i.bTokenSymbol, bTokenAddress: i.bToken}\n    // })\n    let promiseList = []\n    for (let i=0; i<bTokenList.length; i++) {\n      promiseList.push(bTokenFactory(chainId, bTokenList[i].bTokenAddress).balanceOf(accountAddress))\n    }\n    const resultList = await Promise.all(promiseList)\n    for (let i=0; i<bTokenList.length; i++) {\n      bTokenList[i].walletBalance = resultList[i].toString()\n    }\n\n    const bTokenIdList = getPoolBTokenIdList(poolAddress)\n    const symbolIdList = getPoolSymbolIdList(poolAddress)\n    const [margins, positions, parameterInfo] = await Promise.all([\n      pToken.getMargins(accountAddress),\n      pToken.getPositions(accountAddress),\n      perpetualPool.getParameters(),\n    ]);\n    const { minInitialMarginRatio } = parameterInfo;\n\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const margin = bTokens.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.discount).times(margins[index]))\n    }, bg(0))\n    //console.log('margin', margin.toString())\n\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    const marginHeld = symbols.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).abs().times(minInitialMarginRatio))\n    }, bg(0))\n    //console.log('marginHeld', marginHeld.toString())\n\n    const pnl = symbols.reduce((accum, a, index) => {\n      return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).minus(positions[index].cost))\n    }, bg(0))\n    //console.log('pnl', pnl.toString())\n\n    bTokenList = bTokenList.map((i, index) => {\n      if(!isNaN(parseFloat(bTokens[index].price)) || bTokens[index].price !== '0') {\n        i.availableBalance = max(min(margin.minus(marginHeld).plus(pnl).div(bTokens[index].price).div(bTokens[index].discount), margins[index]), bg(0)).toString()\n      } else {\n        i.availableBalance = '-'\n      }\n      return i\n    })\n    return bTokenList\n  } catch(err) {\n    console.log(`${err}`)\n  }\n  return []\n}\n\nexport const getFundingFee = async(chainId, poolAddress, accountAddress, symbolId) => {\n    const symbolConfigList = getPoolSymbolList(poolAddress)\n    const symbolList = symbolConfigList.map((i) => i.symbol)\n    const {pToken: pTokenAddress } = getPoolConfig2(poolAddress, null, symbolId)\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    const pToken = pTokenFactory(chainId, pTokenAddress);\n    const [symbolInfo, positionInfo, price, lastUpdatedBlockNumber, latestBlockNumber] = await Promise.all([\n      perpetualPool.getSymbol(symbolId),\n      pToken.getPosition(accountAddress, symbolId),\n      getOraclePrice(chainId, symbolList[parseInt(symbolId)]),\n      perpetualPool.getLastUpdatedBlockNumber(),\n      perpetualPool.getLatestBlockNumber(),\n    ])\n    const { volume, lastCumulativeFundingRate } = positionInfo\n    const { multiplier, fundingRateCoefficient, tradersNetVolume, cumulativeFundingRate, } = symbolInfo;\n    const bTokenIdList = getPoolBTokenIdList(poolAddress)\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const liquidity = bTokens.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\n    const fundingFee = calculateFundingFee(\n      tradersNetVolume,\n      price,\n      multiplier,\n      fundingRateCoefficient,\n      liquidity,\n      cumulativeFundingRate,\n      lastCumulativeFundingRate,\n      lastUpdatedBlockNumber,\n      latestBlockNumber,\n      volume,\n    );\n  return fundingFee.toString()\n}\n","import { deriToNatural } from '../utils';\nimport { perpetualPoolFactory } from '../factory';\nimport { getPoolConfig2, getPoolSymbolIdList} from '../config'\n\nimport { getRestServerConfig, DeriEnv } from '../../config';\n\nconst getHttpBase = () => {\n  return getRestServerConfig(DeriEnv.get());\n};\n\nconst fetchJson = async (url) => {\n  const resp = await fetch(url);\n  return await resp.json();\n};\n\nconst processTradeEvent = async (\n  perpetualPool,\n  info,\n  blockNumber,\n  txHash,\n  multiplier,\n  feeRatio\n) => {\n  const tradeVolume = deriToNatural(info.tradeVolume);\n  const timeStamp = await perpetualPool._getTimeStamp(blockNumber);\n\n  const direction = tradeVolume.gt(0) ? 'LONG' : 'SHORT';\n  const price = deriToNatural(info.price);\n  const time = `${+timeStamp.timestamp}000`;\n  const symbolId = info.symbolId\n  const transactionFee = perpetualPool._calculateFee(\n    tradeVolume,\n    price,\n    multiplier[parseInt(symbolId)],\n    feeRatio[parseInt(symbolId)]\n  );\n  const notional = tradeVolume.abs().times(price).times(multiplier[parseInt(symbolId)]);\n  const volume = tradeVolume.abs();\n\n  const res = {\n    direction,\n    //baseToken: bTokenSymbol,\n    symbolId,\n    price: price.toString(),\n    notional: notional.toString(),\n    volume: volume.toString(),\n    transactionFee: transactionFee.toString(),\n    transactionHash: txHash.toString(),\n    time,\n  };\n  return res;\n};\nconst getTradeHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  symbolId,\n  fromBlock\n) => {\n\n  const symbolIdList = getPoolSymbolIdList(poolAddress)\n  //console.log('symbolIdList', symbolIdList);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  fromBlock = parseInt(fromBlock);\n\n  let promises= []\n  for (let i=0; i<symbolIdList.length; i++) {\n    promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n  }\n  let symbols = await Promise.all(promises)\n\n  const multiplier = symbols.map((i) => i.multiplier.toString());\n  const feeRatio = symbols.map((i) => i.feeRatio.toString());\n\n  const filters = { owner: accountAddress };\n  let events = await perpetualPool._getPastEvents(\n    'Trade',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n\n  const result = [];\n  events  = events.filter((i) => i.returnValues.symbolId === symbolId)\n  //console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    const res = await processTradeEvent(\n      perpetualPool,\n      item.returnValues,\n      item.blockNumber,\n      item.transactionHash,\n      multiplier,\n      feeRatio,\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\nexport const getTradeHistory = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  symbolId\n) => {\n  try {\n    let tradeFromBlock, tradeHistory = [];\n    const res = await fetchJson(\n      `${getHttpBase()}/trade_history/${chainId}/${poolAddress}/${accountAddress}/${symbolId}`\n    );\n    if (res && res.success) {\n      tradeFromBlock = parseInt(res.data.tradeHistoryBlock);\n      if (res.data.tradeHistory && Array.isArray(res.data.tradeHistory)) {\n        tradeHistory = res.data.tradeHistory;\n      }\n    }\n    if (tradeHistory.length > 0) {\n      tradeHistory = tradeHistory\n        .filter((i) => i)\n        .map((i) => {\n          return {\n            direction: i.direction.trim(),\n            //baseToken: i.baseToken.trim(),\n            symbolId: i.symbolId,\n            price: deriToNatural(i.price).toString(),\n            notional: deriToNatural(i.notional).toString(),\n            volume: deriToNatural(i.volume).toString(),\n            transactionFee: deriToNatural(i.transactionFee).toString(),\n            transactionHash: i.transactionHash,\n            time: i.time.toString(),\n          };\n        });\n    }\n      //console.log('tradeHistory1',tradeHistory)\n    if (tradeFromBlock !== 0) {\n      // console.log(tradeFromBlock, liquidateFromBlock)\n      const [tradeHistoryOnline] = await Promise.all([\n        getTradeHistoryOnline(\n          chainId,\n          poolAddress,\n          accountAddress,\n          symbolId,\n          tradeFromBlock + 1\n        ),\n      ]);\n      const result = tradeHistoryOnline.concat(tradeHistory);\n      return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n    } else {\n\n      const {initialBlock} = getPoolConfig2(poolAddress)\n      tradeFromBlock = parseInt(initialBlock);\n      const [tradeHistoryOnline] = await Promise.all([\n        getTradeHistoryOnline(\n          chainId,\n          poolAddress,\n          accountAddress,\n          symbolId,\n          tradeFromBlock + 1\n        ),\n      ]);\n      const result = tradeHistoryOnline;\n      return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n    }\n  } catch(err) {\n    console.log(`getTradeHistory(${chainId}, ${poolAddress}, ${accountAddress}, ${symbolId}): ${err}`)\n  }\n  return []\n};\n","import { isOrderValid } from '../calculation';\nimport { getPoolConfig2, getPoolSymbolIdList, getPoolBTokenIdList } from '../config'\nimport {\n  bTokenFactory,\n  perpetualPoolRouterFactory,\n  pTokenFactory,\n  perpetualPoolFactory,\n} from '../factory';\nimport { getOracleInfo, bg } from '../utils';\n\nexport const unlock = async (chainId, poolAddress, accountAddress, bTokenId) => {\n   const { bToken: bTokenAddress } = getPoolConfig2(poolAddress, bTokenId);\n  const bToken = bTokenFactory(chainId, bTokenAddress);\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress, poolAddress)\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n\nexport const depositMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n   const { router: routerAddress } = getPoolConfig2(poolAddress);\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   let res;\n   try {\n     const tx = await perpetualPoolRouter.addMargin(accountAddress, bTokenId, amount);\n     res = { success: true, transaction: tx };\n   } catch (err) {\n     res = { success: false, error: err };\n   }\n   return res;\n}\n\nexport const withdrawMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum = false,\n) => {\n   const { router: routerAddress } = getPoolConfig2(poolAddress);\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   let res;\n   try {\n     const tx = await perpetualPoolRouter.removeMargin(accountAddress, bTokenId, amount, isMaximum);\n     res = { success: true, transaction: tx };\n   } catch (err) {\n     res = { success: false, error: err };\n   }\n   return res;\n}\n\nexport const tradeWithMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  symbolId,\n) => {\n   const { router: routerAddress, pToken: pTokenAddress } = getPoolConfig2(poolAddress);\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n   const pToken = pTokenFactory(chainId, pTokenAddress);\n   const [parameterInfo, positions] = await Promise.all([\n    //  getOraclePrice(poolAddress, symbolId),\n    //  perpetualPool.getSymbol(symbolId),\n     perpetualPool.getParameters(),\n     pToken.getPositions(accountAddress),\n     //pToken.getMargin(accountAddress, symbolId),\n   ]);\n\n   //const { multiplier } = symbolInfo;\n   const { minInitialMarginRatio, minPoolMarginRatio} = parameterInfo;\n\n   const bTokenIdList = getPoolBTokenIdList(poolAddress)\n   const margins = await pToken.getMargins(accountAddress)\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const margin = bTokens.reduce((accum, i, index) => {\n      return accum.plus(bg(i.price).times(i.discount).times(margins[index]))\n    }, bg(0))\n\n    const liquidity = bTokens.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\n    let symbolIdList = getPoolSymbolIdList(poolAddress)\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    let marginHeld = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume.plus(newVolume)).abs())\n      } else {\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).abs())\n      }\n    }, bg(0))\n    marginHeld = marginHeld.times(minInitialMarginRatio)\n\n    //console.log('margin', margin.toString(), marginHeld.toString())\n    let liquidityUsed = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.tradersNetVolume.plus(newVolume)).times(a.price).times(a.multiplier).abs())\n      } else {\n        return accum.plus(bg(a.tradersNetVolume).times(a.price).times(a.multiplier).abs())\n      }\n    }, bg(0))\n    liquidityUsed = liquidityUsed.times(minPoolMarginRatio)\n    //console.log('liquidityUsed', liquidityUsed.toString())\n\n   const orderValidation = isOrderValid(\n     //price,\n     margin,\n     marginHeld,\n     liquidity,\n     liquidityUsed,\n     //multiplier,\n     //minPoolMarginRatio,\n     //bg(newVolume),\n   )\n   let res;\n   if (orderValidation.success) {\n    try {\n      const tx = await perpetualPoolRouter.trade(accountAddress, symbolId, newVolume);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n   } else {\n     res = { success: false, error: orderValidation.error};\n   }\n   return res;\n}\n\nexport const closePosition = async (chainId, poolAddress, accountAddress, symbolId) => {\n   const { router: routerAddress, pToken: pTokenAddress } = getPoolConfig2(poolAddress);\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const pToken = pTokenFactory(chainId, pTokenAddress)\n   const { volume } = await pToken.getPosition(accountAddress, symbolId)\n   const newVolume = volume.negated()\n   let res;\n   if (!volume.eq(0)) {\n    try {\n      const tx = await perpetualPoolRouter.trade(accountAddress, symbolId, newVolume);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n    return res;\n  } else {\n    res = { success: false, error: 'no position to close' };\n  }\n  return res\n}\n\nexport const depositMarginWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n   const { router: routerAddress } = getPoolConfig2(poolAddress);\n   const symbolIdList = getPoolSymbolIdList(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   let res;\n   try {\n     const promises = symbolIdList.map(async(s) => {\n       return await getOracleInfo(poolAddress, s)\n     })\n     const prices = await Promise.all(promises)\n     const priceInfos = prices.map((p, index) => {\n       return [symbolIdList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n     })\n     const tx = await perpetualPoolRouter.addMarginWithPrices(accountAddress, bTokenId, amount, priceInfos);\n     res = { success: true, transaction: tx };\n   } catch (err) {\n     res = { success: false, error: err };\n   }\n   return res;\n}\n\nexport const withdrawMarginWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum = false,\n) => {\n   const { router: routerAddress } = getPoolConfig2(poolAddress);\n   const symbolIdList = getPoolSymbolIdList(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   let res;\n   try {\n     const promises = symbolIdList.map(async(s) => {\n       return await getOracleInfo(poolAddress, s)\n     })\n     const prices = await Promise.all(promises)\n     const priceInfos = prices.map((p, index) => {\n       return [symbolIdList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n     })\n     const tx = await perpetualPoolRouter.removeMarginWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum);\n     res = { success: true, transaction: tx };\n   } catch (err) {\n     res = { success: false, error: err };\n   }\n   return res;\n}\n\nexport const tradeWithMarginWithPrices = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  symbolId,\n) => {\n   const { router: routerAddress, pToken: pTokenAddress } = getPoolConfig2(poolAddress);\n   const symbolIdList = getPoolSymbolIdList(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress);\n   const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n   const pToken = pTokenFactory(chainId, pTokenAddress);\n   //const [price, symbolInfo, parameterInfo, positions] = await Promise.all([\n   const [parameterInfo, positions] = await Promise.all([\n    //  getOraclePrice(poolAddress, symbolId),\n    //  perpetualPool.getSymbol(symbolId),\n     perpetualPool.getParameters(),\n     pToken.getPositions(accountAddress),\n     //pToken.getMargin(accountAddress, symbolId),\n   ]);\n\n   //const { multiplier } = symbolInfo;\n   const { minInitialMarginRatio, minPoolMarginRatio} = parameterInfo;\n\n   const bTokenIdList = getPoolBTokenIdList(poolAddress)\n   const margins = await pToken.getMargins(accountAddress)\n    let promises = []\n    for (let i=0; i<bTokenIdList.length; i++) {\n      promises.push(perpetualPool.getBToken(bTokenIdList[i]))\n    }\n    const bTokens = await Promise.all(promises)\n    const margin = bTokens.reduce((accum, i, index) => {\n      return accum.plus(bg(i.price).times(i.discount).times(margins[index]))\n    }, bg(0))\n\n    const liquidity = bTokens.reduce((accum, i) => accum.plus(bg(i.liquidity).times(i.price).times(i.discount).plus(i.pnl)), bg(0))\n    //console.log('liquidity', liquidity.toString())\n    promises = []\n    for (let i=0; i<symbolIdList.length; i++) {\n      promises.push(perpetualPool.getSymbol(symbolIdList[i]))\n    }\n    const symbols = await Promise.all(promises)\n    let marginHeld = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume.plus(newVolume)).abs())\n      } else {\n        return accum.plus(bg(a.price).times(a.multiplier).times(positions[index].volume).abs())\n      }\n    }, bg(0))\n    marginHeld = marginHeld.times(minInitialMarginRatio)\n\n    //console.log('margin', margin.toString(), marginHeld.toString())\n    let liquidityUsed = symbols.reduce((accum, a, index) => {\n      if (index === parseInt(symbolId)) {\n        return accum.plus(bg(a.tradersNetVolume.plus(newVolume)).times(a.price).times(a.multiplier).abs())\n      } else {\n        return accum.plus(bg(a.tradersNetVolume).times(a.price).times(a.multiplier).abs())\n      }\n    }, bg(0))\n    liquidityUsed = liquidityUsed.times(minPoolMarginRatio)\n    //console.log('liquidityUsed', liquidityUsed.toString())\n\n    // const pnl = bTokens.reduce((accum, i) => accum.plus(i.pnl), bg(0))\n    // console.log('pnl', pnl.toString())\n\n   const orderValidation = isOrderValid(\n     //price,\n     margin,\n     marginHeld,\n     liquidity,\n     liquidityUsed,\n     //multiplier,\n     //minPoolMarginRatio,\n     //bg(newVolume),\n   )\n   let res;\n   if (orderValidation.success) {\n    try {\n     promises = symbolIdList.map(async(s) => {\n       return await getOracleInfo(poolAddress, s)\n     })\n     const prices = await Promise.all(promises)\n     const priceInfos = prices.map((p, index) => {\n       return [symbolIdList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n     })\n      const tx = await perpetualPoolRouter.tradeWithPrices(accountAddress, symbolId, newVolume, priceInfos);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n   } else {\n     res = { success: false, error: orderValidation.error};\n   }\n   return res;\n}\n\nexport const closePositionWithPrices = async (chainId, poolAddress, accountAddress, symbolId) => {\n   const { router: routerAddress, pToken: pTokenAddress } = getPoolConfig2(poolAddress);\n   const symbolIdList = getPoolSymbolIdList(poolAddress)\n   const perpetualPoolRouter = perpetualPoolRouterFactory(chainId, routerAddress)\n   const pToken = pTokenFactory(chainId, pTokenAddress)\n   const { volume } = await pToken.getPosition(accountAddress, symbolId)\n   const newVolume = volume.negated()\n   let res;\n   if (!volume.eq(0)) {\n    try {\n     const promises = symbolIdList.map(async(s) => {\n       return await getOracleInfo(poolAddress, s)\n     })\n     const prices = await Promise.all(promises)\n     const priceInfos = prices.map((p, index) => {\n       return [symbolIdList[index], p.timestamp, p.price, parseInt(p.v).toString(), p.r, p.s]\n     })\n      const tx = await perpetualPoolRouter.tradeWithPrices(accountAddress, symbolId, newVolume, priceInfos);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n    return res;\n  } else {\n    res = { success: false, error: 'no position to close' };\n  }\n  return res\n}","import { brokerManagerFactory } from \"../factory\"\nimport { normalizeAddress, normalizeChainId } from \"../utils\"\nimport { getBrokerConfig } from \"../config\"\n\nexport const getBroker = async(chainId, accountAddress) => {\n  chainId = normalizeChainId(chainId)\n  accountAddress = normalizeAddress(accountAddress)\n  const {address: brokerAddress} = getBrokerConfig(chainId)\n  let res = ''\n  try {\n    const brokerManager = brokerManagerFactory(chainId, brokerAddress)\n    res = await brokerManager.getBroker(accountAddress)\n  } catch (err) {\n    console.log(err)\n  }\n  return res\n}\n\nexport const setBroker = async(chainId, accountAddress, brokerAddress) => {\n  chainId = normalizeChainId(chainId)\n  accountAddress = normalizeAddress(accountAddress)\n  brokerAddress = normalizeAddress(brokerAddress);\n  const {address: brokerManagerAddress} = getBrokerConfig(chainId)\n  let res\n  try {\n    const brokerManager = brokerManagerFactory(chainId, brokerManagerAddress)\n    const tx = await brokerManager.setBroker(accountAddress, brokerAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res\n}","export {\n  DeriEnv,\n  //getContractAddressConfig,\n  getLpContractAddressConfig,\n  getSlpContractAddressConfig,\n} from './config';\nexport * from './utils';\nexport * from './calculation';\n\nexport * from './api/apiGlobals';\nexport * from './api/factoryApi';\nexport * from './api/walletApi';\nexport {\n  // isUnlocked,\n  // getEstimatedMargin,\n  // getEstimatedFee,\n  // getEstimatedFundingRate,\n  // getEstimatedLiquidityUsed,\n  isDeriUnlocked,\n  getUserWormholeSignature,\n  // getFundingRate,\n  //getPositionInfo,\n  getDeriBalance,\n} from './api/contractQueryApi';\nexport {\n  //unlock,\n  //depositMargin,\n  //withdrawMargin,\n  //addLiquidity,\n  //removeLiquidity,\n  //tradeWithMargin,\n  //closePosition,\n  mint,\n  mintDToken,\n  freeze,\n  mintDeri,\n  unlockDeri,\n  mintAirdrop,\n} from './api/contractTransactionApi';\nexport {\n  getUserInfo,\n  getUserInfoHarvest,\n  getUserInfoTotal,\n  getUserInfoAll,\n  //getPoolInfoApy,\n  getLpPoolInfoApy,\n  getUserInfoInPool,\n  getUserInfoAllForAirDrop,\n} from './api/databaseApi';\n\n// export * from './api/slpPoolApi';\n// export * from './api/clpPoolApi';\n\n// export * from './api/tradeHistoryApi';\nexport {\n//getSpecification2 as getSpecification,\n// getPositionInfo2 as getPositionInfo,\n//getLiquidityInfo2 as getLiquidityInfo,\n//getWalletBalance2 as getWalletBalance,\n//getFundingRate2 as getFundingRate,\n//getLiquidityUsed2 as getLiquidityUsed,\ngetFundingRateCache2 as getFundingRateCache,\ngetSlpLiquidityInfo2 as getSlpLiquidityInfo,\ngetSlpWalletBalance2 as getSlpWalletBalance,\ngetClpLiquidityInfo2 as getClpLiquidityInfo,\ngetClpWalletBalance2 as getClpWalletBalance,\n//getDeriBalance2 as getDeriBalance,\n//getTradeHistory2 as getTradeHistory,\nfetchRestApi,\n} from './api/restApi';\n\n// export {\n  //tradeWithMargin2 as tradeWithMargin,\n  //closePosition2 as closePosition,\n  //depositMargin2 as depositMargin,\n  //withdrawMargin2 as withdrawMargin,\n  //addLiquidity2 as addLiquidity,\n  //removeLiquidity2 as removeLiquidity,\n// } from './api/contractTransactionApiV2'\n\nexport * from './api/lpPoolApi';\n\nexport * from './api_wrapper';\n\nexport {\n  getPoolConfigList,\n  getFilteredPoolConfigList,\n  getPoolBTokensBySymbolId,\n  setBroker,\n} from './v2';\n","import Web3 from 'web3';\nimport { metaMaskWeb3 } from '../factory/web3';\nimport { hexToNumber } from '../utils';\n\n/**\n * check ethereum client status for web browser\n * @function\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.isMetaMask - check if it is MetaMask client\n * @returns {boolean} response.[error] - error message when request failed\n */\nexport const hasWallet = () => {\n  if (window.ethereum && window.ethereum.isMetaMask) {\n    return { success: true, isMetaMask: true };\n  }\n  return {\n    success: false,\n    error:\n      'The browser is not support ethereum wallet, please install MetaMask to proceed.',\n  };\n};\n\n/**\n *  Connect wallet using MetaMask account\n * @async\n * @function\n * @param {function} [handleChainChanged] - Callback when chainId changed\n * @param {function} [handleAccountChanged]  - callback when account changed\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.chainId - chain Id\n * @returns {string} response.account - account address\n * @returns {boolean} response.[error] - error message when request failed\n */\nexport const connectWallet = async (\n  handleChainChanged,\n  handleAccountChanged\n) => {\n  if (typeof window.ethereum !== undefined) {\n    const accounts = await window.ethereum.request({\n      method: 'eth_requestAccounts',\n    });\n    const chainId = parseInt(\n      await window.ethereum.request({ method: 'net_version' })\n    );\n    // const chainId = hexToNumber(\n    //   await window.ethereum.request({ method: 'eth_chainId' })\n    // );\n    const account = Array.isArray(accounts) && accounts[0];\n\n    // await web3.eth.requestAccounts().then(console.log)\n    window.ethereum.on('accountsChanged', (accounts) => {\n      let account;\n      if (accounts.length > 0) {\n        account = accounts[0];\n      } else {\n        account = '';\n      }\n      if (typeof handleAccountChanged === 'function') {\n        handleAccountChanged(account);\n      } else {\n        window.location.reload();\n      }\n      //console.log('accountChanged', account);\n    });\n    window.ethereum.on('chainChanged', (chainId) => {\n      let res = hexToNumber(chainId);\n      if (typeof handleChainChanged === 'function') {\n        handleChainChanged(res);\n      } else {\n        window.location.reload();\n      }\n      //console.log('chainChanged', res);\n    });\n    return { success: true, account, chainId };\n  }\n  return {\n    success: false,\n    error: 'Cannot connect wallet, please install MetaMask.',\n  };\n};\n\n/**\n * Get balance of the connected account\n * @async\n * @method\n * @param {string} chainId - Id of the chain\n * @param {string} accountAddress - Address of the connected account\n * @returns {string} Account balance\n */\nexport const getUserWalletBalance = async (chainId, walletAddress) => {\n  //const web3 = web3Factory(chainId);\n  const web3 = metaMaskWeb3();\n  const balance = await web3.eth.getBalance(walletAddress);\n  const res = Web3.utils.fromWei(balance);\n  return res;\n};\n","import {\n  getSlpLiquidityInfo,\n  getSlpWalletBalance,\n  isSlpUnlocked,\n  unlockSlp,\n  // addSlpLiquidity,\n  // removeSlpLiquidity,\n} from './slpPoolApi';\nimport {\n  getClp2LiquidityInfo,\n  getClp2WalletBalance,\n  isClp2Unlocked,\n  unlockClp2,\n  // addSlpLiquidity,\n  // removeSlpLiquidity,\n} from './clp2PoolApi';\nimport {\n  getClpLiquidityInfo,\n  getClpWalletBalance,\n  isClpUnlocked,\n  unlockClp,\n  // addClpLiquidity,\n  // removeClpLiquidity,\n} from './clpPoolApi';\n\nimport {\n  addSlpLiquidity2 as addSlpLiquidity,\n  removeSlpLiquidity2 as removeSlpLiquidity,\n  addClpLiquidity2 as addClpLiquidity,\n  removeClpLiquidity2 as removeClpLiquidity,\n  addClp2Liquidity2 as addClp2Liquidity,\n  removeClp2Liquidity2 as removeClp2Liquidity,\n} from './contractTransactionApiV2'\nimport { getLpContractAddress } from '../utils';\n\n/**\n * Get liquidity info of LP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.liquidity\n * @returns {string} response.bTokenBalance\n * @returns {string} response.shares\n */\nexport const getLpLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await getSlpLiquidityInfo(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp') {\n    return await getClpLiquidityInfo(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp2') {\n    return await getClp2LiquidityInfo(chainId, poolAddress, accountAddress);\n  } else {\n    console.log(`getLpLiquidityInfo(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Add liquidity to LP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addLpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await addSlpLiquidity(chainId, poolAddress, accountAddress, amount);\n  } else if (type === 'clp') {\n    return await addClpLiquidity(chainId, poolAddress, accountAddress, amount);\n  } else if (type === 'clp2') {\n    return await addClp2Liquidity(chainId, poolAddress, accountAddress, amount);\n  } else {\n    console.log(`addLpLiquidity(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Remove liquidity to LP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeLpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await removeSlpLiquidity(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount\n    );\n  } else if (type === 'clp') {\n    return await removeClpLiquidity(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount\n    );\n  } else if (type === 'clp2') {\n    return await removeClp2Liquidity(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount\n    );\n  } else {\n    console.log(`removeLpLiquidity(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Check account is unlocked in the lp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isLpUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await isSlpUnlocked(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp') {\n    return await isClpUnlocked(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp2') {\n    return await isClp2Unlocked(chainId, poolAddress, accountAddress);\n  } else {\n    console.log(`isLpLiquidity(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Unlock the account in the lp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockLp = async (chainId, poolAddress, accountAddress) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await unlockSlp(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp') {\n    return await unlockClp(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp2') {\n    return await unlockClp2(chainId, poolAddress, accountAddress);\n  } else {\n    console.log(`unlockLp(): invalid lp type ${type}`);\n  }\n};\n\n/**\n * Get account balance in lp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string} Account balance\n */\nexport const getLpWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { type } = getLpContractAddress(chainId, poolAddress);\n  if (type === 'slp') {\n    return await getSlpWalletBalance(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp') {\n    return await getClpWalletBalance(chainId, poolAddress, accountAddress);\n  } else if (type === 'clp2') {\n    return await getClp2WalletBalance(chainId, poolAddress, accountAddress);\n  } else {\n    console.log(`getLpWalletBalance(): invalid lp type ${type}`);\n  }\n};\n","import { makeObservable, observable, action } from \"mobx\";\nimport { getContractAddressConfig, DeriEnv } from \"../lib/web3js/indexV2\";\n\nexport default class Config {\n  all = []\n\n  constructor(){\n    makeObservable(this,{\n      all : observable,\n      setAll : action\n    })\n  }\n\n  load(version){\n    const current = version && version.current;\n    let configs = getContractAddressConfig(DeriEnv.get(),current)\n    if(version){\n      configs = configs.filter(c => c.version === version.current)\n      //v2 不需要展示base token,需要合并相同的base token\n      if(version.isV2){\n        configs = configs.reduce((total,cur) => {\n          const pos = total.findIndex(c => c.symbol === cur.symbol && c.pool === cur.pool);\n          if(pos === -1 ){\n            total.push(cur)\n          }\n          return total;\n        },[])\n      }\n    }\n    this.setAll(configs)\n    return this.all;\n  }\n\n  setAll(all){\n    this.all = all;\n  }\n  \n}","const { getContractAddressConfig:getContractAddressConfig2} = require(\"../config\");\nconst { getPoolConfigList:getPoolConfigListV2} = require(\"../v2/config\")\n\nexport const getContractAddressConfig = (env = 'dev', version) => {\n  if (!version || version === '1' || version === 'v1') {\n    return getContractAddressConfig2(env)\n  } else if (version === '2' || version === 'v2') {\n    return getPoolConfigListV2(env).concat(getContractAddressConfig2(env))\n  } else {\n    throw new Error(`getPoolContractAddress: invalid version: ${version}`)\n  }\n}","import { getLiquidityInfo2 } from '../api/restApi';\nimport { getPoolLiquidity as getPoolLiquidity2, getPoolInfoApy as getPoolInfoApy2 } from '../api/databaseApi';\nimport { \n  getLiquidityInfo as getLiquidityInfoV2,\n  getPoolLiquidity as getPoolLiquidityV2,\n  getPoolInfoApy as getPoolInfoApyV2,\n } from '../v2';\n\nexport const getLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId,\n) => {\n  if (bTokenId === undefined) {\n    return getLiquidityInfo2(chainId, poolAddress, accountAddress)\n  } else {\n    return getLiquidityInfoV2(chainId, poolAddress, accountAddress, bTokenId)\n  }\n};\n\nexport const getPoolLiquidity = async (\n  chainId,\n  poolAddress,\n  bTokenId,\n) => {\n  if (bTokenId === undefined) {\n    return getPoolLiquidity2(chainId, poolAddress)\n  } else {\n    return getPoolLiquidityV2(chainId, poolAddress, bTokenId)\n  }\n};\n\nexport const getPoolInfoApy = async (chainId, poolAddress, bTokenId) => {\n  if (bTokenId === undefined) {\n    return getPoolInfoApy2(chainId, poolAddress)\n  } else {\n    return getPoolInfoApyV2(chainId, poolAddress, bTokenId)\n  }\n};","import {addLiquidity2, removeLiquidity2 } from '../api/contractTransactionApiV2';\nimport {\n  addLiquidity as addLiquidityV2,\n  removeLiquidity as removeLiquidityV2\n  // addLiquidityWithPrices as addLiquidityV2,\n  // removeLiquidityWithPrices as removeLiquidityV2,\n} from '../v2';\n\nexport const addLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n) => {\n  if (bTokenId === undefined) {\n    return addLiquidity2(chainId, poolAddress, accountAddress, amount);\n  } else {\n    return addLiquidityV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount,\n      bTokenId\n    );\n  }\n}\n\nexport const removeLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum,\n) => {\n  if (bTokenId === undefined) {\n    return removeLiquidity2(chainId, poolAddress, accountAddress, amount);\n  } else {\n    return removeLiquidityV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount,\n      bTokenId,\n      isMaximum,\n    );\n  }\n}\n","import {\n  getPositionInfo as getPositionInfo2,\n  isUnlocked as isUnlocked2,\n  isDeriUnlocked,\n  getEstimatedMargin as getEstimatedMargin2,\n  getEstimatedFee as getEstimatedFee2,\n  getEstimatedFundingRate as getEstimatedFundingRate2,\n  getEstimatedLiquidityUsed as getEstimatedLiquidityUsed2,\n  getWalletBalance as getWalletBalance2,\n} from '../api/contractQueryApi'\n\nimport {\n  getSpecification2,\n  getFundingRate2,\n  getLiquidityUsed2,\n  getFundingRateCache2,\n} from '../api/restApi'\n//import { bTokenFactory } from '../factory/contracts'\n\nimport {\n  getPositionInfo as getPositionInfoV2,\n  isUnlocked as isUnlockedV2,\n  getEstimatedMargin as getEstimatedMarginV2,\n  getEstimatedFee as getEstimatedFeeV2,\n  getEstimatedFundingRate as getEstimatedFundingRateV2,\n  getEstimatedLiquidityUsed as getEstimatedLiquidityUsedV2,\n  getSpecification as getSpecificationV2,\n  getWalletBalance as getWalletBalanceV2,\n  getFundingRate as getFundingRateV2,\n  getLiquidityUsed as getLiquidityUsedV2,\n  getFundingRateCache as getFundingRateCacheV2,\n} from '../v2'\n\n\nexport const getSpecification = async (\n  chainId,\n  poolAddress,\n  bTokenId,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getSpecification2(chainId, poolAddress)\n  } else {\n    return getSpecificationV2(chainId, poolAddress, bTokenId, symbolId)\n  }\n}\n\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress, symbolId) => {\n  if (symbolId === undefined) {\n    return getPositionInfo2(chainId, poolAddress, accountAddress)\n  } else {\n    return getPositionInfoV2(chainId, poolAddress, accountAddress, symbolId)\n  }\n}\nexport const getWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId,\n) => {\n  if (bTokenId === undefined) {\n    return getWalletBalance2(chainId, poolAddress, accountAddress)\n  } else {\n    return getWalletBalanceV2(chainId, poolAddress, accountAddress, bTokenId)\n  }\n}\n\nexport const isUnlocked = async (chainId, poolAddress, accountAddress, bTokenId) => { \n  if (accountAddress === undefined) {\n    return isDeriUnlocked(chainId, poolAddress)\n  } else if (bTokenId === undefined) {\n    return isUnlocked2(chainId, poolAddress, accountAddress)\n  } else {\n    return isUnlockedV2(chainId, poolAddress, accountAddress, bTokenId)\n  }\n}\n\nexport const getEstimatedFee = async (chainId, poolAddress, volume, symbolId) => {\n  if (symbolId === undefined) {\n    return getEstimatedFee2(chainId, poolAddress, volume)\n  } else {\n    return getEstimatedFeeV2(chainId, poolAddress, volume, symbolId)\n  }\n}\n\nexport const getEstimatedMargin = async(\n  chainId,\n  poolAddress,\n  accountAddress,\n  volume,\n  leverage,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getEstimatedMargin2(chainId, poolAddress, accountAddress, volume, leverage)\n  } else {\n    return getEstimatedMarginV2(chainId, poolAddress, accountAddress, volume, leverage, symbolId)\n  }\n}\n\nexport const getFundingRate = async (chainId, poolAddress, symbolId) => {\n  if (symbolId === undefined) {\n    return getFundingRate2(chainId, poolAddress)\n  } else {\n    return getFundingRateV2(chainId, poolAddress, symbolId)\n  }\n}\n\nexport const getEstimatedFundingRate = async (\n  chainId,\n  poolAddress,\n  newNetVolume,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getEstimatedFundingRate2(chainId, poolAddress, newNetVolume)\n  } else {\n    return getEstimatedFundingRateV2(chainId, poolAddress, newNetVolume, symbolId)\n  }\n}\n\nexport const getLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  symbolId\n) => {\n  if (symbolId === undefined) {\n    return getLiquidityUsed2(chainId, poolAddress)\n  } else {\n    return getLiquidityUsedV2(chainId, poolAddress, symbolId)\n  }\n};\n\nexport const getEstimatedLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  newNetVolume,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getEstimatedLiquidityUsed2(chainId, poolAddress, newNetVolume)\n  } else {\n    return getEstimatedLiquidityUsedV2(chainId, poolAddress, newNetVolume, symbolId)\n  }\n}\n\nexport const getFundingRateCache = async(chainId, poolAddress, symbolId) => {\n  if (symbolId === undefined) {\n    return getFundingRateCache2(chainId, poolAddress)\n  } else {\n    return getFundingRateCacheV2(chainId, poolAddress, symbolId)\n  }\n}\n","import { unlock as unlock2, unlockDeri } from '../api/contractTransactionApi';\nimport {\n  tradeWithMargin2,\n  closePosition2,\n  depositMargin2,\n  withdrawMargin2,\n} from '../api/contractTransactionApiV2';\nimport {\n  unlock as unlockV2,\n  tradeWithMargin as tradeWithMarginV2,\n  closePosition as closePositionV2,\n  depositMargin as depositMarginV2,\n  withdrawMargin as withdrawMarginV2,\n  // tradeWithMarginWithPrices as tradeWithMarginV2,\n  // depositMarginWithPrices as depositMarginV2,\n  // withdrawMarginWithPrices as withdrawMarginV2,\n  // closePositionWithPrices as closePositionV2,\n} from '../v2';\n\nexport const unlock = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  bTokenId\n) => {\n  if (accountAddress === undefined) {\n    return unlockDeri(chainId, poolAddress);\n  } else if (bTokenId === undefined) {\n    return unlock2(chainId, poolAddress, accountAddress);\n  } else {\n    return unlockV2(chainId, poolAddress, accountAddress, bTokenId);\n  }\n};\n\nexport const depositMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId\n) => {\n  if (bTokenId === undefined) {\n    return depositMargin2(chainId, poolAddress, accountAddress, amount);\n  } else {\n    return depositMarginV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount,\n      bTokenId\n    );\n  }\n};\n\nexport const withdrawMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount,\n  bTokenId,\n  isMaximum\n) => {\n  if (bTokenId === undefined) {\n    return withdrawMargin2(chainId, poolAddress, accountAddress, amount);\n  } else {\n    return withdrawMarginV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      amount,\n      bTokenId,\n      isMaximum\n    );\n  }\n};\n\nexport const tradeWithMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  symbolId\n) => {\n  if (symbolId === undefined) {\n    return tradeWithMargin2(chainId, poolAddress, accountAddress, newVolume);\n  } else {\n    return tradeWithMarginV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      newVolume,\n      symbolId\n    );\n  }\n};\n\nexport const closePosition = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  symbolId\n) => {\n  if (symbolId === undefined) {\n    return closePosition2(chainId, poolAddress, accountAddress);\n  } else {\n    return closePositionV2(chainId, poolAddress, accountAddress, symbolId);\n  }\n};\n","\nimport {getTradeHistory2} from '../api/restApi';\nimport { \n  getTradeHistory as getTradeHistoryV2\n } from '../v2';\n\nexport const getTradeHistory = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  symbolId,\n) => {\n  if (symbolId === undefined) {\n    return getTradeHistory2(chainId, poolAddress, accountAddress);\n  } else {\n    return getTradeHistoryV2(\n      chainId,\n      poolAddress,\n      accountAddress,\n      symbolId,\n    );\n  }\n}","import { getOracleConfig } from '../config/oracle';\nimport { getPoolConfig2 } from '../config/pool';\nimport { oracleFactory } from '../factory';\nimport { normalizeChainId } from './validate';\nimport { DeriEnv } from '../../config';\n\nexport const getOracleUrl = (poolAddress, symbolId) => {\n  const env = DeriEnv.get();\n  const { symbol } = getPoolConfig2(poolAddress, null, symbolId);\n  const addSymbolParam = (url, symbol = 'BTCUSD') => `${url}?symbol=${symbol}`;\n  if (env === 'prod' || env === 'production') {\n    // for production\n    if (symbol) {\n      return addSymbolParam('https://oracle4.deri.finance/price', symbol);\n    }\n    return 'https://oracle4.deri.finance/price';\n  } else {\n    if (symbol) {\n      return addSymbolParam('https://oracle4.deri.finance/price', symbol);\n    }\n    // for test\n    return 'https://oracle4.deri.finance/price';\n  }\n};\n\nexport const getOracleInfo = async (poolAddress, symbolId) => {\n  let url = getOracleUrl(poolAddress, symbolId);\n  //console.log('oracle url', url);\n  let retry = 2;\n  let res;\n  while (retry > 0) {\n    res = await fetch(url, { mode: 'cors', cache: 'no-cache' });\n    if (res.ok) {\n      break;\n    }\n    retry -= 1;\n  }\n  if (retry === 0 && !res) {\n    throw new Error(`fetch oracle info error: exceed max retry(2).`);\n  }\n  return await res.json();\n};\n\n// export const getOraclePrice = async (poolAddress, symbolId) => {\n//   const responseJson = await getOracleInfo(poolAddress, symbolId);\n//   let price = responseJson.price;\n//   if (!price) {\n//     price = '0';\n//   }\n//   return deriToNatural(responseJson.price).toString();\n// };\n\nexport const getOraclePrice = async (chainId, symbol) => {\n  chainId = normalizeChainId(chainId);\n  const config = getOracleConfig(chainId, symbol);\n  if (config && config.address) {\n    if (!config.decimal) {\n      throw new Error('getOraclePrice: decimal is empty', config.decimal);\n    }\n    const oracle = oracleFactory(\n      chainId,\n      config.address,\n      symbol,\n      config.decimal,\n    );\n    return await oracle.getPrice();\n  }\n};\n","import { bg, getDailyBlockNumber } from '../utils';\n\nexport const calculateLiquidityUsed = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  poolMarginRatio\n) => {\n  return bg(\n    ((tradersNetVolume * price * multiplier) / liquidity) * poolMarginRatio\n  ).abs();\n}\n\nexport const calculateFundingRate = (\n  tradersNetVolume,\n  price,\n  multiplier,\n  liquidity,\n  fundingRateCoefficient\n) => {\n  return ((tradersNetVolume * price * multiplier) / liquidity) *\n  fundingRateCoefficient;\n}\n\nexport const processFundingRate = (chainId, fundingRate) => {\n  const annualBlockCount = getDailyBlockNumber(chainId);\n  //console.log(annualBlockCount);\n  return bg(fundingRate).times(annualBlockCount);\n};\n","import { bg, max, min } from '../utils';\n\nexport * from './fundingRate';\n\nexport const calculateShareValue = (lTokenTotalSupply, liquidity) =>\n  lTokenTotalSupply.eq(0) ? bg(0) : liquidity.div(lTokenTotalSupply);\nexport const calculateMaxRemovableShares = (\n  lTokenBalance,\n  lTokenTotalSupply,\n  liquidity,\n  tradersNetVolume,\n  tradersNetCost,\n  multiplier,\n  minPoolMarginRatio,\n  price\n) => {\n  const shareValue = calculateShareValue(lTokenTotalSupply, liquidity);\n  const value = tradersNetVolume.times(price).times(multiplier);\n  const removable = liquidity\n    .plus(tradersNetCost)\n    .minus(value)\n    .minus(value.abs().times(minPoolMarginRatio));\n  const shares = max(min(lTokenBalance, removable.div(shareValue)), bg(0));\n  return shares;\n};\n\nexport const calculateEntryPrice = (volume, cost, multiplier) =>\n  volume.eq(0) ? bg(0) : cost.div(volume).div(multiplier);\n\nexport const calculateMarginHeld = (\n  price,\n  volume,\n  multiplier,\n  minInitialMarginRatio\n) => {\n  return volume.abs().times(price).times(multiplier).times(minInitialMarginRatio)\n};\n\nexport const calculatePnl = (price, volume, multiplier, cost) => {\n  return volume.times(price).times(multiplier).minus(cost);\n}\n\nexport const calculateMaxWithdrawMargin = (\n  price,\n  volume,\n  margin,\n  cost,\n  multiplier,\n  minInitialMarginRatio\n) => {\n  if (volume.eq(0)) {\n    return margin;\n  }\n  const held = calculateMarginHeld(\n    price,\n    volume,\n    multiplier,\n    minInitialMarginRatio\n  );\n  const pnl = calculatePnl(price, volume, multiplier, cost);\n  const withdrawable = max(margin.plus(pnl).minus(held.times(1.02)), bg(0));\n  return withdrawable;\n};\n\nexport const calculateLiquidationPrice = (\n  volume,\n  margin,\n  cost,\n  multiplier,\n  minMaintenanceMarginRatio\n) => {\n  const tmp = cost.minus(margin).div(volume).div(multiplier);\n  let res = volume.gt(0)\n    ? tmp.div(bg(1).minus(minMaintenanceMarginRatio))\n    : tmp.div(bg(1).plus(minMaintenanceMarginRatio));\n  res = max(res, bg(0));\n  return res;\n};\n\nexport const isOrderValid = (\n  price,\n  margin,\n  volume,\n  liquidity,\n  tradersNetVolume,\n  multiplier,\n  minPoolMarginRatio,\n  minInitialMarginRatio,\n  newVolume,\n  amount\n) => {\n  const minMargin = volume\n    .plus(newVolume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .times(minInitialMarginRatio);\n  const poolMaxVolume = liquidity\n    .div(minPoolMarginRatio)\n    .div(price)\n    .div(multiplier);\n  if (margin.plus(amount).gte(minMargin)) {\n    if (\n      newVolume.lte(poolMaxVolume.minus(tradersNetVolume)) &&\n      newVolume.gte(poolMaxVolume.negated().minus(tradersNetVolume))\n    ) {\n      return { success: true };\n    }\n    return { success: false, message: 'Pool insufficient liquidity' };\n  }\n  return { success: false, message: 'Trader insufficient margin' };\n};\n","import {\n  bTokenFactory,\n  lTokenFactory,\n  pTokenFactory,\n  perpetualPoolFactory,\n  miningVaultPoolFactory,\n  miningVaultRouterFactory,\n  wormholeFactory,\n  deriFactory,\n  databaseWormholeFactory,\n} from '../factory/contracts';\nimport { getUserInfoAll, getUserInfoAllForAirDrop } from './databaseApi';\nimport {\n  getPoolContractAddress,\n  getMiningVaultContractAddress,\n  getBTCUSDPrice,\n  bg,\n  naturalToDeri,\n  BigNumber,\n  format,\n  getDeriContractAddress,\n} from '../utils';\nimport {\n  getMiningVaultRouterContractAddress\n} from '../config'\nimport {\n  calculateMaxRemovableShares,\n  calculateMaxWithdrawMargin,\n  isOrderValid,\n} from '../calculation';\n\n/**\n * Unlock the account in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlock = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Deposit margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string|number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const depositMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  return await pPool.depositMargin(accountAddress, naturalToDeri(amount));\n};\n\n/**\n * Withdraw margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const withdrawMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\n  const { multiplier, minInitialMarginRatio } = await pPool.getParameters();\n\n  const maxWithdrawMargin = calculateMaxWithdrawMargin(\n    price,\n    volume,\n    margin,\n    cost,\n    multiplier,\n    minInitialMarginRatio\n  );\n  if (bg(amount).lte(maxWithdrawMargin)) {\n    try {\n      const tx = await pPool._transactPool(\n        'withdrawMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(amount)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'amount exceeds allowed' };\n  }\n  return res;\n};\n\n/**\n * Mint in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mint = async (chainId, poolAddress, accountAddress, amount) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  //const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const decimals = await bToken.decimals();\n  const BONE = 10 ** decimals;\n  amount = format(new BigNumber(amount).multipliedBy(BONE));\n  let res;\n  try {\n    const tx = await bToken._transact('mint', [amount], accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Add liquidity in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  let res;\n  try {\n    const tx = await pPool._transactPool(\n      'addLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n      [naturalToDeri(amount)],\n      accountAddress\n    );\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} shares\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares\n) => {\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\n  const {\n    liquidity,\n    tradersNetVolume,\n    tradersNetCost,\n  } = await pPool.getStateValues();\n\n  const maxRemovableShares = calculateMaxRemovableShares(\n    lTokenBalance,\n    lTokenTotalSupply,\n    liquidity,\n    tradersNetVolume,\n    tradersNetCost,\n    multiplier,\n    minPoolMarginRatio,\n    price\n  );\n  let res;\n  if (bg(shares).lte(maxRemovableShares)) {\n    try {\n      const tx = await pPool._transactPool(\n        'removeLiquidity(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(shares)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'shares exceeds allowed' };\n  }\n  return res;\n};\n\n/**\n * Trade with margin in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} newVolume\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const tradeWithMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    minInitialMarginRatio,\n    minPoolMarginRatio,\n  } = await pPool.getParameters();\n  const { liquidity, tradersNetVolume } = await pPool.getStateValues();\n  const { volume, margin } = await pToken.getPositionInfo(accountAddress);\n  let res;\n  const orderValidation = isOrderValid(\n    price,\n    margin,\n    volume,\n    liquidity,\n    tradersNetVolume,\n    multiplier,\n    minPoolMarginRatio,\n    minInitialMarginRatio,\n    bg(newVolume),\n    bg(amount)\n  );\n  if (orderValidation.success) {\n    try {\n      const tx = await pPool._transactPool(\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(newVolume), naturalToDeri(amount)],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: orderValidation.message };\n  }\n  return res;\n};\n\n/**\n * Close position in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const closePosition = async (chainId, poolAddress, accountAddress) => {\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  let { volume } = await pToken.getPositionInfo(accountAddress);\n  volume = volume.negated();\n  let res;\n  if (!volume.eq(0)) {\n    try {\n      const tx = await pPool._transactPool(\n        'tradeWithMargin(int256,uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [naturalToDeri(volume), '0'],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'no position to close' };\n  }\n  return res;\n};\n\n/**\n * Mint DToken in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintDToken = async (chainId, accountAddress) => {\n  let res;\n  const userInfo = await getUserInfoAll(accountAddress);\n  const amount = naturalToDeri(userInfo.amount);\n  const { deadline } = userInfo;\n  const { nonce } = userInfo;\n  const { v } = userInfo;\n  const { r } = userInfo;\n  const { s } = userInfo;\n  if (userInfo.valid) {\n    const miningVaultAddress = getMiningVaultContractAddress(chainId);\n    if (miningVaultAddress) {\n      const miningVault = miningVaultPoolFactory(chainId, miningVaultAddress);\n      //miningVault.setAccount(accountAddress);\n      try {\n        const tx = await miningVault.mintDToken(\n          accountAddress,\n          amount,\n          deadline,\n          nonce,\n          v,\n          r,\n          s\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the mining vault address in chain ${chainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n\n/**\n * freeze Deri in current wormhole pool to the specified chain\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @param {string} toChainId\n * @param {string} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const freeze = async (chainId, accountAddress, toChainId, amount) => {\n  const { wormholeAddress } = getDeriContractAddress(chainId);\n  const wormhole = wormholeFactory(chainId, wormholeAddress);\n  //wormhole.setAccount(accountAddress);\n  let res;\n  try {\n    const tx = await wormhole.freeze(accountAddress, amount, toChainId);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Mint Deri in wormhole pool\n * @async\n * @method\n * @param {string} toChainId\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintDeri = async (toChainId, accountAddress) => {\n  let res;\n  const databaseWormhole = databaseWormholeFactory(true);\n  // const userInfo = await getUserInfoAll(accountAddress);\n  const userInfo = await databaseWormhole.signature(accountAddress);\n  // console.log(userInfo)\n  const { amount } = userInfo;\n  const { fromChainId } = userInfo;\n  const { fromWormhole } = userInfo;\n  const fromNonce = userInfo.nonce;\n  const { v } = userInfo;\n  const { r } = userInfo;\n  const { s } = userInfo;\n  if (userInfo.valid) {\n    const { wormholeAddress } = getDeriContractAddress(toChainId);\n    if (wormholeAddress) {\n      const wormhole = wormholeFactory(toChainId, wormholeAddress);\n      //wormhole.setAccount(accountAddress);\n      try {\n        const tx = await wormhole.mintDeri(\n          accountAddress,\n          amount,\n          fromChainId,\n          fromWormhole,\n          fromNonce,\n          v,\n          r,\n          s\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the wormhole address in chain ${fromChainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n\n/**\n * Unlock the account in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockDeri = async (chainId, accountAddress) => {\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\n  let res;\n  try {\n    const tx = await deri.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (error) {\n    res = { success: false, error };\n  }\n  return res;\n};\n\n/**\n * Mint Airdrop in the perpertual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {boolean} response.[error] - error message when request failed\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const mintAirdrop = async (chainId, accountAddress) => {\n  let res;\n  const userInfo = await getUserInfoAllForAirDrop(accountAddress);\n  const amount = naturalToDeri(userInfo.amount).toString();\n  const { deadline, nonce, v1, r1, s1, v2, r2, s2 } = userInfo;\n  if (userInfo.valid) {\n    const miningVaultAddress = getMiningVaultRouterContractAddress(chainId);\n    // console.log(\"miningVaultAddress\", miningVaultAddress)\n    // console.log(\"userInfo\", userInfo)\n    if (miningVaultAddress) {\n      const miningVaultRouter = miningVaultRouterFactory(\n        chainId,\n        miningVaultAddress\n      );\n      try {\n        const tx = await miningVaultRouter.mint(\n          accountAddress,\n          amount,\n          deadline,\n          nonce,\n          v1,\n          r1,\n          s1,\n          v2,\n          r2,\n          s2\n        );\n        res = { success: true, transaction: tx };\n      } catch (err) {\n        res = { success: false, error: err };\n      }\n    } else {\n      res = {\n        success: false,\n        error: `cannot find the mining vault router address in chain ${chainId}`,\n      };\n    }\n  } else {\n    res = {\n      success: false,\n      error: 'userinfo is not valid',\n    };\n  }\n  return res;\n};\n","import { databaseFactory, databaseAirdropFactory } from '../factory/contracts';\nimport {\n  toChecksumAddress,\n  getNetworkName,\n  deriToString,\n  deriToBool,\n  deriToNatural,\n  getPoolContractAddress,\n} from '../utils';\n// import { getLiquidityUsed } from \"./contractApi\";\n\nexport const getUserInfo = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.chainId`,\n      `${userAddress}.claim.amount`,\n      `${userAddress}.claim.deadline`,\n      `${userAddress}.claim.nonce`,\n      `${userAddress}.claim.v`,\n      `${userAddress}.claim.r`,\n      `${userAddress}.claim.s`,\n      `${userAddress}.claim.valid`,\n    ])\n    .catch((err) => console.log('getUserInfo', err));\n  if (res) {\n    const [chainId, amount, deadline, nonce, v, r, s, valid] = res;\n    return {\n      chainId: deriToString(chainId),\n      amount: deriToNatural(amount).toString(),\n      deadline: deriToString(deadline),\n      nonce: deriToString(nonce),\n      v: deriToString(v),\n      r,\n      s,\n      valid: deriToBool(valid),\n    };\n  }\n};\n\nexport const getUserInfoHarvest = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.harvest.lp`,\n      `${userAddress}.claim.harvest.trade`,\n    ])\n    .catch((err) => console.log('getUserInfoHarvest', err));\n  if (res) {\n    const [harvestLp, harvestTrade] = res;\n    return {\n      lp: deriToNatural(harvestLp).toString(),\n      trade: deriToNatural(harvestTrade).toString(),\n    };\n  }\n};\n\nexport const getUserInfoTotal = async (userAddress) => {\n  const db = databaseFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([`${userAddress}.claim.total`])\n    .catch((err) => console.log('getUserInfoTotal', err));\n  if (res) {\n    const [total] = res;\n    return {\n      total: deriToNatural(total).toString(),\n    };\n  }\n};\n\n/**\n * Get user claim info from database\n * @async\n * @method\n * @param {string} userAddress - account address\n * @returns {Object} response\n * @returns {string} resposne.chainId\n * @returns {BigNumber} response.amount\n * @returns {string} response.deadline\n * @returns {string} response.nonce\n * @returns {string} response.v\n * @returns {string} response.r\n * @returns {string} response.s\n * @returns {bool} response.valid\n * @returns {BigNumber} response.lp\n * @returns {BigNumber} response.trade\n * @returns {string} response.total\n */\nexport const getUserInfoAll = async (userAddress) => {\n  const userInfo = await getUserInfo(userAddress);\n  const userInfoHarvest = await getUserInfoHarvest(userAddress);\n  const userInfoTotal = await getUserInfoTotal(userAddress);\n  return Object.assign(userInfo, userInfoHarvest, userInfoTotal);\n};\n\n/**\n * Get pool liquidity\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.liquidity\n * @returns {symbol} response.symbol\n */\nexport const getPoolLiquidity = async (chainId, poolAddress) => {\n  // use the dev database\n  const db = databaseFactory();\n  try {\n    const res = await db\n      .getValues([`${chainId}.${poolAddress}.liquidity`])\n      .catch((err) => console.log('getPoolLiquidity', err));\n    const { symbol } = getPoolContractAddress(chainId, poolAddress)\n    if (res) {\n      const [liquidity] = res;\n      return {\n        liquidity: deriToNatural(liquidity).toString(),\n        symbol,\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get pool apy\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getPoolInfoApy = async (chainId, poolAddress) => {\n  const db = databaseFactory(true);\n  //const [poolAddress] = getPoolContractAddress(chainId, bSymbol);\n  //console.log('getPoolInfoApy', chainId, poolAddress);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, volume1h, volume24h] = res;\n      return {\n        apy: deriToNatural(apy).toString(),\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get apy of the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getLpPoolInfoApy = async (chainId, poolAddress) => {\n  const db = databaseFactory(true);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.apy`,\n        `${poolNetwork}.${poolAddress}.apy2`,\n        `${poolNetwork}.${poolAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getPoolInfoApy', err));\n    if (res) {\n      const [apy, apy2, volume1h, volume24h] = res;\n      return {\n        apy: deriToNatural(apy).toString(),\n        apy2: deriToNatural(apy2).toString(),\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get apy of the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.apy\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\n// export const getClpPoolInfoApy = async (chainId, poolAddress) => {\n//   const db = databaseFactory(true);\n//   try {\n//     const poolNetwork = getNetworkName(chainId);\n//     const res = await db\n//       .getValues([\n//         `${poolNetwork}.${poolAddress}.apy`,\n//         `${poolNetwork}.${poolAddress}.apy2`,\n//         `${poolNetwork}.${poolAddress}.volume.1h`,\n//         `${poolNetwork}.${poolAddress}.volume.24h`,\n//       ])\n//       .catch((err) => console.log('getPoolInfoApy', err));\n//     if (res) {\n//       const [apy, apy2, volume1h, volume24h] = res;\n//       return {\n//         apy: deriToNatural(apy).toString(),\n//         apy2: deriToNatural(apy2).toString(),\n//         volume1h: deriToNatural(volume1h).toString(),\n//         volume24h: deriToNatural(volume24h).toString(),\n//       };\n//     }\n//   } catch (err) {\n//     console.log(err);\n//   }\n// };\n\n/**\n * Get user info of the pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} userAddress\n * @returns {Object} response\n * @returns {string} response.volume1h\n * @returns {string} response.volume24h\n */\nexport const getUserInfoInPool = async (chainId, poolAddress, userAddress) => {\n  const db = databaseFactory(true);\n  //const {poolAddress} = getPoolContractAddress(chainId, poolAddress);\n  userAddress = toChecksumAddress(userAddress);\n  try {\n    const poolNetwork = getNetworkName(chainId);\n    const res = await db\n      .getValues([\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.1h`,\n        `${poolNetwork}.${poolAddress}.${userAddress}.volume.24h`,\n      ])\n      .catch((err) => console.log('getUserInfoInPool', err));\n    if (res) {\n      const [volume1h, volume24h] = res;\n      return {\n        volume1h: deriToNatural(volume1h).toString(),\n        volume24h: deriToNatural(volume24h).toString(),\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const getUserInfoAllForAirDrop = async (userAddress) => {\n  const db = databaseAirdropFactory(true);\n  userAddress = toChecksumAddress(userAddress);\n  const res = await db\n    .getValues([\n      `${userAddress}.claim.chainId`,\n      `${userAddress}.claim.amount`,\n      `${userAddress}.claim.deadline`,\n      `${userAddress}.claim.nonce`,\n      `${userAddress}.claim.v1`,\n      `${userAddress}.claim.r1`,\n      `${userAddress}.claim.s1`,\n      `${userAddress}.claim.v2`,\n      `${userAddress}.claim.r2`,\n      `${userAddress}.claim.s2`,\n      `${userAddress}.claim.valid`,\n      // `${userAddress}.claim.harvest.lp`,\n      // `${userAddress}.claim.harvest.trade`,\n      // `${userAddress}.claim.total`,\n    ])\n    .catch((err) => console.log('getUserInfoAllForAirDrop', err));\n  if (res) {\n    const [\n      chainId,\n      amount,\n      deadline,\n      nonce,\n      v1,\n      r1,\n      s1,\n      v2,\n      r2,\n      s2,\n      valid,\n      // harvestLp,\n      // harvestTrade,\n      // total,\n    ] = res;\n    return {\n      chainId: deriToString(chainId),\n      amount: deriToNatural(amount).toString(),\n      deadline: deriToString(deadline),\n      nonce: deriToString(nonce),\n      v1: deriToString(v1),\n      r1,\n      s1,\n      v2: deriToString(v2),\n      r2,\n      s2,\n      valid: deriToBool(valid),\n      // lp: deriToNatural(harvestLp),\n      // trade: deriToNatural(harvestTrade),\n      // total: deriToString(total),\n    };\n  }\n};\n","import {\n  getPoolContractAddress,\n  //naturalToDeri,\n  deriToNatural,\n  hexToString,\n  toChecksumAddress,\n  hexToNumber,\n  hexToNumberString,\n} from '../utils';\nimport { databaseFactory, perpetualPoolFactory } from '../factory/contracts';\n\nconst processTradeEvent = async (\n  perpetualPool,\n  bTokenSymbol,\n  info,\n  blockNumber,\n  txHash,\n  multiplier,\n  feeRatio\n) => {\n  const tradeVolume = deriToNatural(info.tradeVolume);\n  const timeStamp = await perpetualPool._getTimeStamp(blockNumber);\n\n  const direction = tradeVolume.gt(0) ? 'LONG' : 'SHORT';\n  const price = deriToNatural(info.price);\n  const time = `${+timeStamp.timestamp}000`;\n  const transactionFee = perpetualPool._calculateFee(\n    tradeVolume,\n    price,\n    multiplier,\n    feeRatio\n  );\n  const notional = tradeVolume.abs().times(price).times(multiplier);\n  const volume = tradeVolume.abs();\n\n  const res = {\n    direction,\n    baseToken: bTokenSymbol,\n    price: price.toString(),\n    notional: notional.toString(),\n    volume: volume.toString(),\n    transactionFee: transactionFee.toString(),\n    transactionHash: txHash.toString(),\n    time,\n  };\n  // console.log(JSON.stringify(res))\n  return res;\n};\n\nconst processLiquidateEvent = async (\n  info,\n  txHash,\n  bTokenSymbol,\n  multiplier\n) => {\n  // console.log(info)\n  const volume = deriToNatural(info.volume).abs();\n  // const cost = deriToNatural(info.cost).abs()\n  // const margin = info.margin\n  const timestamp = `${info.timestamp}000`;\n  const price = deriToNatural(info.price);\n  // const liquidator = info.liquidator\n  // const reward = info.reward\n  const national = volume.times(price).times(multiplier);\n  // const transactionFee = volume.times(price).times(multiplier).times(feeRatio)\n\n  const res = {\n    direction: 'Liquidation',\n    baseToken: bTokenSymbol,\n    price: price.toString(),\n    notional: national.toString(),\n    volume: volume.toString(),\n    transactionFee: '0',\n    transactionHash: txHash.toString(),\n    time: timestamp,\n    // cost: naturalToDeri(cost).toString(),\n    // margin: margin.toString(),\n    // liquidator,\n    // reward: reward.toString(),\n  };\n  return res;\n};\n\n/**\n * Get the user trade history\n * @async\n * @method\n * @param {string} chainId - Chain Id\n * @param {string} poolAddress - Pool Address\n * @param {string} accountAddress - Account Address\n * @returns {Object[]} response\n * @returns {string} response[].direction\n * @returns {string} response[].baseToken\n * @returns {string} response[].price\n * @returns {string} response[].notional\n * @returns {string} response[].volume\n * @returns {string} response[].transactionFee\n * @returns {string} response[].time - Timestamp of the trade\n */\n\nexport const getTradeHistory = async (chainId, poolAddress, accountAddress) => {\n  const keyMeta = `${chainId}.${poolAddress}`;\n  const db = databaseFactory();\n  let [tradeFromBlock, liquidateFromBlock] = await Promise.all([\n    db.getValues([`${keyMeta}.tradeHistoryBlock`]),\n    db.getValues([`${keyMeta}.liquidateHistoryBlock`]),\n  ]);\n  tradeFromBlock = hexToNumber(tradeFromBlock[0]);\n  liquidateFromBlock = hexToNumber(liquidateFromBlock[0]);\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\n    // console.log(tradeFromBlock, liquidateFromBlock)\n    const [\n      tradeHistoryOffline,\n      tradeHistoryOnline,\n      liquidateHistoryOffline,\n      liquidateHistoryOnline,\n    ] = await Promise.all([\n      getTradeHistoryOffline(chainId, poolAddress, accountAddress),\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOffline(chainId, poolAddress, accountAddress),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline\n      .concat(liquidateHistoryOnline)\n      .concat(tradeHistoryOffline)\n      .concat(liquidateHistoryOffline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  } else {\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\n    tradeFromBlock = parseInt(initialBlock);\n    liquidateFromBlock = parseInt(initialBlock);\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  }\n};\n\n// get trade history combined from cache and from online pull\nconst getTradeHistoryOffline = async (chainId, poolAddress, accountAddress) => {\n  // console.log(chainId, poolAddress, accountAddress)\n  let result = [];\n  // use dev database\n  const db = databaseFactory();\n  const keyBlock = `${chainId}.${poolAddress}.tradeHistoryBlock`;\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\n    accountAddress\n  )}.trade`;\n  //const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const [res] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const count = hexToNumber(res);\n  try {\n    if (count && count >= 0) {\n      let keyArray = [];\n      for (let i = count; i > 0; i--) {\n        const key = `${keyMeta}.${i.toString()}`;\n        keyArray = keyArray.concat([\n          `${key}.direction`,\n          `${key}.baseToken`,\n          `${key}.price`,\n          `${key}.notional`,\n          `${key}.volume`,\n          `${key}.transactionFee`,\n          `${key}.transactionHash`,\n          `${key}.time`,\n        ]);\n      }\n      // console.log(keyArray)\n      const tradeHistoryLength = keyArray.length / 8;\n      // console.log(`trade history length: ${tradeHistoryLength}`)\n      const resp = await db.getValues(keyArray);\n      for (let i = 0; i < tradeHistoryLength; i++) {\n        const indexBase = i * 8;\n        //console.log(resp[indexBase + 6].trim());\n        const item = {\n          direction: hexToString(resp[indexBase]).trim(),\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\n          price: deriToNatural(resp[indexBase + 2]).toString(),\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\n          transactionHash: resp[indexBase + 6],\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\n        };\n        result.push(item);\n      }\n    } else {\n      result = [];\n    }\n  } catch (err) {\n    console.log(err);\n    result = [];\n  }\n  return result;\n};\n\n// get trade history online from the Block number\nexport const getTradeHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  fromBlock\n) => {\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\n  // console.log(poolAddr, bTokenAddress);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  //perpetualPool.setAccount(accountAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  /// let { initialBlock:fromBlock} = getPoolContractAddress(chainId, poolAddress)\n  fromBlock = parseInt(fromBlock);\n  const filters = { owner: accountAddress };\n  const events = await perpetualPool._getPastEvents(\n    'Trade',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n  const {\n    multiplier,\n    feeRatio,\n    minInitialMarginRatio,\n  } = await perpetualPool.getParameters();\n\n  const result = [];\n  // console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    // const info = item.returnValues;\n    const res = await processTradeEvent(\n      perpetualPool,\n      bTokenSymbol,\n      item.returnValues,\n      item.blockNumber,\n      item.transactionHash,\n      multiplier,\n      feeRatio,\n      minInitialMarginRatio\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\n// get liquidate history online from the Block number\nexport const getLiquidateHistoryOnline = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  fromBlock\n) => {\n  const { bTokenSymbol } = getPoolContractAddress(chainId, poolAddress);\n  // console.log(poolAddr, bTokenAddress);\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n  //perpetualPool.setAccount(accountAddress);\n  const toBlock = await perpetualPool._getBlockInfo('latest');\n  fromBlock = parseInt(fromBlock);\n  const filters = { owner: accountAddress };\n  const events = await perpetualPool._getPastEvents(\n    'Liquidate',\n    filters,\n    fromBlock,\n    toBlock.number\n  );\n  const { multiplier } = await perpetualPool.getParameters();\n\n  const result = [];\n  // console.log(\"events length:\", events.length);\n  for (let i = 0; i < events.length; i++) {\n    const item = events[i];\n    // const info = item.returnValues;\n    const res = await processLiquidateEvent(\n      item.returnValues,\n      item.transactionHash,\n      bTokenSymbol,\n      multiplier\n    );\n    result.unshift(res);\n  }\n  return result;\n};\n\n// get trade history combined from cache and from online pull\nconst getLiquidateHistoryOffline = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  let result = [];\n  // use dev database\n  const db = databaseFactory();\n  const keyBlock = `${chainId}.${poolAddress}.liquidateHistoryBlock`;\n  const keyMeta = `${chainId}.${poolAddress}.${toChecksumAddress(\n    accountAddress\n  )}.liquidate`;\n  //const [res, fromBlock] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const [res] = await db.getValues([`${keyMeta}.count`, keyBlock]);\n  const count = hexToNumber(res);\n  try {\n    if (count && count >= 0) {\n      let keyArray = [];\n      for (let i = count; i > 0; i--) {\n        const key = `${keyMeta}.${i.toString()}`;\n        keyArray = keyArray.concat([\n          `${key}.direction`,\n          `${key}.baseToken`,\n          `${key}.price`,\n          `${key}.notional`,\n          `${key}.volume`,\n          `${key}.transactionFee`,\n          `${key}.transactionHash`,\n          `${key}.time`,\n        ]);\n      }\n      // console.log(keyArray)\n      const liquidateHistoryLength = keyArray.length / 8;\n      const resp = await db.getValues(keyArray);\n      for (let i = 0; i < liquidateHistoryLength; i++) {\n        const indexBase = i * 8;\n        const item = {\n          direction: hexToString(resp[indexBase]).trim(),\n          baseToken: hexToString(resp[indexBase + 1]).trim(),\n          price: deriToNatural(resp[indexBase + 2]).toString(),\n          notional: deriToNatural(resp[indexBase + 3]).toString(),\n          volume: deriToNatural(resp[indexBase + 4]).toString(),\n          transactionFee: deriToNatural(resp[indexBase + 5]).toString(),\n          transactionHash: resp[indexBase + 6],\n          time: hexToNumberString(resp[indexBase + 7]).toString(),\n        };\n        result.push(item);\n      }\n    } else {\n      result = [];\n    }\n  } catch (err) {\n    console.log(err);\n    result = [];\n  }\n  return result;\n};\n","// const\nimport { getRestServerConfig, DeriEnv } from '../config';\nimport { bg, getPoolContractAddress, deriToNatural } from '../utils';\nimport {\n  getLiquidateHistoryOnline,\n  getTradeHistoryOnline,\n} from './tradeHistoryApi';\n\nconst getHttpBase = () => {\n  return getRestServerConfig(DeriEnv.get());\n};\n\nconst fetchJson = async (url) => {\n  const resp = await fetch(url);\n  return await resp.json();\n};\n\nexport const fetchRestApi = async(path) => {\n  return await fetchJson(`${getHttpBase()}${path}`);\n};\n\n/**\n * Get specification from REST API, please refer {@link getSpecification}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getSpecification2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(`${getHttpBase()}/specification/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get funding rate from REST API, please refer {@link getFundingRate}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getFundingRate2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(`${getHttpBase()}/funding_rate/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity used from REST API, please refer {@link getLiquidityUsed}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getLiquidityUsed2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(`${getHttpBase()}/liquidity_used/${poolAddress}`);\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get funding rate cache from REST API, it used to 'fundingRateCache.update(chainId, poolAddress, result)'\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object}\n */\nexport const getFundingRateCache2 = async (chainId, poolAddress) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/funding_rate_cache/${poolAddress}`\n  );\n  if (res && res.success) {\n    let result = res.data;\n    result.price = bg(result.price);\n    result.fundingRate = bg(result.fundingRate);\n    result.liquidityUsed = bg(result.liquidityUsed);\n    return result;\n  }\n  return res;\n};\n\n/**\n * Get position info from REST API, please refer {@link getPositionInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getPositionInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/position_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity info from REST API, please refer {@link getLiquidityInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance from REST API, please refer {@link getWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get liquidity of the slp pool from REST API, please refer {@link getSlpLiquidityInfo}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getSlpLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/slp_liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the slp pool from REST API, please refer {@link getSlpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getSlpWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/slp_wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the clp pool from REST API, please refer {@link getClpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getClpLiquidityInfo2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/clp_liquidity_info/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the clp pool from REST API, please refer {@link getSlpWalletBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getClpWalletBalance2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/clp_wallet_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get balance of the deri pool from REST API, please refer {@link getDeriBalance}\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getDeriBalance2 = async (chainId, poolAddress, accountAddress) => {\n  const res = await fetchJson(\n    `${getHttpBase()}/deri_balance/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    return res.data;\n  }\n  return res;\n};\n\n/**\n * Get the user trade history from REST API, please refer {@link getTradeHistory}\n * @async\n * @method\n * @param {string} chainId - Chain Id\n * @param {string} poolAddress - Pool Address\n * @param {string} accountAddress - Account Address\n * @returns {Object[]} response\n */\nexport const getTradeHistory2 = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  let tradeFromBlock, liquidateFromBlock, tradeHistory;\n  const res = await fetchJson(\n    `${getHttpBase()}/trade_history/${chainId}/${poolAddress}/${accountAddress}`\n  );\n  if (res && res.success) {\n    tradeFromBlock = parseInt(res.data.tradeHistoryBlock);\n    liquidateFromBlock = parseInt(res.data.liquidateHistoryBlock);\n    tradeHistory = res.data.tradeHistory;\n  }\n  tradeHistory = tradeHistory.filter((i) => i).map((i) => {\n    return {\n      direction: i.direction.trim(),\n      baseToken: i.baseToken.trim(),\n      price: deriToNatural(i.price).toString(),\n      notional: deriToNatural(i.notional).toString(),\n      volume: deriToNatural(i.volume).toString(),\n      transactionFee: deriToNatural(i.transactionFee).toString(),\n      transactionHash: i.transactionHash,\n      time: i.time.toString(),\n    };\n  });\n  if (tradeFromBlock !== 0 && liquidateFromBlock !== 0) {\n    // console.log(tradeFromBlock, liquidateFromBlock)\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline\n      .concat(liquidateHistoryOnline)\n      .concat(tradeHistory);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  } else {\n    const { initialBlock } = getPoolContractAddress(chainId, poolAddress);\n    tradeFromBlock = parseInt(initialBlock);\n    liquidateFromBlock = parseInt(initialBlock);\n    const [tradeHistoryOnline, liquidateHistoryOnline] = await Promise.all([\n      getTradeHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        tradeFromBlock + 1\n      ),\n      getLiquidateHistoryOnline(\n        chainId,\n        poolAddress,\n        accountAddress,\n        liquidateFromBlock + 1\n      ),\n    ]);\n    const result = tradeHistoryOnline.concat(liquidateHistoryOnline);\n    return result.sort((a, b) => parseInt(b.time) - parseInt(a.time));\n  }\n};\n","import {\n  addLiquidity,\n  removeLiquidity,\n  depositMargin,\n  withdrawMargin,\n  tradeWithMargin,\n  closePosition,\n} from './contractTransactionApi';\nimport {\n  addSlpLiquidity,\n  removeSlpLiquidity,\n} from './slpPoolApi'\nimport {\n  addClpLiquidity,\n  removeClpLiquidity,\n} from './clpPoolApi'\nimport {\n  addClp2Liquidity,\n  removeClp2Liquidity,\n} from './clp2PoolApi'\nimport { wsInstance } from './apiGlobals'\nimport { getRestServerConfig, DeriEnv } from '../config'\n\nconst wsOnPromise = (ws, event) => {\n  return new Promise((resolve) => {\n    ws.on(event, function(data){\n      resolve(JSON.parse(data))\n    })\n  })\n}\nconst sendTradeTxToWorkerQuene = async(methodCall) => {\n  const ws = wsInstance.getOrSet(getRestServerConfig(DeriEnv.get()))\n  await ws.send(methodCall)\n  const res = await wsOnPromise(ws, 'trade_tx_receipt')\n  //console.log('res', res)\n  return res\n}\n\nexport const tradeWithMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const res = await tradeWithMargin(chainId, poolAddress, accountAddress, newVolume, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`trade_with_margin(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const closePosition2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  newVolume,\n  amount = '0'\n) => {\n  const res = await closePosition(chainId, poolAddress, accountAddress, newVolume, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`close_position(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const depositMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await depositMargin(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`deposit_margin(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const withdrawMargin2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await withdrawMargin(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`withdraw_margin(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const addLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`add_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const removeLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`remove_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const addSlpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addSlpLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`add_slp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const removeSlpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeSlpLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`remove_slp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\nexport const addClpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addClpLiquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`add_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const removeClpLiquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeClpLiquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`remove_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const addClp2Liquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount = '0'\n) => {\n  const res = await addClp2Liquidity(chainId, poolAddress, accountAddress, amount)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`add_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};\n\nexport const removeClp2Liquidity2 = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  shares = '0'\n) => {\n  const res = await removeClp2Liquidity(chainId, poolAddress, accountAddress, shares)\n  if (res.success) {\n    const res2 = await sendTradeTxToWorkerQuene(`remove_clp_liquidity(${chainId},${poolAddress},${accountAddress})`)\n    return {...res2, ...res}\n  } else {\n    return res\n  }\n};","import { perpetualPoolFactory } from '../factory/contracts';\nimport { getBTCUSDPrice } from '../utils';\nimport { io } from 'socket.io-client';\n\n/** @module apiCache */\n/**\n * fundingRateCache Object\n * @name fundingRateCache\n * @property {function} get - Get the funding rate from cache\n * @property {function} set - set the funding rate cache\n */\nexport const fundingRateCache = (function () {\n  let resourceMap = {};\n  return {\n    get(chainId, contractAddress) {\n      const key = `${chainId}.${contractAddress}`;\n      if (Object.keys(resourceMap).includes(key)) {\n        return resourceMap[key];\n      }\n      console.log(`Cache key is not in resouceMap: ${key}`);\n      return undefined;\n    },\n    set(chainId, contractAddress, resource) {\n      const key = `${chainId}.${contractAddress}`;\n      resourceMap[key] = resource;\n    },\n  };\n})();\n\nexport const accountAddressCache = (function () {\n  let _accountAddress = '';\n  return {\n    get() {\n      if (_accountAddress === '') {\n        console.log(\"please init 'accountAddress' first\");\n      }\n      return _accountAddress;\n    },\n    set(value) {\n      if (typeof value === 'string' && value !== '') {\n        _accountAddress = value;\n      }\n    },\n  };\n})();\n\n/**\n * priceCache Object\n * @name priceCache\n * @property {function} get - Get the price from cache\n * @property {function} update - Set the price to automatic update during a time interval\n * @property {function} clear - Clear the the automatic update of the price\n */\nexport const priceCache = (function () {\n  let _price = '';\n  let _interval = null;\n  return {\n    get() {\n      if (_price === '') {\n        console.log(\"please init 'price' first\");\n      }\n      return _price;\n    },\n    async _update(chainId, poolAddress) {\n      try {\n        const res = await getBTCUSDPrice(chainId, poolAddress);\n        if (res !== '') {\n          _price = res;\n        }\n      } catch (err) {\n        console.log(`priceCache.update: ${err}`)\n      }\n    },\n    update(chainId, poolAddress) {\n      const self = this;\n      _interval = setInterval(() => {\n        // console.log('tick')\n        self._update(chainId, poolAddress);\n      }, 3000);\n    },\n    clear() {\n      if (_interval) {\n        clearInterval(_interval);\n      }\n      _price = '';\n    },\n  };\n})();\n\n/**\n * PerpetualPoolParametersCache Object\n * @name PerpetualPoolParametersCache\n * @property {function} get - Get the perpetualPoolParameters from cache\n * @property {function} update - Set the perpetualPoolParameters\n */\n\nexport const PerpetualPoolParametersCache = (function () {\n  let _parameters = {};\n  return {\n    get() {\n      if (!_parameters.multiplier) {\n        console.log(\"please init 'perpetual pool parameters' first\");\n      }\n      return _parameters;\n    },\n    async update(chainId, poolAddress) {\n      const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n      const res = await perpetualPool.getParameters();\n      if (res.multiplier) {\n        _parameters = res;\n      }\n      return res;\n    },\n  };\n})();\n\n// websocket instance\nexport const wsInstance = (function(){\n  let _ws = null;\n  return {\n    get() {\n      if (_ws) {\n        return _ws\n      } else {\n        console.log('wsInstance.get() error: ws instance is not init')\n      }\n    },\n    set(url) {\n      try {\n        const ws = io(url, {\n          transports: ['websocket'],\n          path: '/ws',\n        });\n        ws.on('connect', () => {\n          console.log('hello from ws:', ws.id);\n        })\n        if (ws) {\n          _ws = ws\n        } else {\n          console.log('wsInstance.get() error: ws instance is not init')\n        }\n      } catch (err) {\n        console.log('wsInstance.set():', err)\n      }\n    },\n    getOrSet(url) {\n      if (!_ws) {\n        this.set(url)\n      }\n      return _ws\n    }\n  }\n})();\n","import { makeAutoObservable, observable, action, computed } from \"mobx\";\nimport { storeVersion, restoreVersion } from \"../utils/utils\";\n\nclass Version {\n  current = null;\n\n  constructor(){\n    makeAutoObservable(this,{\n      current : observable,\n      setCurrent : action,\n      isV1 : computed,\n      isV2 : computed\n    })\n  }\n\n\n  setCurrent(version){\n    this.current = version;\n  }\n\n  switch(){\n    if(this.current === 'v1'){\n      this.setCurrent('v2')\n    } else {\n      this.setCurrent('v1')\n    }\n  }\n\n  get isV1() {\n    return this.current === 'v1'\n  }\n\n  get isV2(){\n    return this.current === 'v2'\n  }\n}\nexport default new Version()","\n\nimport BigNumber from 'bignumber.js'\nimport version from '../model/Version';\nconst versionKey = 'deri-current-version'\n\nexport function bg(value, base = 0) {\n  if (base == 0) {\n    return BigNumber(value);\n  } else if (base > 0) {\n    return BigNumber(value).times(BigNumber(\"1\" + \"0\".repeat(base)));\n  } else {\n    return BigNumber(value).div(BigNumber(\"1\" + \"0\".repeat(-base)));\n  }\n}\n\nexport function deriNatural(value) {\n  return bg(value, -18);\n}\n\nexport function formatAddress(address){\n  return address && `${address.substr(0,6)}...${address.substr(-4)}`\n}\n\nexport function formatBalance(balance){\n  return balance && (+balance).toFixed(4)\n}\n\nexport function eqInNumber(str1,str2){\n  return (+str1) === (+str2)\n}\n\nexport function isLP(address){\n  return address === '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd' || address === '0x73feaa1eE314F8c655E354234017bE2193C9E24E'\n}\nexport function isSushiLP(address){\n  return address === '0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd'\n}\nexport function isCakeLP(address){\n  return address === '0x73feaa1eE314F8c655E354234017bE2193C9E24E'\n}\n\nexport function sessionStorageKey(version){\n  return `${version}-current-trading-pool`\n}\n\n\n// export function storeVersion(version){\n//   sessionStorage.setItem(versionKey,version)\n// }\n\n// export function restoreVersion(){\n//   return sessionStorage.getItem(versionKey)\n// }\n\nexport function storeConfig(version,config){\n  if(config){\n    const key = sessionStorageKey(version);\n    sessionStorage.setItem(key,JSON.stringify(config))\n  }\n}\n\nexport function getConfigFromStore(version){\n  return JSON.parse(sessionStorage.getItem(sessionStorageKey(version)))\n}\n\nexport function storeChain(chainInfo){\n  sessionStorage.setItem('current-chain',JSON.stringify(chainInfo))\n}\nexport function restoreChain(){\n  return JSON.parse(sessionStorage.getItem('current-chain')) || {code : ''};\n}\n\nexport function storeLocale(locale){\n  sessionStorage.setItem('current-locale',locale)\n}\n\nexport function restoreLocale(){\n  return sessionStorage.getItem('current-locale')\n}\n\nexport function addParam(param,value,urlString = window.location.href){\n  const url = new URL(urlString);\n  if(url.searchParams.has(param)){\n    url.searchParams.set(param,value);\n  } else {\n    url.searchParams.append(param,value);\n  }\n  return  url.toString();\n}\n\nexport function hasParam(param,urlString = window.location.href){\n  const url = new URL(urlString);\n  return url.searchParams.has(param);\n}\n\nexport function getParam(param,urlString = window.location.href){\n  const url = new URL(urlString);\n  return url.searchParams.get(param);\n}\n\nexport function getFormatSymbol(symbol){\n  const curChain = restoreChain();\n  return version.current === 'v2' ? `${symbol}_V2_${curChain ? curChain.code.toUpperCase() : 'BSC'}` : symbol\n}\n\n","import {\n  bTokenFactory,\n  lTokenFactory,\n  pTokenFactory,\n  perpetualPoolFactory,\n  deriFactory,\n  databaseWormholeFactory,\n} from '../factory/contracts';\nimport { getPoolInfoApy } from './databaseApi';\nimport {\n  fundingRateCache,\n  PerpetualPoolParametersCache,\n  priceCache,\n} from './apiGlobals';\nimport {\n  hasInvalidArgsValue,\n  naturalWithPercentage,\n  deriToNatural,\n  getPoolContractAddress,\n  getBTCUSDPrice,\n  bg,\n  BigNumber,\n  getDeriContractAddress,\n} from '../utils';\nimport {\n  calculateFundingRate,\n  calculateLiquidityUsed,\n  calculateShareValue,\n  calculateMaxRemovableShares,\n  calculateEntryPrice,\n  calculateMarginHeld,\n  calculatePnl,\n  calculateLiquidationPrice,\n  processFundingRate,\n} from '../calculation';\n\n/**\n * Get the contract information\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.addresses\n * @returns {string} response.symbol\n * @returns {string} response.bSymbol\n * @returns {string} response.multiplier\n * @returns {string} response.feeRatio\n * @returns {string} response.minPoo\n * @returns {string} response.minPoolMarginRatio\n * @returns {string} response.minInitialMarginRatio\n * @returns {string} response.minMaintenanceMarginRatio\n * @returns {string} response.minAddLiquidity\n * @returns {string} response.redemptionFeeRatio\n * @returns {string} response.fundingRateCoefficient\n * @returns {string} response.minLiquidationReward\n * @returns {string} response.maxLiquidationReward\n * @returns {string} response.liquidationCutRatio\n * @returns {string} response.priceDelayAllowance\n */\nexport const getSpecification = async (\n  chainId,\n  poolAddress,\n  //accountAddress,\n) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    feeRatio,\n    minPoolMarginRatio,\n    minInitialMarginRatio,\n    minMaintenanceMarginRatio,\n    minAddLiquidity,\n    redemptionFeeRatio,\n    fundingRateCoefficient,\n    minLiquidationReward,\n    maxLiquidationReward,\n    liquidationCutRatio,\n    priceDelayAllowance,\n  } = await pPool.getParameters();\n  let symbol = await pPool.symbol();\n  const bSymbolRaw = await bToken.symbol();\n\n  // fix symbol BTCUSD issue, will remove later\n  // if (poolAddress === '0xA2D7316Bc60AA9463DfB78379d25E77371990507') {\n  //   symbol = 'iMEME'\n  // }\n\n  return {\n    addresses: poolAddress,\n    symbol,\n    bSymbol: bSymbolRaw,\n    multiplier: multiplier.toString(),\n    feeRatio: feeRatio.toString(),\n    minPoolMarginRatio: minPoolMarginRatio.toString(),\n    minInitialMarginRatio: minInitialMarginRatio.toString(),\n    minMaintenanceMarginRatio: minMaintenanceMarginRatio.toString(),\n    minAddLiquidity: minAddLiquidity.toString(),\n    redemptionFeeRatio: redemptionFeeRatio.toString(),\n    fundingRateCoefficient: fundingRateCoefficient.toString(),\n    minLiquidationReward: minLiquidationReward.toString(),\n    maxLiquidationReward: maxLiquidationReward.toString(),\n    liquidationCutRatio: liquidationCutRatio.toString(),\n    priceDelayAllowance: priceDelayAllowance.toString(),\n  };\n};\n\n/**\n * Get position Information of the user\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.volume\n * @returns {string} response.averageEntryPrice\n * @returns {string} response.margin\n * @returns {string} response.marginHeld\n * @returns {string} response.unrealizedPnl\n * @returns {string} response.liquidationPrice\n */\nexport const getPositionInfo = async (chainId, poolAddress, accountAddress) => {\n  let price = ''\n  try {\n    price = await getBTCUSDPrice(chainId, poolAddress);\n  } catch (err) {\n    console.log(err)\n  }\n  const { pTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const pToken = pTokenFactory(chainId, pTokenAddress, poolAddress);\n  //pToken.setAccount(accountAddress);\n  const {\n    multiplier,\n    minInitialMarginRatio,\n    minMaintenanceMarginRatio,\n  } = await pPool.getParameters();\n  //console.log('getPositionInfo', chainId, poolAddress, accountAddress, price);\n  const { volume, margin, cost } = await pToken.getPositionInfo(accountAddress);\n  if (price === '') {\n    return {\n      price,\n      volume: volume.toString(),\n      averageEntryPrice: calculateEntryPrice(\n        volume,\n        cost,\n        multiplier\n      ).toString(),\n      margin: margin.toString(),\n      marginHeld: '',\n      unrealizedPnl: '',\n      liquidationPrice: calculateLiquidationPrice(\n        volume,\n        margin,\n        cost,\n        multiplier,\n        minMaintenanceMarginRatio\n      ).toString(),\n    };\n  } else {\n    return {\n      price,\n      volume: volume.toString(),\n      averageEntryPrice: calculateEntryPrice(\n        volume,\n        cost,\n        multiplier\n      ).toString(),\n      margin: margin.toString(),\n      marginHeld: calculateMarginHeld(\n        price,\n        volume,\n        multiplier,\n        minInitialMarginRatio\n      ).toString(),\n      unrealizedPnl: calculatePnl(price, volume, multiplier, cost).toString(),\n      liquidationPrice: calculateLiquidationPrice(\n        volume,\n        margin,\n        cost,\n        multiplier,\n        minMaintenanceMarginRatio\n      ).toString(),\n    };\n  }\n};\n\n/**\n * Get liquidity Info of the user\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.totalSupply\n * @returns {string} response.poolLiquidity\n * @returns {string} response.shares\n * @returns {string} response.shareValue\n * @returns {string} response.maxRemovableShares\n */\nexport const getLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { lTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const {\n    liquidity,\n    tradersNetCost,\n    tradersNetVolume,\n  } = await pPool.getStateValues();\n  const { multiplier, minPoolMarginRatio } = await pPool.getParameters();\n  const poolDynamicEquity = liquidity.plus(\n    tradersNetCost.minus(tradersNetVolume.times(price).times(multiplier))\n  );\n\n  return {\n    totalSupply: lTokenTotalSupply.toString(),\n    poolLiquidity: liquidity.toString(),\n    shares: lTokenBalance.toString(),\n    shareValue: calculateShareValue(\n      lTokenTotalSupply,\n      poolDynamicEquity\n    ).toString(),\n    maxRemovableShares: calculateMaxRemovableShares(\n      lTokenBalance,\n      lTokenTotalSupply,\n      liquidity,\n      tradersNetVolume,\n      tradersNetCost,\n      multiplier,\n      minPoolMarginRatio,\n      price\n    ).toString(),\n  };\n};\n\n/**\n * Get user balance in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {string} user balance\n */\nexport const getWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n\n/**\n * Check account is unlocked in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getPoolContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Get estimate margin in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {string} volume\n * @param {string} leverage\n * @returns {string}\n */\nexport const getEstimatedMargin = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  volume,\n  leverage\n) => {\n  const price = await getBTCUSDPrice(chainId, poolAddress);\n  const pPool = perpetualPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const { multiplier } = await pPool.getParameters();\n  return bg(volume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .div(bg(leverage))\n    .toString();\n};\n\n/**\n * Get estimate Fee in the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} volume\n * @returns {string}\n */\nexport const getEstimatedFee = async (chainId, poolAddress, volume) => {\n  // const price = await getBTCUSDPrice(chainId, poolAddress);\n  let price = priceCache.get();\n  let parameters = PerpetualPoolParametersCache.get();\n  if (price === '') {\n    await priceCache.update(chainId, poolAddress);\n    price = priceCache.get();\n  }\n  // const pPool = perpetualPoolFactory(chainId, poolAddress, accountAddress);\n  // const { multiplier, feeRatio } = await pPool.getParameters();\n  if (!parameters.multiplier) {\n    parameters = await PerpetualPoolParametersCache.update(\n      chainId,\n      poolAddress\n    );\n  }\n  //console.log('price', price);\n  const { multiplier, feeRatio } = parameters;\n  return bg(volume)\n    .abs()\n    .times(price)\n    .times(multiplier)\n    .times(feeRatio)\n    .toString();\n};\n\n/**\n * Get funding rate of the perpetual pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.fundingRate0\n * @returns {string} response.fundingRatePerBlock\n * @returns {string} response.liquidity\n * @returns {string} response.volume\n * @returns {string} response.tradersNetVolume\n */\nexport const getFundingRate = async (chainId, poolAddress) => {\n  const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n\n  const res = await perpetualPool\n    .getFundingRate()\n    .catch((err) => console.log('getFundingRate', err));\n  fundingRateCache.set(chainId, poolAddress, res);\n  const poolInfo = await getPoolInfoApy(chainId, poolAddress);\n\n  if (res) {\n    // console.log(hexToNatural(res[0]));\n    const {\n      fundingRate,\n      fundingRatePerBlock,\n      liquidity,\n      tradersNetVolume,\n    } = res;\n    const volume = poolInfo.volume24h;\n    // fundingRate = processFundingRate(chainId, fundingRate);\n\n    return {\n      fundingRate0: naturalWithPercentage(fundingRate),\n      fundingRatePerBlock: BigNumber(fundingRatePerBlock).toExponential(10),\n      liquidity: liquidity.toString(),\n      volume: deriToNatural(volume).toString(),\n      tradersNetVolume: tradersNetVolume.toString(),\n    };\n  }\n};\n\n/**\n * Get estimate funding rate\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} newNetVolume\n * @returns {Object} response\n * @returns {string} response.fundingRate1\n */\nexport const getEstimatedFundingRate = async (\n  chainId,\n  poolAddress,\n  newNetVolume\n) => {\n  let fundingRate1;\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool.getFundingRate();\n  }\n  if (res) {\n    const parameters = [\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.fundingRateCoefficient,\n    ];\n    if (hasInvalidArgsValue(...parameters)) {\n      return {\n        fundingRate1: '0',\n      };\n    }\n    // console.log(parameters)\n    fundingRate1 = calculateFundingRate(...parameters);\n    fundingRate1 = processFundingRate(chainId, fundingRate1);\n    return {\n      fundingRate1: naturalWithPercentage(fundingRate1),\n    };\n  }\n};\n\n/**\n * Get liquidity used\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @returns {Object} response\n * @returns {string} response.liquidityUsed0\n */\nexport const getLiquidityUsed = async (chainId, poolAddress) => {\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool.getFundingRate();\n  }\n  if (res) {\n    const { liquidityUsed } = res;\n    return {\n      liquidityUsed0: naturalWithPercentage(liquidityUsed),\n    };\n  }\n};\n\n/**\n * Get estimate liquidity used\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} newNetVolume\n * @returns {Object} response\n * @returns {string} response.fundingRate1\n */\nexport const getEstimatedLiquidityUsed = async (\n  chainId,\n  poolAddress,\n  newNetVolume\n) => {\n  let res;\n  res = fundingRateCache.get(chainId, poolAddress);\n  if (!res) {\n    const perpetualPool = perpetualPoolFactory(chainId, poolAddress);\n    res = await perpetualPool\n      .getFundingRate()\n      .catch((err) => console.log('getLiquidityUsed', err));\n  }\n  if (res) {\n    const parameters = [\n      bg(res.tradersNetVolume).plus(bg(newNetVolume)).toString(),\n      res.price,\n      res.multiplier,\n      res.liquidity,\n      res.poolMarginRatio,\n    ];\n    if (hasInvalidArgsValue(...parameters)) {\n      return {\n        liquidityUsed1: '0',\n      };\n    }\n    const liquidityUsed1 = calculateLiquidityUsed(...parameters);\n    return {\n      liquidityUsed1: naturalWithPercentage(liquidityUsed1),\n    };\n  }\n};\n\n/**\n * Get user signature of the wormhole pool\n * @async\n * @method\n * @param {string} accountAddress\n * @returns {Object}\n */\nexport const getUserWormholeSignature = async (accountAddress) => {\n  const databaseWormhole = databaseWormholeFactory(true);\n  return await databaseWormhole.signature(accountAddress);\n};\n\n/**\n * Check account is unlocked in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isDeriUnlocked = async (chainId, accountAddress) => {\n  const { wormholeAddress, deriAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  //deri.setAccount(accountAddress).setPool(wormholeAddress);\n  return await deri.isUnlocked(accountAddress);\n};\n\n/**\n * Get deri balance in the deri pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string}\n */\nexport const getDeriBalance = async (chainId, accountAddress) => {\n  const { deriAddress, wormholeAddress } = getDeriContractAddress(chainId);\n  const deri = deriFactory(chainId, deriAddress, wormholeAddress);\n  return (await deri.balance(accountAddress)).toString();\n};\n","var map = {\n\t\"./de/bridge.json\": 584,\n\t\"./de/broker.json\": 585,\n\t\"./de/dip-history.json\": 586,\n\t\"./de/footer.json\": 587,\n\t\"./de/governance.json\": 588,\n\t\"./de/header.json\": 589,\n\t\"./de/home.json\": 590,\n\t\"./de/lite.json\": 591,\n\t\"./de/mining.json\": 592,\n\t\"./de/mobile-lite.json\": 593,\n\t\"./de/pro.json\": 594,\n\t\"./de/team.json\": 595,\n\t\"./en/bridge.json\": 596,\n\t\"./en/broker.json\": 597,\n\t\"./en/dip-history.json\": 598,\n\t\"./en/footer.json\": 599,\n\t\"./en/governance.json\": 600,\n\t\"./en/header.json\": 601,\n\t\"./en/home.json\": 602,\n\t\"./en/lite.json\": 603,\n\t\"./en/mining.json\": 604,\n\t\"./en/mobile-lite.json\": 605,\n\t\"./en/pro.json\": 606,\n\t\"./en/team.json\": 607,\n\t\"./zh/bridge.json\": 608,\n\t\"./zh/broker.json\": 609,\n\t\"./zh/dip-history.json\": 610,\n\t\"./zh/footer.json\": 611,\n\t\"./zh/governance.json\": 612,\n\t\"./zh/header.json\": 613,\n\t\"./zh/home.json\": 614,\n\t\"./zh/lite.json\": 615,\n\t\"./zh/mining.json\": 616,\n\t\"./zh/mobile-lite.json\": 617,\n\t\"./zh/pro.json\": 618,\n\t\"./zh/team.json\": 619\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 583;","import { metaMaskWeb3, web3Factory } from '../factory';\nimport { numberToHex } from '../utils';\nimport { isBrowser, isJsDom } from '../utils/convert';\n\nconst MAX_GAS_AMOUNT = 832731;\n\nexport class ContractBase {\n  constructor(chainId, contractAddress, contractAbi) {\n    this.chainId = chainId;\n    this.contractAddress = contractAddress;\n    this.contractAbi = contractAbi;\n  }\n\n  async _init() {\n    // re-init web3 and contract when web3 instance is null\n    if (!this.web3) {\n      if (isBrowser() && !isJsDom()) {\n        this.web3 = metaMaskWeb3();\n      } else {\n        this.web3 = await web3Factory.get(this.chainId);\n      }\n      this.contract = new this.web3.eth.Contract(\n        this.contractAbi,\n        this.contractAddress\n      );\n    }\n  }\n\n  async _call(method, args = []) {\n    let res\n    let retry = 2\n    while (retry > 0) {\n      try {\n        await this._init()\n        res = await this.contract.methods[method](...args).call();\n        break\n      } catch(err) {\n        retry -= 1\n        // remove web3 instance to re-init\n        this.web3 = null\n        if (err.toString().includes('Invalid JSON RPC response')) {\n          console.log(`Invalid JSON RPC response with chainId(${this.chainId})`);\n        } else if (err.toString().includes(\"Returned values aren't valid,\")) {\n          console.log(`Invalid contract address(${this.contractAddress}) and chainId(${this.chainId})`);\n        }\n      }\n    }\n    if (retry === 0 && !res) {\n      throw new Error(`The contract(${this.contractAddress}) '${method}(${args})' failed with max retry 2.`)\n    }\n    return res\n  }\n\n  async _estimatedGas(method, args = [], accountAddress) {\n    await this._init()\n    let gas = 0;\n    for (let i = 0; i < 2; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (error) {\n        // ignore the metamask error\n      }\n    }\n    if (gas == 0 || gas > 10000000) gas = MAX_GAS_AMOUNT;\n    return gas;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt === null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _transact(method, args, accountAddress) {\n    await this._init()\n    const gas = await this._estimatedGas(method, args, accountAddress)\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: numberToHex(gas),\n        value: numberToHex('0'),\n        data: this.contract.methods[method](...args).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n    //return await this.contract.methods[method](...args).send({from: accountAddress})\n  }\n\n}\n","\n/* eslint-disable */\nexport const perpetualPoolAbi = [ { \"inputs\": [ { \"internalType\": \"uint256[9]\", \"name\": \"parameters\", \"type\": \"uint256[9]\" }, { \"internalType\": \"address[4]\", \"name\": \"addresses\", \"type\": \"address[4]\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"AddLiquidity\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"AddMargin\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"liquidator\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"reward\", \"type\": \"uint256\" } ], \"name\": \"Liquidate\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"collector\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"ProtocolFeeCollection\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"RemoveLiquidity\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"RemoveMargin\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"tradeVolume\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" } ], \"name\": \"Trade\", \"type\": \"event\" }, { \"inputs\": [ { \"components\": [ { \"internalType\": \"address\", \"name\": \"bTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"decimals\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"discount\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct IPerpetualPool.BTokenInfo\", \"name\": \"info\", \"type\": \"tuple\" } ], \"name\": \"addBToken\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"addLiquidity\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"addMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"components\": [ { \"internalType\": \"string\", \"name\": \"symbol\", \"type\": \"string\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"int256\", \"name\": \"multiplier\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"feeRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"fundingRateCoefficient\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cumulativeFundingRate\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"tradersNetVolume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"tradersNetCost\", \"type\": \"int256\" } ], \"internalType\": \"struct IPerpetualPool.SymbolInfo\", \"name\": \"info\", \"type\": \"tuple\" } ], \"name\": \"addSymbol\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"targetPool\", \"type\": \"address\" } ], \"name\": \"approvePoolMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"collectProtocolFee\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"sourcePool\", \"type\": \"address\" } ], \"name\": \"executePoolMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getAddresses\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"lTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"pTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"routerAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"protocolFeeCollector\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" } ], \"name\": \"getBToken\", \"outputs\": [ { \"components\": [ { \"internalType\": \"address\", \"name\": \"bTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"decimals\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"discount\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct IPerpetualPool.BTokenInfo\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" } ], \"name\": \"getBTokenOracle\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getLengths\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getParameters\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"decimals0\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"minBToken0Ratio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"minPoolMarginRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"minInitialMarginRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"minMaintenanceMarginRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"minLiquidationReward\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"maxLiquidationReward\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"liquidationCutRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"protocolFeeCollectRatio\", \"type\": \"int256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"getProtocolFeeAccrued\", \"outputs\": [ { \"internalType\": \"int256\", \"name\": \"\", \"type\": \"int256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" } ], \"name\": \"getSymbol\", \"outputs\": [ { \"components\": [ { \"internalType\": \"string\", \"name\": \"symbol\", \"type\": \"string\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"int256\", \"name\": \"multiplier\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"feeRatio\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"fundingRateCoefficient\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"price\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cumulativeFundingRate\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"tradersNetVolume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"tradersNetCost\", \"type\": \"int256\" } ], \"internalType\": \"struct IPerpetualPool.SymbolInfo\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" } ], \"name\": \"getSymbolOracle\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"liquidator\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"liquidate\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"removeLiquidity\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"removeMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"discount\", \"type\": \"uint256\" } ], \"name\": \"setBTokenParameters\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"feeRatio\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"fundingRateCoefficient\", \"type\": \"uint256\" } ], \"name\": \"setSymbolParameters\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"tradeVolume\", \"type\": \"int256\" }, { \"internalType\": \"uint256\", \"name\": \"blength\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"slength\", \"type\": \"uint256\" } ], \"name\": \"trade\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\nexport const perpetualPoolRouterAbi = [ { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"lTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"pTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"liquidatorQualifierAddress\", \"type\": \"address\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"migrationTimestamp\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"source\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"target\", \"type\": \"address\" } ], \"name\": \"ExecuteMigration\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"migrationTimestamp\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"source\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"address\", \"name\": \"target\", \"type\": \"address\" } ], \"name\": \"PrepareMigration\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"bTokenAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"discount\", \"type\": \"uint256\" } ], \"name\": \"addBToken\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"addLiquidity\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"addLiquidityWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"addMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"addMarginWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"symbol\", \"type\": \"string\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"multiplier\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"feeRatio\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"fundingRateCoefficient\", \"type\": \"uint256\" } ], \"name\": \"addSymbol\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"approveMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"claimNewController\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"controller\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"sourceRouter\", \"type\": \"address\" } ], \"name\": \"executeMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"liquidate\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"liquidateWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"liquidatorQualifier\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"migrationDestination\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"migrationTimestamp\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"pool\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"target\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"graceDays\", \"type\": \"uint256\" } ], \"name\": \"prepareMigration\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"removeLiquidity\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"removeLiquidityWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" } ], \"name\": \"removeMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"bAmount\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"removeMarginWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"swapperAddress\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"discount\", \"type\": \"uint256\" } ], \"name\": \"setBTokenParameters\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"qualifierAddress\", \"type\": \"address\" } ], \"name\": \"setLiquidatorQualifier\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"newController\", \"type\": \"address\" } ], \"name\": \"setNewController\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"poolAddress\", \"type\": \"address\" } ], \"name\": \"setPool\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"address\", \"name\": \"oracleAddress\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"feeRatio\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"fundingRateCoefficient\", \"type\": \"uint256\" } ], \"name\": \"setSymbolParameters\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"tradeVolume\", \"type\": \"int256\" } ], \"name\": \"trade\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"tradeVolume\", \"type\": \"int256\" }, { \"components\": [ { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"timestamp\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"price\", \"type\": \"uint256\" }, { \"internalType\": \"uint8\", \"name\": \"v\", \"type\": \"uint8\" }, { \"internalType\": \"bytes32\", \"name\": \"r\", \"type\": \"bytes32\" }, { \"internalType\": \"bytes32\", \"name\": \"s\", \"type\": \"bytes32\" } ], \"internalType\": \"struct IPerpetualPoolRouter.PriceInfo[]\", \"name\": \"infos\", \"type\": \"tuple[]\" } ], \"name\": \"tradeWithPrices\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\nexport const bTokenAbi = [ { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"name_\", \"type\": \"string\" }, { \"internalType\": \"string\", \"name\": \"symbol_\", \"type\": \"string\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"Approval\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"Transfer\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\" } ], \"name\": \"allowance\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"spender\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"approve\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"account\", \"type\": \"address\" } ], \"name\": \"balanceOf\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"decimals\", \"outputs\": [ { \"internalType\": \"uint8\", \"name\": \"\", \"type\": \"uint8\" } ], \"stateMutability\": \"pure\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"name\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"symbol\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalSupply\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"transfer\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"amount\", \"type\": \"uint256\" } ], \"name\": \"transferFrom\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\nexport const lTokenAbi = [ { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"name_\", \"type\": \"string\" }, { \"internalType\": \"string\", \"name\": \"symbol_\", \"type\": \"string\" }, { \"internalType\": \"uint256\", \"name\": \"numBTokens_\", \"type\": \"uint256\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"Approval\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"bool\", \"name\": \"approved\", \"type\": \"bool\" } ], \"name\": \"ApprovalForAll\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"Transfer\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": false, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"lastCumulativePnl\", \"type\": \"int256\" } ], \"name\": \"UpdateAsset\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"approve\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"balanceOf\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"burn\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"exists\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"getApproved\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" } ], \"name\": \"getAsset\", \"outputs\": [ { \"components\": [ { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct ILToken.Asset\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"getAssets\", \"outputs\": [ { \"components\": [ { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct ILToken.Asset[]\", \"name\": \"\", \"type\": \"tuple[]\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" } ], \"name\": \"isApprovedForAll\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"mint\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"name\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"numBTokens\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"ownerOf\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"pool\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" }, { \"internalType\": \"bytes\", \"name\": \"data\", \"type\": \"bytes\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"internalType\": \"bool\", \"name\": \"approved\", \"type\": \"bool\" } ], \"name\": \"setApprovalForAll\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"num\", \"type\": \"uint256\" } ], \"name\": \"setNumBTokens\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"newPool\", \"type\": \"address\" } ], \"name\": \"setPool\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"bytes4\", \"name\": \"interfaceId\", \"type\": \"bytes4\" } ], \"name\": \"supportsInterface\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"symbol\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalMinted\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalSupply\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"transferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"int256\", \"name\": \"liquidity\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"pnl\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativePnl\", \"type\": \"int256\" } ], \"internalType\": \"struct ILToken.Asset\", \"name\": \"asset\", \"type\": \"tuple\" } ], \"name\": \"updateAsset\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\nexport const pTokenAbi = [ { \"inputs\": [ { \"internalType\": \"string\", \"name\": \"name_\", \"type\": \"string\" }, { \"internalType\": \"string\", \"name\": \"symbol_\", \"type\": \"string\" }, { \"internalType\": \"uint256\", \"name\": \"numSymbols_\", \"type\": \"uint256\" }, { \"internalType\": \"uint256\", \"name\": \"numBTokens_\", \"type\": \"uint256\" } ], \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"Approval\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"indexed\": false, \"internalType\": \"bool\", \"name\": \"approved\", \"type\": \"bool\" } ], \"name\": \"ApprovalForAll\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"Transfer\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"amount\", \"type\": \"int256\" } ], \"name\": \"UpdateMargin\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [ { \"indexed\": true, \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"volume\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"cost\", \"type\": \"int256\" }, { \"indexed\": false, \"internalType\": \"int256\", \"name\": \"lastCumulativeFundingRate\", \"type\": \"int256\" } ], \"name\": \"UpdatePosition\", \"type\": \"event\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"approve\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"balanceOf\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"burn\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"exists\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"getApproved\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" } ], \"name\": \"getMargin\", \"outputs\": [ { \"internalType\": \"int256\", \"name\": \"\", \"type\": \"int256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"getMargins\", \"outputs\": [ { \"internalType\": \"int256[]\", \"name\": \"\", \"type\": \"int256[]\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" } ], \"name\": \"getPosition\", \"outputs\": [ { \"components\": [ { \"internalType\": \"int256\", \"name\": \"volume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cost\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativeFundingRate\", \"type\": \"int256\" } ], \"internalType\": \"struct IPToken.Position\", \"name\": \"\", \"type\": \"tuple\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"getPositions\", \"outputs\": [ { \"components\": [ { \"internalType\": \"int256\", \"name\": \"volume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cost\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativeFundingRate\", \"type\": \"int256\" } ], \"internalType\": \"struct IPToken.Position[]\", \"name\": \"\", \"type\": \"tuple[]\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" } ], \"name\": \"isApprovedForAll\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" } ], \"name\": \"mint\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"name\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"numBTokens\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"numSymbols\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"ownerOf\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"pool\", \"outputs\": [ { \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" }, { \"internalType\": \"bytes\", \"name\": \"data\", \"type\": \"bytes\" } ], \"name\": \"safeTransferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"operator\", \"type\": \"address\" }, { \"internalType\": \"bool\", \"name\": \"approved\", \"type\": \"bool\" } ], \"name\": \"setApprovalForAll\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"num\", \"type\": \"uint256\" } ], \"name\": \"setNumBTokens\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"uint256\", \"name\": \"num\", \"type\": \"uint256\" } ], \"name\": \"setNumSymbols\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"newPool\", \"type\": \"address\" } ], \"name\": \"setPool\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"bytes4\", \"name\": \"interfaceId\", \"type\": \"bytes4\" } ], \"name\": \"supportsInterface\", \"outputs\": [ { \"internalType\": \"bool\", \"name\": \"\", \"type\": \"bool\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"symbol\", \"outputs\": [ { \"internalType\": \"string\", \"name\": \"\", \"type\": \"string\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalMinted\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"name\": \"totalSupply\", \"outputs\": [ { \"internalType\": \"uint256\", \"name\": \"\", \"type\": \"uint256\" } ], \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"from\", \"type\": \"address\" }, { \"internalType\": \"address\", \"name\": \"to\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"tokenId\", \"type\": \"uint256\" } ], \"name\": \"transferFrom\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"bTokenId\", \"type\": \"uint256\" }, { \"internalType\": \"int256\", \"name\": \"amount\", \"type\": \"int256\" } ], \"name\": \"updateMargin\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"int256[]\", \"name\": \"margins\", \"type\": \"int256[]\" } ], \"name\": \"updateMargins\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"inputs\": [ { \"internalType\": \"address\", \"name\": \"owner\", \"type\": \"address\" }, { \"internalType\": \"uint256\", \"name\": \"symbolId\", \"type\": \"uint256\" }, { \"components\": [ { \"internalType\": \"int256\", \"name\": \"volume\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"cost\", \"type\": \"int256\" }, { \"internalType\": \"int256\", \"name\": \"lastCumulativeFundingRate\", \"type\": \"int256\" } ], \"internalType\": \"struct IPToken.Position\", \"name\": \"position\", \"type\": \"tuple\" } ], \"name\": \"updatePosition\", \"outputs\": [], \"stateMutability\": \"nonpayable\", \"type\": \"function\" } ]\nexport const wooOracleAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"_I_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\nexport const chainlinkOracleAbi = [{\"type\":\"constructor\",\"stateMutability\":\"nonpayable\",\"inputs\":[{\"type\":\"address\",\"name\":\"_aggregator\",\"internalType\":\"address\"},{\"type\":\"address\",\"name\":\"_accessController\",\"internalType\":\"address\"}]},{\"type\":\"event\",\"name\":\"AnswerUpdated\",\"inputs\":[{\"type\":\"int256\",\"name\":\"current\",\"internalType\":\"int256\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"roundId\",\"internalType\":\"uint256\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"updatedAt\",\"internalType\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"NewRound\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"roundId\",\"internalType\":\"uint256\",\"indexed\":true},{\"type\":\"address\",\"name\":\"startedBy\",\"internalType\":\"address\",\"indexed\":true},{\"type\":\"uint256\",\"name\":\"startedAt\",\"internalType\":\"uint256\",\"indexed\":false}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferRequested\",\"inputs\":[{\"type\":\"address\",\"name\":\"from\",\"internalType\":\"address\",\"indexed\":true},{\"type\":\"address\",\"name\":\"to\",\"internalType\":\"address\",\"indexed\":true}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"type\":\"address\",\"name\":\"from\",\"internalType\":\"address\",\"indexed\":true},{\"type\":\"address\",\"name\":\"to\",\"internalType\":\"address\",\"indexed\":true}],\"anonymous\":false},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"acceptOwnership\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"contract AccessControllerInterface\"}],\"name\":\"accessController\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"address\"}],\"name\":\"aggregator\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"confirmAggregator\",\"inputs\":[{\"type\":\"address\",\"name\":\"_aggregator\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint8\",\"name\":\"\",\"internalType\":\"uint8\"}],\"name\":\"decimals\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"string\",\"name\":\"\",\"internalType\":\"string\"}],\"name\":\"description\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"int256\",\"name\":\"\",\"internalType\":\"int256\"}],\"name\":\"getAnswer\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"_roundId\",\"internalType\":\"uint256\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint80\",\"name\":\"roundId\",\"internalType\":\"uint80\"},{\"type\":\"int256\",\"name\":\"answer\",\"internalType\":\"int256\"},{\"type\":\"uint256\",\"name\":\"startedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"updatedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint80\",\"name\":\"answeredInRound\",\"internalType\":\"uint80\"}],\"name\":\"getRoundData\",\"inputs\":[{\"type\":\"uint80\",\"name\":\"_roundId\",\"internalType\":\"uint80\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"getTimestamp\",\"inputs\":[{\"type\":\"uint256\",\"name\":\"_roundId\",\"internalType\":\"uint256\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"int256\",\"name\":\"\",\"internalType\":\"int256\"}],\"name\":\"latestAnswer\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"latestRound\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint80\",\"name\":\"roundId\",\"internalType\":\"uint80\"},{\"type\":\"int256\",\"name\":\"answer\",\"internalType\":\"int256\"},{\"type\":\"uint256\",\"name\":\"startedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"updatedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint80\",\"name\":\"answeredInRound\",\"internalType\":\"uint80\"}],\"name\":\"latestRoundData\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"latestTimestamp\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"address payable\"}],\"name\":\"owner\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"contract AggregatorV2V3Interface\"}],\"name\":\"phaseAggregators\",\"inputs\":[{\"type\":\"uint16\",\"name\":\"\",\"internalType\":\"uint16\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint16\",\"name\":\"\",\"internalType\":\"uint16\"}],\"name\":\"phaseId\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"proposeAggregator\",\"inputs\":[{\"type\":\"address\",\"name\":\"_aggregator\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"address\",\"name\":\"\",\"internalType\":\"contract AggregatorV2V3Interface\"}],\"name\":\"proposedAggregator\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint80\",\"name\":\"roundId\",\"internalType\":\"uint80\"},{\"type\":\"int256\",\"name\":\"answer\",\"internalType\":\"int256\"},{\"type\":\"uint256\",\"name\":\"startedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"updatedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint80\",\"name\":\"answeredInRound\",\"internalType\":\"uint80\"}],\"name\":\"proposedGetRoundData\",\"inputs\":[{\"type\":\"uint80\",\"name\":\"_roundId\",\"internalType\":\"uint80\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint80\",\"name\":\"roundId\",\"internalType\":\"uint80\"},{\"type\":\"int256\",\"name\":\"answer\",\"internalType\":\"int256\"},{\"type\":\"uint256\",\"name\":\"startedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint256\",\"name\":\"updatedAt\",\"internalType\":\"uint256\"},{\"type\":\"uint80\",\"name\":\"answeredInRound\",\"internalType\":\"uint80\"}],\"name\":\"proposedLatestRoundData\",\"inputs\":[]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"setController\",\"inputs\":[{\"type\":\"address\",\"name\":\"_accessController\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"nonpayable\",\"outputs\":[],\"name\":\"transferOwnership\",\"inputs\":[{\"type\":\"address\",\"name\":\"_to\",\"internalType\":\"address\"}]},{\"type\":\"function\",\"stateMutability\":\"view\",\"outputs\":[{\"type\":\"uint256\",\"name\":\"\",\"internalType\":\"uint256\"}],\"name\":\"version\",\"inputs\":[]}]\nexport const wrappedOracleAbi = [{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\nexport const brokerManagerAbi = [{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"broker\",\"type\":\"address\"}],\"name\":\"SetBroker\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBroker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"broker\",\"type\":\"address\"}],\"name\":\"setBroker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-disable */","import { ContractBase } from './contract_base'\nimport { perpetualPoolAbi } from './abis';\nimport { deriToNatural, hexToNumber, bg } from '../utils'\n\nexport class PerpetualPool extends ContractBase {\n  constructor(chainId, contractAddress) {\n    super(chainId, contractAddress, perpetualPoolAbi)\n\n    this.bTokenCount= 0\n    this.symbolCount= 0\n\n    this.lTokenAddress = ''\n    this.pTokenAddress = ''\n    this.routerAddress = ''\n    this.protocolFeeCollector = ''\n\n    this.protocolFeeAccrued = 0\n  }\n\n  async _update() {\n    await Promise.all([\n      this.getLengths(),\n      this.getAddresses(),\n      this.getParameters(),\n    ]);\n  }\n\n  async getLengths() {\n    try {\n      const res = await this._call('getLengths')\n      //console.log(res[0])\n      if (res[0] && res[1]) {\n        this.bTokenCount= parseInt(res[0])\n        this.symbolCount= parseInt(res[1])\n      }\n    } catch(err) {\n      throw new Error(`PerpetualPool#_getLength error: ${err}`)\n    }\n  }\n  async getAddresses() {\n    try {\n      const res = await this._call('getAddresses')\n      this.lTokenAddress = res.lTokenAddress\n      this.pTokenAddress = res.pTokenAddress\n      this.routerAddress = res.routerAddress\n      this.protocolFeeCollector = res.protocolFeeCollector\n    } catch (err) {\n      throw new Error(`PerpetualPool#_getAddress error: ${err}`)\n    }\n  }\n  async getParameters() {\n    const res = await this._call('getParameters')\n    return {\n      decimals0: res.decimals0,\n      minBToken0Ratio: deriToNatural(res.minBToken0Ratio),\n      minPoolMarginRatio: deriToNatural(res.minPoolMarginRatio),\n      minInitialMarginRatio: deriToNatural(res.minInitialMarginRatio),\n      minMaintenanceMarginRatio: deriToNatural(res.minMaintenanceMarginRatio),\n      minLiquidationReward: deriToNatural(res.minLiquidationReward),\n      maxLiquidationReward: deriToNatural(res.maxLiquidationReward),\n      liquidationCutRatio: deriToNatural(res.liquidationCutRatio),\n      protocolFeeCollectRatio: deriToNatural(res.protocolFeeCollectRatio),\n    };\n  }\n  async getProtocolFeeAccrued() {\n    const res =  await this._call('getProtocolFeeAccrued')\n    this.protocolFeeAccrued = deriToNatural(res)\n  }\n  async getBToken(bTokenId) {\n    try {\n      //bTokenId = parseInt(bTokenId)\n      const res = await this._call('getBToken', [bTokenId]);\n      return {\n        bTokenAddress: res.bTokenAddress,\n        swapperAddress: res.bTokenAddress,\n        oracleAddress: res.oracleAddress,\n        decimals: res.decimals,\n        discount: deriToNatural(res.discount),\n        price: deriToNatural(res.price),\n        liquidity: deriToNatural(res.liquidity),\n        pnl: deriToNatural(res.pnl),\n        cumulativePnl: deriToNatural(res.cumulativePnl),\n      };\n    } catch (err) {\n      throw new Error(`PerpetualPool#getBToken error: ${err}`);\n    }\n  }\n  async getBTokenOracle(bTokenId) {\n    //bTokenId = parseInt(bTokenId)\n    return await this._call('getBTokenOracle', [bTokenId])\n  }\n  async getSymbol(symbolId) {\n    //symbolId = parseInt(symbolId)\n    try {\n      const res =  await this._call('getSymbol', [symbolId])\n      return {\n        symbol: res.symbol,\n        oracleAddress: res.oracleAddress,\n        multiplier: deriToNatural(res.multiplier),\n        feeRatio: deriToNatural(res.feeRatio),\n        fundingRateCoefficient: deriToNatural(res.fundingRateCoefficient),\n        price: deriToNatural(res.price),\n        cumulativeFundingRate: deriToNatural(res.cumulativeFundingRate),\n        tradersNetVolume: deriToNatural(res.tradersNetVolume),\n        tradersNetCost: deriToNatural(res.tradersNetCost),\n      };\n    } catch (err) {\n      throw new Error(`PerpetualPool#getSymbol error: ${err}`);\n    }\n  }\n  async getSymbolOracle(symbolId) {\n    //symbolId = parseInt(symbolId)\n    return await this._call('getSymbolOracle', [symbolId])\n  }\n\n  // trade history query methods\n  async _getTimeStamp(blockNumber) {\n    await this._init()\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n\n  // get block number when last updated\n  async getLastUpdatedBlockNumber() {\n    await this._init()\n    const res = await this.web3.eth.getStorageAt(this.contractAddress, 0)\n    //console.log('res', hexToNumber(res))\n    return hexToNumber(res)\n  }\n\n  // get block number when last updated\n  async getLatestBlockNumber() {\n    await this._init()\n    const res = await this.web3.eth.getBlockNumber()\n    //console.log('res', res)\n    return res\n  }\n\n  _calculateFee(volume, price, multiplier, feeRatio) {\n    return bg(volume)\n      .abs()\n      .times(price)\n      .times(multiplier)\n      .times(feeRatio)\n      .toString();\n  }\n  async _getBlockInfo(blockNumber) {\n    await this._init()\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n\n  async _getPastEvents(eventName, filter = {}, fromBlock = 0, to = 0) {\n    await this._init()\n    let events = [];\n    //let toBlock = await this._getBlockInfo(\"latest\");\n    let amount\n    if (['56', '97','127', '80001'].includes(this.chainId)) {\n      amount = 999\n    } else {\n      amount = 4999\n    }\n    if ((fromBlock + amount) > to) {\n      amount = to - fromBlock\n    }\n    while (fromBlock <= to) {\n      let es = await this.contract.getPastEvents(eventName, {\n        filter: filter,\n        fromBlock: fromBlock,\n        toBlock: fromBlock + amount,\n      });\n      for (let e of es) {\n        events.push(e);\n      }\n      fromBlock += amount + 1;\n      if ((fromBlock + amount) > to) {\n        amount = to - fromBlock\n      }\n    }\n    return events;\n  }\n}","import { ContractBase } from './contract_base'\nimport { perpetualPoolRouterAbi} from './abis';\nimport { naturalToDeri } from '../utils'\nimport { MAX_INT256 } from '../config';\n\nexport class PerpetualPoolRouter extends ContractBase {\n  constructor(chainId, contractAddress) {\n    super(chainId, contractAddress, perpetualPoolRouterAbi)\n    this.poolAddress = ''\n  }\n\n  // === query ===\n  async pool() {\n    this.poolAddress = await this._call('pool');\n    return this.poolAddress\n  }\n\n  // === transaction ===\n  async addLiquidity(accountAddress, bTokenId, amount) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'addLiquidity',\n      [bTokenId, naturalToDeri(amount)],\n      accountAddress\n    );\n  }\n\n  async removeLiquidity(accountAddress, bTokenId, amount, isMaximum) {\n    if (isMaximum) {\n      return await this._transact(\n        'removeLiquidity',\n        [bTokenId, MAX_INT256],\n        accountAddress\n      );\n    } else {\n      return await this._transact(\n        'removeLiquidity',\n        [bTokenId, naturalToDeri(amount)],\n        accountAddress\n      );\n    }\n  }\n\n  async addMargin(accountAddress, bTokenId, amount) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'addMargin',\n      [bTokenId, naturalToDeri(amount)],\n      accountAddress\n    );\n  }\n\n  async removeMargin(accountAddress, bTokenId, amount, isMaximum) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    if (isMaximum) {\n      //console.log('->', MAX_INT256)\n      return await this._transact(\n        'removeMargin',\n        [bTokenId, MAX_INT256],\n        accountAddress\n      );\n    } else {\n      return await this._transact(\n        'removeMargin',\n        [bTokenId, naturalToDeri(amount)],\n        accountAddress\n      );\n    }\n  }\n\n  async trade(accountAddress, symbolId, amount) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'trade',\n      [symbolId, naturalToDeri(amount)],\n      accountAddress\n    );\n  }\n\n  // with prices\n  async addLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'addLiquidityWithPrices',\n      [bTokenId, naturalToDeri(amount), priceInfos],\n      accountAddress\n    );\n  }\n  async removeLiquidityWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum) {\n    if (isMaximum) {\n      return await this._transact(\n        'removeLiquidityWithPrices',\n        [bTokenId, MAX_INT256, priceInfos],\n        accountAddress\n      );\n    } else {\n      return await this._transact(\n        'removeLiquidityWithPrices',\n        [bTokenId, naturalToDeri(amount), priceInfos],\n        accountAddress\n      );\n    }\n  }\n\n  async addMarginWithPrices(accountAddress, bTokenId, amount, priceInfos) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'addMarginWithPrices',\n      [bTokenId, naturalToDeri(amount), priceInfos],\n      accountAddress\n    );\n  }\n\n  async removeMarginWithPrices(accountAddress, bTokenId, amount, priceInfos, isMaximum) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    if (isMaximum) {\n      return await this._transact(\n        'removeMarginWithPrices',\n        [bTokenId, MAX_INT256, priceInfos],\n        accountAddress\n      );\n    } else {\n      return await this._transact(\n        'removeMarginWithPrices',\n        [bTokenId, naturalToDeri(amount), priceInfos],\n        accountAddress\n      );\n    }\n  }\n\n  async tradeWithPrices(accountAddress, symbolId, amount, priceInfos) {\n    if (!this.poolAddress) {\n      await this.pool()\n    }\n    return await this._transact(\n      'tradeWithPrices',\n      [symbolId, naturalToDeri(amount), priceInfos],\n      accountAddress\n    );\n  }\n\n  // async liquidate(acountAddress) {\n  //   if (!this.poolAddress) {\n  //     await this.pool()\n  //   }\n  //   return await this._transact(\n  //     'liquidate',\n  //     [accountAddress],\n  //     accountAddress\n  //   );\n  // }\n\n}","import { ContractBase } from './contract_base'\nimport { bTokenAbi } from './abis';\nimport { deriToNatural, bg } from '../utils'\nimport { MAX_UINT256} from '../config'\n\n\nexport class BToken extends ContractBase {\n  constructor(chainId, contractAddress) {\n    super(chainId, contractAddress, bTokenAbi);\n  }\n  // === query ===\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n  async _balanceOf(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balanceOf(address) {\n    const [res, decimals] = await Promise.all([\n      this._balanceOf(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n\n  async totalSupply() {\n    const res = await this._call('totalSupply');\n    return deriToNatural(res);\n  }\n\n  async isUnlocked(accountAddress, poolAddress) {\n    const allowance = await this._call('allowance', [\n      accountAddress,\n      poolAddress,\n    ]);\n    return bg(allowance).gt(0);\n  }\n\n  // === transaction ===\n  async unlock(accountAddress, poolAddress) {\n    return await this._transact(\n      'approve',\n      [poolAddress, MAX_UINT256],\n      accountAddress\n    );\n  }\n\n  // async transfer() {\n  // call transfer\n  // }\n}","import { ContractBase } from './contract_base'\nimport { lTokenAbi } from './abis';\nimport { deriToNatural } from '../utils'\n\nconst processAsset = (res) => {\n  return {\n    liquidity: deriToNatural(res[0]),\n    pnl: deriToNatural(res[1]),\n    lastCumulativePnl: deriToNatural(res[2]),\n  }\n}\nexport class LToken extends ContractBase {\n  constructor(chainId, contractAddress) {\n    super(chainId, contractAddress, lTokenAbi)\n  }\n\n  // === query ===\n  async balanceOf(accountAddress) {\n    return await this._call('balanceOf', [accountAddress]);\n  }\n  async pool() {\n    return await this._call('pool');\n  }\n  async exists(accountAddress) {\n    return await this._call('exists', [accountAddress]);\n  }\n  async getAsset(accountAddress, bTokenId) {\n    const res = await this._call('getAsset', [accountAddress, bTokenId]);\n    if (Array.isArray(res)) {\n      return processAsset(res)\n    } else {\n      console.log('address', this.contractAddress)\n      console.log('res', res)\n      throw new Error(`LToken#getAsset: invalid result with (${accountAddress} ${bTokenId})`)\n    }\n  }\n  async getAssets(accountAddress) {\n    const res = await this._call('getAssets', [accountAddress]);\n    if (Array.isArray(res)) {\n      return res.map(i => processAsset(i))\n    } else {\n      throw new Error(`LToken#getAsset: invalid result with (${accountAddress})`)\n    }\n  }\n\n  // === transaction ===\n}","import { ContractBase } from './contract_base'\nimport { pTokenAbi } from './abis';\nimport { deriToNatural } from '../utils'\n\nconst processPosition = (res) => {\n  return {\n    volume: deriToNatural(res.volume),\n    cost: deriToNatural(res.cost),\n    lastCumulativeFundingRate: deriToNatural(res.lastCumulativeFundingRate),\n  }\n}\nexport class PToken extends ContractBase {\n  constructor(chainId, contractAddress) {\n    super(chainId, contractAddress, pTokenAbi)\n  }\n\n  // === query ===\n  async pool() {\n    return await this._call('pool');\n  }\n  async balanceOf(accountAddress) {\n    return await this._call('balanceOf', [accountAddress]);\n  }\n  async exists(accountAddress) {\n    return await this._call('exists', [accountAddress]);\n  }\n  async getMargin(accountAddress, symbolId) {\n    const res = await this._call('getMargin', [accountAddress, symbolId]);\n    return deriToNatural(res)\n  }\n  async getMargins(accountAddress) {\n    const res = await this._call('getMargins', [accountAddress]);\n    if (Array.isArray(res)) {\n      return res.map((i) => deriToNatural(i))\n    }\n  }\n  async getPosition(accountAddress, symbolId) {\n    const res = await this._call('getPosition', [accountAddress, symbolId]);\n    if (Array.isArray(res)) {\n      return processPosition(res)\n    } else {\n      throw new Error(`PToken#getMargin: invalid result with (${accountAddress})`)\n    }\n  }\n  async getPositions(accountAddress) {\n    const res = await this._call('getPositions', [accountAddress]);\n    if (Array.isArray(res)) {\n      return res.map((i) => processPosition(i))\n    }\n  }\n\n  // === transaction ===\n}","import { ContractBase } from \"./contract_base\";\nimport { wooOracleAbi } from './abis';\nimport { bg } from '../utils';\n\nexport class WooOracle extends ContractBase {\n  constructor(chainId, address, symbol, decimal) {\n    super(chainId, address, wooOracleAbi)\n    this.symbol = symbol\n    this.decimal = decimal\n  }\n\n  async getPrice() {\n    const res = await this._call('_I_')\n    return bg(res, `-${this.decimal}`).toString();\n  }\n}","import { ContractBase } from \"./contract_base\";\nimport { chainlinkOracleAbi } from './abis';\nimport { bg } from \"../utils\";\n\nexport class ChainlinkOracle extends ContractBase {\n  constructor(chainId, address, symbol, decimal) {\n    super(chainId, address, chainlinkOracleAbi)\n    this.symbol = symbol\n    this.decimal = decimal\n  }\n\n  // decimals refers https://docs.chain.link/docs/matic-addresses\n  async getPrice() {\n    const res = await this._call('latestRoundData');\n    if (res && res.answer) {\n      return bg(res.answer, `-${this.decimal}`).toString()\n    }\n  }\n}","import { ContractBase } from \"./contract_base\";\nimport { wrappedOracleAbi } from './abis';\nimport { deriToNatural } from \"../utils\";\n\nexport class WrappedOracle extends ContractBase {\n  constructor(chainId, address, symbol, decimal) {\n    super(chainId, address, wrappedOracleAbi)\n    this.symbol = symbol\n    this.decimal = decimal\n  }\n\n  // decimals refers https://docs.chain.link/docs/matic-addresses\n  async getPrice() {\n    const res = await this._call('getPrice');\n    if (res) {\n      return deriToNatural(res).toString()\n    }\n  }\n}","import { ContractBase } from \"./contract_base\";\nimport { brokerManagerAbi } from './abis';\n\nexport class BrokerManager extends ContractBase {\n  constructor(chainId, address) {\n    super(chainId, address, brokerManagerAbi)\n  }\n  // query\n  async getBroker(accountAddress) {\n    return await this._call('getBroker', [accountAddress])\n  }\n\n  // transaction\n  async setBroker(accountAddress, brokerAddress) {\n    return await this._transact(\n      'setBroker',\n      [brokerAddress],\n      accountAddress\n    );\n  }\n}","import React, { useState, useEffect } from 'react'\nimport {isBrowser,isMobile} from 'react-device-detect'\nimport LoadableComponent from './utils/LoadableComponent';\nimport { inject, observer } from 'mobx-react';\n\nconst DesktopApp = LoadableComponent(() => import('./desktop/index'))\nconst MobileApp = LoadableComponent(() => import('./mobile/index'))\n\nfunction App({intl}) {\n  if(isBrowser){\n    return <DesktopApp locale={intl.locale}/>\n  }\n  if(isMobile){\n    return <MobileApp locale={intl.locale}/>\n  }\n}\n\nexport default inject('intl')(observer(App)) ;\n","import { makeObservable, observable, action, computed } from \"mobx\";\nimport { restoreLocale, storeLocale } from \"../utils/utils\";\nimport supportedCatalog from '../locales/lang.json'\n\n\nconst cache = {}\n\nfunction importAll(r){\n  return r.keys().forEach(key => {\n    const path = key.split('/')\n    const lang = path[1]\n    const page = path[2].split('.')[0].toLowerCase()\n    if(!cache[lang]) {\n      cache[lang] = {}\n    }\n    \n    if(/mobile-/.test(page)){\n      const pageName= page.split('-')[1]\n      if(!cache[lang][pageName]){ \n        cache[lang][pageName] = {}\n      }\n      cache[lang][pageName]['mobile'] = r(key)\n    } else {\n      cache[lang][page] = r(key)\n    }\n  });\n}\n//lang.json 是语言包目录，需要排除在外\nimportAll(require.context(`../locales/`,true,/^((?!lang).)*\\.json$/))\n\nclass Intl {\n  locale = 'en'\n  constructor(){\n    makeObservable(this,{\n      locale : observable,\n      setLocale : action,\n      dict : computed,\n      localeLabel: computed\n    })\n    const language = navigator.language\n    const prefix = language && language.split('-')[0]\n    const locale = restoreLocale()\n    if(locale && Object.keys(supportedCatalog).includes(locale) ){\n      this.locale = locale\n    } else if(prefix && Object.keys(supportedCatalog).includes(prefix)){\n      this.locale = prefix\n    }\n  }\n\n  setLocale(locale){\n    if(locale){\n      this.locale = locale;\n      storeLocale(locale)\n    }\n  }\n\n  get(page,key){\n    return cache[this.locale][page][key]\n  }\n\n  get dict(){         \n    return cache[this.locale]\n  }\n\n  get localeLabel(){\n    return supportedCatalog[this.locale]\n  }\n}\n\nexport default new Intl();","\nimport {getUserWalletBalance ,DeriEnv,connectWallet, isUnlocked, unlock } from \"../lib/web3js/indexV2\";\nimport config from '../config.json'\nimport { formatBalance, eqInNumber, storeChain } from \"../utils/utils\";\nimport { observable, computed, action, makeAutoObservable } from \"mobx\";\n\n\nclass Wallet {\n  \n  detail = {}\n  \n  constructor(){\n    makeAutoObservable(this,{\n      detail : observable,\n      setDetail : action,\n      supportV2 : computed,\n      supportV1 : computed,\n      supportAllVersion : computed,\n      supportChain : computed\n    })\n  }\n\n  supportWeb3 = () => !!window.ethereum\n\n  isConnected = () => !!this.detail.account;\n\n\n  async isApproved(pool,bTokenId){\n    if(this.detail.chainId && this.supportChain){\n      const isApproved = await isUnlocked(this.detail.chainId,pool,this.detail.account,bTokenId).catch(e => console.error('load approve error'))\n      this.detail.isApproved = isApproved;\n      this.setDetail(this.detail)\n      return isApproved;\n    }\n  }\n\n  approve = async (pool,bTokenId) => {\n    if(this.detail.chainId){\n      const approved = await unlock(this.detail.chainId,pool,this.detail.account,bTokenId);\n      return approved\n    }\n  }\n\n  connect =  async () => {\n    const res = await connectWallet();\n    return new Promise(async (resolve,reject) => {\n      if(res.success){\n        const {chainId,account} = res\n        const wallet = await this.loadWalletBalance(chainId,account);      \n        resolve(wallet)\n      } else {\n        reject(null)\n      }\n    })\n  }\n\n  loadWalletBalance = async (chainId,account) => {\n    const balance = await getUserWalletBalance(chainId,account)\n    const detail = {chainId,account,balance,formatBalance : formatBalance(balance)}\n    const env = DeriEnv.get();\n    const {chainInfo} = config[env]\n    \n    if(chainInfo[chainId]){\n      Object.assign(detail,{...chainInfo[chainId],supported : true})\n      storeChain(chainInfo[chainId])\n    }\n    this.setDetail(detail)\n    return detail;\n  }\n\n  get = () => {\n    return this.detail;\n  }\n\n  setDetail(detail){\n    this.detail = detail;\n  }\n\n  refresh(){\n    this.loadWalletBalance(this.detail.chainId,this.detail.account);\n  }\n\n  get supportV2() {\n    return this.detail.supportV2\n  }\n\n  get supportV1(){\n    return this.detail.supportV1;\n  }\n\n  get supportAllVersion(){\n    return this.detail.supportV1 && this.detail.supportV2\n  }\n\n  get supportChain(){\n    return this.detail.supported\n  }\n\n\n}\n\nexport default Wallet;","import { makeAutoObservable, observable, action} from \"mobx\";\nimport WebSocket from \"socket.io-client\";\n\nclass Oracle {\n  symbol = 'BTCUSD'\n  timeType = 'min'\n  index = 0.00\n  kData = []\n  ws = null\n  paused = false;\n  listeners = {}\n  already = false\n\n  constructor(){\n    makeAutoObservable(this,{\n      index : observable,\n      kData : observable,\n      setIndex : action,\n    })\n  }\n\n\n  initWebSocket(){\n    if(this.ws === null) {\n      this.ws = new WebSocket(process.env.REACT_APP_WSS_URL, {        \n        transports: ['websocket'],\n        withCredentials: true\n      })\n      this.ws.on('connect',() => {\n        if(this.already){\n          this.ws.emit('get_kline_update', {'symbol': this.symbol, 'time_type': this.timeType})\n          console.log('ws is reconnected already')\n        }\n        console.log('ws is already connected');\n      });\n    }    \n  }\n\n\n  load(symbol,timeType = 'min'){\n    // symbol = symbol+'_V2'\n    this.initWebSocket()\n    this.ws.on('kline_update',data => {\n      const obj = {}\n      let time = data.time\n      if (data.symbol.toUpperCase() === this.symbol.toUpperCase()) {\n        obj.time = time \n        obj.low = Number(data.low)\n        obj.high = Number(data.high)\n        obj.open = Number(data.open)\n        obj.close = Number(data.close)\n        obj.volume = Number(data.volume)\n        obj.time_type = data.time_type\n        obj.symbol = data.symbol\n        if(!this.paused) {\n          this.setIndex(obj.close)\n          for(const key of Object.keys(this.listeners)){\n            if(typeof this.listeners[key] === 'function'){\n              this.listeners[key](obj)\n            }\n          }\n        }\n      }\n    })\n    if(symbol !== this.symbol){\n      this.unsubscribeBars(this.symbol);\n    }\n    this.setSymbol(symbol)\n    this.setTimeType(timeType);\n    this.ws.emit('get_kline_update', {'symbol': this.symbol, 'time_type': this.timeType})\n    this.already = true\n  }\n\n  addListener(id,listener){\n    if(!this.listeners[id]) {\n      this.listeners[id] = listener\n    }    \n  }\n\n\n\n  unsubscribeBars(symbol){\n    if(this.ws){\n      this.ws.emit('un_get_kline_update', {\n        symbol : symbol, 'time_type' : 'min'\n      })\n    }\n  }\n\n\n  //暂不用\n  loadHistory(symbol,timeType,callback){\n    this.ws.on('kline_history', data => {\n      const history = data.map(el => {\n        return {\n          time: el.time,\n          low: Number(el.low),\n          high: Number(el.high),\n          open: Number(el.open),\n          close: Number(el.close),\n          volume: Number(el.volume)\n        }\n      })\n      if(callback){\n        console.log('history ->',history[history.length-1].time)\n        callback(history)\n      }\n    })\n    this.ws.emit('get_kline', {'symbol': symbol, 'time_type': timeType, 'bars': 1000})\n  }\n\n  resume(){\n    this.setPause(false)\n  }\n\n  pause(){\n    this.setPause(true)\n  }\n\n  setIndex(index){\n    if(!this.paused) {\n      this.index = index;\n    }\n  }\n\n  setSymbol(symbol){\n    this.symbol = symbol\n  }\n\n  setTimeType(timeType){\n    this.timeType = timeType;\n  }\n  setPause(paused){\n    this.paused = paused\n  }\n}\n\nexport default Oracle","import { getPositionInfo } from \"../lib/web3js/indexV2\"\n\nexport default class Position {\n\n  callback = () => {}\n   wallet = null;\n   spec = null\n \n   mockPositionInfo = {\n    averageEntryPrice: \"\",\n    liquidationPrice: \"\",\n    margin: \"20000\",\n    marginHeld: \"10068.26538\",\n    marginHeldBySymbol : \"293.16152\",\n    unrealizedPnl: \"3.1311\",\n    volume: \"800\",\n   }\n\n   async load(wallet,spec,callback){\n     if(wallet && wallet.isConnected() && wallet.supportChain && spec && spec.pool){\n      const position = await getPositionInfo(wallet.detail.chainId,spec.pool,wallet.detail.account,spec.symbolId)\n      // const fundingFee = await getFun\n      if(position){\n        if(callback){\n          callback(position)\n        }\n      }\n      this.start(wallet,spec,callback)\n      return position;\n     }\n   }\n\n   start(wallet,spec,callback){\n     if(this.interval !== null){\n       clearInterval(this.interval);\n     }\n    this.interval = window.setInterval(() => this.load(wallet,spec,callback),3000)      \n    if(wallet){\n      this.wallet= wallet; \n    }\n    if(spec){\n      this.spec = spec\n    }\n    if(callback){\n      this.callback = callback;\n    }\n   }\n\n   pause(){\n    clearInterval(this.interval);\n    this.interval = null;\n   }\n\n   resume(wallet,spec,callback){\n     this.start(wallet,spec,callback || this.callback)\n   }\n\n   \n\n\n \n}","import { getSpecification } from \"../lib/web3js/indexV2\";\n\nexport default class Contract {\n  info = {\n    bSymbol:'BUSD',\n    symbol:'BTCUSD',\n    multiplier:'0.0001',\n    fundingRateCoefficient:'0.0000025',\n    minInitialMarginRatio:0.1,\n    minMaintenanceMarginRatio:0.05,\n    feeRatio:0.0005,\n  }\n\n  async load(wallet,config){\n    if(wallet && wallet.supportChain && config && config.pool !== this.info.pool){\n      const spec = await getSpecification(wallet.detail.chainId,config.pool,config.bTokenId,config.symbolId);\n      this.setInfo(spec)\n    }\n    return this.info\n  }\n\n  setInfo(info){\n    this.info = info\n  }\n}","import { getTradeHistory } from \"../lib/web3js/indexV2\";\n\n\nexport default class History {\n\n   async load(wallet,config){\n      if(wallet && wallet.supportChain && wallet.detail.chainId && config && config.pool){\n         const all = await getTradeHistory(wallet.detail.chainId,config.pool,wallet.detail.account,config.symbolId);    \n         return all;\n      } else {\n         return []\n      }\n   }\n}","import { observable, action, computed, makeObservable } from \"mobx\";\nimport Oracle from \"./Oracle\";\nimport Position from \"./Position\";\nimport Contract from \"./Contract\";\nimport History from './History'\nimport Config from \"./Config\";\nimport { eqInNumber, storeConfig, getConfigFromStore, restoreChain, getFormatSymbol } from \"../utils/utils\";\nimport { getFundingRate } from \"../lib/web3js/indexV2\";\nimport { bg } from \"../lib/web3js/indexV2\";\nimport Intl from \"./Intl\";\nimport version from './Version'\n\n/**\n * 交易模型\n * 关联对象\n * 1. chain\n * 2. Oracle\n * 3. position\n * 4. contract\n * 5. history\n * 计算\n * 1. dynamic balance\n * 2. available blance\n * 响应事件\n * 1. chain change\n * 2. chain’s symbol changed\n * 3. index update\n * 4. volum change\n * 5. margin change\n * 输出\n * 1. dynamic balance\n * 2. margin\n * 3. available balance\n * 4. volume\n * 5. specs\n * 6. spec\n * 7. position\n * 8. contract\n * 9. fundingRate\n */\n\nexport default class Trading {\n  version = null;\n  wallet = null;\n  configs = [] \n  config = null;\n  index = ''\n  volume = ''\n  paused = false\n  slideIncrementMargin = 0\n  position = {}\n  contract = {}\n  fundingRate = {}\n  history = []\n  userSelectedDirection = 'long'\n  supportChain = true\n\n  constructor(){\n    makeObservable(this,{\n      index : observable,\n      volume : observable,\n      slideIncrementMargin : observable,\n      fundingRate : observable,\n      position : observable,\n      history : observable,\n      contract : observable,\n      userSelectedDirection : observable,\n      supportChain : observable,\n      setWallet :action,\n      setConfigs : action,\n      setConfig : action,\n      setIndex : action,\n      setContract : action,\n      setPosition : action,\n      setVolume : action,\n      setUserSelectedDirection : action,\n      setSupportChain : action,\n      setFundingRate : action,\n      setHistory : action,\n      setSlideMargin : action,\n      amount : computed,\n      fundingRateTip : computed,\n      direction : computed,\n      volumeDisplay : computed,\n      isNegative : computed,\n      isPositive : computed\n    })\n    this.configInfo = new Config();\n    this.oracle = new Oracle();\n    this.positionInfo = new Position()\n    this.contractInfo = new Contract();\n    this.historyInfo = new History()\n  }\n\n  /**\n   * 初始化\n   */\n  async init(wallet){    \n    const all = await this.configInfo.load(version);\n    //如果连上钱包，有可能当前链不支持\n    if(wallet.isConnected()){\n      this.setWallet(wallet);\n      this.setConfigs(all.filter(c => eqInNumber(wallet.detail.chainId,c.chainId)))\n      let defaultConfig = this.getDefaultConfig(this.configs,wallet);\n      //如果还是为空，则默认用所有config的第一条\n      if(!defaultConfig){\n        //没有默认的配置，\n        this.setSupportChain(false);\n        defaultConfig = all.length > 0 ? all[0] : {}\n      }\n      this.setConfig(defaultConfig);\n    } \n    //如果没有钱包或者链接的链不一致，设置默认config，BTCUSD\n    if(!wallet.isConnected() && !wallet.supportWeb3()){\n      //没有钱包插件\n      version.setCurrent('v2')\n      const all = await this.configInfo.load(version);\n      const defaultConfig = all.find(c => c.symbol === 'BTCUSD')\n      this.setConfig(defaultConfig)\n    }\n    this.loadByConfig(this.wallet,this.config,true)\n    this.setVolume('')\n  }\n\n  async switch(spec){\n    const cur = this.configs.find(config => config.pool === spec.pool && config.symbolId === spec.symbolId)\n    //v1 只需要比较池子地址，v2 需要比较symbolId\n    let changed = false\n    if(version){\n      changed = version.isV1 ? spec.pool !== this.config.pool : spec.symbolId !== this.config.symbolId\n    }\n    if(cur){\n      this.pause();\n      this.setConfig(cur)\n      this.loadByConfig(this.wallet,cur,changed);  \n      if(changed){\n        this.store(cur)\n      }    \n      this.resume()\n      this.setVolume('')\n    }\n  }\n\n  async loadByConfig(wallet,config,symbolChanged){\n     //position\n     const position = await this.positionInfo.load(wallet,config,position => {       \n        this.setPosition(position);\n     })\n\n     //切换指数\n    if(symbolChanged && config){\n      const symbol = getFormatSymbol(config.symbol)\n      this.oracle.unsubscribeBars(symbol);\n      this.oracle.addListener('trading',data => {\n        this.setIndex(data.close)\n      })\n      \n      if(position){\n        this.setIndex(position.price);\n      }\n      this.oracle.load(symbol)\n    }\n     //contract\n     const contract = await this.contractInfo.load(wallet,config)    \n\n     //funding rate\n     const fundingRate = await this.loadFundingRate(wallet,config)\n     \n     //history\n     const history = await this.historyInfo.load(wallet,config);\n\n     if(contract){\n      this.setContract(contract)\n     }\n\n     if(fundingRate){\n      this.setFundingRate(fundingRate)\n     }\n\n     if(history){\n      this.setHistory(history);\n     }\n  }\n\n\n    //优先使用session storage 的，如果缓存跟用户当前链一直，则命中缓存，否则取当前配置第一条\n    getDefaultConfig(configs = [],wallet){\n      let defaultConfig = null;\n      if(configs.length > 0){    \n        const fromStore = this.getFromStore();\n        if(fromStore && eqInNumber(wallet.detail.chainId,fromStore.chainId)){\n          defaultConfig = fromStore;\n        }\n        if(defaultConfig){\n          //虽然从缓存获得config ，需要判断池子地址是否一致，否则用可用config的第一条\n          const pos = configs.findIndex(c => c.pool === defaultConfig.pool);\n          if(pos === -1){\n            defaultConfig = configs[0];\n          }\n        } else {\n          defaultConfig = configs[0]\n        }   \n      }\n      return defaultConfig;    \n    }\n\n \n\n  //存起来\n  store(config){\n    storeConfig(version.current,config)\n  }\n\n  getFromStore(){\n    return getConfigFromStore(version.current)\n  }\n\n  async syncFundingRate(){\n    //资金费率和仓位同步\n    const fundingRate = await this.loadFundingRate(this.wallet,this.config)   \n    if(fundingRate){\n      this.setFundingRate(fundingRate)      \n    }\n  }\n\n  async refresh(){\n    this.pause()\n    const position = await this.positionInfo.load(this.wallet,this.config, async (position)  => {       \n      this.setPosition(position);\n      this.syncFundingRate();\n    });\n    if(position){\n      this.setPosition(position)\n    }\n    this.syncFundingRate();\n    this.wallet.loadWalletBalance(this.wallet.detail.chainId,this.wallet.detail.account)\n    const history = await this.historyInfo.load(this.wallet,this.config)\n    if(history){\n      this.setHistory(history)\n    }\n    this.setVolume('')\n    this.resume();\n  }\n\n  /**\n   * 暂停实时读取index和定时读取position\n   */\n  pause(){\n    this.setPaused(true)\n    this.oracle.pause();\n    this.positionInfo.pause();\n  }\n\n  /**\n   * 恢复读取\n   */\n  resume(){\n    this.setPaused(false)\n    this.oracle.resume();\n    this.positionInfo.resume(this.wallet,this.config);\n  }\n\n  setWallet(wallet){\n    this.wallet = wallet;\n  }\n\n  setConfigs(configs){\n    this.configs = configs\n  }\n\n  setConfig(config){\n    this.config = config\n  }\n\n  setIndex(index){\n    this.index = index;\n  }\n\n  setPosition(position){\n    if(position){\n      this.position = position\n    }\n  }\n\n  setContract(contract){\n    this.contract = contract\n  }\n\n  setHistory(history){\n    this.history = history\n  }\n\n  setFundingRate(fundingRate){\n    this.fundingRate = fundingRate;\n  }\n\n  setVolume(volume){\n    this.volume = volume;\n  }\n\n  setPaused(paused){\n    this.paused = paused\n  }\n\n  setSupportChain(support){\n    this.supportChain = support;\n  }\n\n  setUserSelectedDirection(direction){\n    this.userSelectedDirection = direction\n  }\n\n  setSlideMargin(slideIncrementMargin){\n    if(slideIncrementMargin !== ''){\n      this.slideIncrementMargin =  slideIncrementMargin\n      const position = this.position;\n      const price = position.price || this.index\n      const increment = slideIncrementMargin - position.marginHeld\n      const volume = increment / (price * this.contract.multiplier * this.contract.minInitialMarginRatio);\n      this.setVolume(volume.toFixed(0))\n    }\n  }\n\n\n  get volumeDisplay(){\n    if(Math.abs(this.volume) === 0 || this.volume === '' || this.volume === '-' || this.volume === 'e' || isNaN(this.volume)) {\n      return '';\n    } else {\n      return Math.abs(this.volume)\n    }\n  }\n  \n\n  get amount(){\n    const position = this.position\n    const contract = this.contract;\n    const volume = this.volume === '' || isNaN(this.volume) ? 0 : Math.abs(this.volume)\n    let {margin, marginHeldBySymbol:currentSymbolMarginHeld ,marginHeld,unrealizedPnl} = position\n    const price = position.price || this.index\n    //v2\n    let otherMarginHeld = bg(marginHeld).minus(currentSymbolMarginHeld)\n    otherMarginHeld = otherMarginHeld.isNaN() ? bg(0) : otherMarginHeld;\n    const contractValue = volume * price * contract.multiplier;\n    const incrementMarginHeld = contractValue * contract.minInitialMarginRatio\n    let totalMarginHeld = bg(marginHeld) ;\n\n    //如果当前仓位为正仓用户做空或者当前仓位为负仓用户做多，总仓位相减,取绝对值\n    if((this.isPositive && this.userSelectedDirection === 'short') || (this.isNegative && this.userSelectedDirection === 'long')){\n      totalMarginHeld = totalMarginHeld.minus(incrementMarginHeld);\n      if(totalMarginHeld.lt(otherMarginHeld)){\n        totalMarginHeld =  otherMarginHeld.plus(otherMarginHeld.minus(totalMarginHeld).abs())        \n      } \n      currentSymbolMarginHeld = bg(currentSymbolMarginHeld).minus(incrementMarginHeld).abs().toFixed(2)\n    } else {\n      totalMarginHeld = bg(marginHeld).plus(incrementMarginHeld)\n      if(currentSymbolMarginHeld){\n        currentSymbolMarginHeld = bg(currentSymbolMarginHeld).plus(incrementMarginHeld).toFixed(2);\n      }\n    }\n\n    const dynBalance = margin && bg(margin).plus(unrealizedPnl).toFixed(2);    \n    //总保证金和当前symbol保证金不能超过余额\n    totalMarginHeld = totalMarginHeld.gt(dynBalance) ? dynBalance : totalMarginHeld.toFixed(2)\n    if(currentSymbolMarginHeld){\n      currentSymbolMarginHeld = (+currentSymbolMarginHeld) > (+dynBalance) ? dynBalance : (+currentSymbolMarginHeld).toFixed(2);\n    }\n    let available = bg(dynBalance).minus(totalMarginHeld).toFixed(2)\n    const exchanged = bg(volume).multipliedBy(contract.multiplier).toFixed(4)\n    const totalVolume = this.userSelectedDirection === 'short' ? (-this.volumeDisplay + (+position.volume)) : ((+this.volumeDisplay) +  (+position.volume))    \n    const totalContractValue = totalVolume * price * contract.multiplier\n    const leverage = Math.abs(totalContractValue / (+dynBalance)).toFixed(1);\n    available = (+available) < 0 ? 0 : available\n    return {\n      volume : this.volume,\n      dynBalance : dynBalance,\n      margin : totalMarginHeld,\n      available : available,\n      exchanged : exchanged,\n      currentSymbolMarginHeld : currentSymbolMarginHeld,\n      leverage : leverage\n    }\n  }\n\n  get direction(){    \n    // 正仓\n    if(this.margin !== ''){\n      if((+this.position.volume) > 0) {\n        if(Math.abs(this.volume) > Math.abs(this.position.volume)) {\n          return 'long'\n        } else {\n          return 'short'\n        }\n      } else if((+this.position.volume) < 0){\n        //负仓\n        if((+this.volume) > Math.abs(+this.position.volume)){\n          return 'short'\n        } else {\n          return 'long'\n        }\n      }\n    }\n    return 0\n  }\n\n  //正仓\n  get isPositive(){\n    return bg(this.position.volume).gt(0);\n  }\n\n  //负仓\n  get isNegative(){\n    return bg(this.position.volume).isNegative();\n  }\n\n  //资金费率\n  async loadFundingRate(wallet,config){\n    if(config){\n      const chainId = wallet && wallet.isConnected() && wallet.supportChain ? wallet.detail.chainId : config.chainId\n      if(config){    \n        const res = await getFundingRate(chainId,config.pool,config.symbolId).catch(e => console.error('getFundingRate was error,maybe network is wrong'))\n        return res;\n      }\n    }\n  }\n\n  get fundingRateTip(){    \n    if(version && version.isV2){\n      if(this.fundingRate && this.fundingRate.fundingRatePerBlock && this.config){\n        if(Intl.locale === 'zh'){\n          return `${Intl.get('lite','funding-rate-per-block')} = ${this.fundingRate.fundingRatePerBlock}` +\n        `\\n ${Intl.get('lite','per-block')} ${Intl.get('lite','1-long-contract-pays-1-short-contract')} (${this.fundingRate.fundingRatePerBlock} * ${Intl.get('lite','index-price-camelize')} * ${this.contract.multiplier} ) ${this.config.bTokenSymbol}`        \n        } else {\n          return `${Intl.get('lite','funding-rate-per-block')} = ${this.fundingRate.fundingRatePerBlock}` +\n        `\\n${Intl.get('lite','1-long-contract-pays-1-short-contract')} (${this.fundingRate.fundingRatePerBlock} * ${Intl.get('lite','index-price-camelize')} * ${this.contract.multiplier} ) ${this.config.bTokenSymbol} ${Intl.get('lite','per-block')}`        \n        }\n        \n      }\n    } else {\n      if(this.fundingRate && this.fundingRate.fundingRatePerBlock && this.config){\n        if(Intl.locale === 'zh'){\n          return `${Intl.get('lite','funding-rate-per-block')} = ${this.fundingRate.fundingRatePerBlock}` +\n        `\\n${Intl.get('lite','per-block')} ${Intl.get('lite','1-long-contract-pays-1-short-contract')} ${this.fundingRate.fundingRatePerBlock} ${this.config.bTokenSymbol} `        \n        } else {\n          return `${Intl.get('lite','funding-rate-per-block')} = ${this.fundingRate.fundingRatePerBlock}` +\n        `\\n${Intl.get('lite','1-long-contract-pays-1-short-contract')} ${this.fundingRate.fundingRatePerBlock} ${this.config.bTokenSymbol} ${Intl.get('lite','per-block')})`        \n        }        \n      }\n    }\n    \n    return ''\n  }\n\n\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {HashRouter} from 'react-router-dom'\nimport App from './App';\nimport './assets/deri.less';\nimport { Provider } from 'mobx-react';\nimport Wallet from './model/Wallet';\nimport Trading from './model/Trading';\nimport { DeriEnv } from './lib/web3js/indexV2';\nimport version from './model/Version';\nimport intl from './model/Intl';\n\nconst wallet = new Wallet();\nconst trading = new Trading()\n// const version = new Version();\n\nif(process.env.NODE_ENV === 'production') {\n  DeriEnv.set('prod')\n}\n// DeriEnv.set('prod')\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider wallet={wallet}  trading={trading} version={version} intl={intl}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n","import { getConfig } from './config';\n\nconst expendPoolConfig = (config) => {\n  const pools = config.pools;\n  //console.log(pools)\n  return pools\n    .map((pool) => {\n      let result = [];\n      for (let i = 0; i < pool.bTokens.length; i++) {\n        const bToken = pool.bTokens[i];\n        for (let i = 0; i < pool.symbols.length; i++) {\n          const symbol = pool.symbols[i];\n          result.push({\n            pool: pool.pool,\n            pToken: pool.pToken,\n            lToken: pool.lToken,\n            router: pool.router,\n            initialBlock: pool.initialBlock,\n            chainId: pool.chainId,\n            bToken: bToken.bToken,\n            bTokenId: bToken.bTokenId,\n            bTokenSymbol: bToken.bTokenSymbol,\n            symbol: symbol.symbol,\n            symbolId: symbol.symbolId,\n            unit: symbol.unit,\n            version: 'v2',\n          });\n        }\n      }\n      return result;\n    })\n    .flat();\n};\n\nexport const getPoolConfigList = () => {\n  const config = getConfig()\n  return expendPoolConfig(config)\n};\n\nexport const getFilteredPoolConfigList = (poolAddress, bTokenId, symbolId) => {\n  bTokenId = typeof bTokenId === 'number' ? bTokenId.toString() : bTokenId\n  symbolId = typeof symbolId === 'number' ? symbolId.toString() : symbolId\n  const poolConfigList = getPoolConfigList()\n  const check = bTokenId != null\n    ? symbolId != null\n      ? (i) =>\n          i.pool === poolAddress &&\n          i.bTokenId === bTokenId &&\n          i.symbolId === symbolId\n      : (i) => i.pool === poolAddress && i.bTokenId === bTokenId\n    : (symbolId != null ? (i) => i.pool === poolAddress && i.symbolId === symbolId : (i) => i.pool === poolAddress);\n  if (poolConfigList.length > 0) {\n    const res = poolConfigList.filter(check)\n    if (res && res.length > 0) {\n      return res\n    }\n  }\n  throw new Error(`Cannot find the pool config by poolAddress(${poolAddress}) bTokenId(${bTokenId}) and symbolId(${symbolId})`)\n}\n\nexport const getPoolConfig = (poolAddress, bTokenId, symbolId) => {\n  const res =  getFilteredPoolConfigList(poolAddress, bTokenId, symbolId)\n  return res[0]\n}\n\nexport const _getPoolConfig = (poolAddress) => {\n  const config = getConfig()\n  const pools = config.pools;\n  let pool = pools.find((p) => p.pool === poolAddress);\n  //console.log(pool)\n  if (pool) {\n    return pool\n  }\n  throw new Error(`Cannot find the pool by poolAddress(${poolAddress})`);\n};\n\nexport const getPoolConfig2 = (poolAddress, bTokenId, symbolId) => {\n  const pool = _getPoolConfig(poolAddress);\n  const defaultBToken = {\n    bTokenId: '',\n    bTokenSymbol: '',\n    bToken: '',\n  };\n  const defaultSymbol = {\n    symbolId: '',\n    symbol: '',\n    unit: '',\n  };\n  let bToken, symbol;\n  if (bTokenId !== undefined || bTokenId !== null) {\n    bToken = pool.bTokens.find((b) => b.bTokenId === bTokenId) || defaultBToken;\n  }\n  if (symbolId !== undefined || symbolId !== null) {\n    symbol = pool.symbols.find((b) => b.symbolId === symbolId) || defaultSymbol;\n  }\n  return {\n    pool: pool.pool,\n    pToken: pool.pToken,\n    lToken: pool.lToken,\n    router: pool.router,\n    broker: pool.broker,\n    bTokenCount: pool.bTokenCount,\n    symbolCount: pool.symbolCount,\n    initialBlock: pool.initialBlock,\n    chainId: pool.chainId,\n    bToken: bToken.bToken,\n    bTokenId: bToken.bTokenId,\n    bTokenSymbol: bToken.bTokenSymbol,\n    symbol: symbol.symbol,\n    symbolId: symbol.symbolId,\n    unit: symbol.unit,\n    version: 'v2',\n  };\n};\n\nexport const getPoolBTokenList = (poolAddress) => {\n  const pool = _getPoolConfig(poolAddress);\n  return pool.bTokens.map((b) => {\n    return {\n      bTokenId: b.bTokenId,\n      bTokenSymbol: b.bTokenSymbol,\n      bTokenAddress: b.bToken,\n    };\n  });\n};\n\nexport const getPoolBTokenIdList = (poolAddress) => {\n  const pool = _getPoolConfig(poolAddress);\n  return pool.bTokens.map((b) => b.bTokenId);\n};\n\nexport const getPoolSymbolList = (poolAddress) => {\n  const pool = _getPoolConfig(poolAddress);\n  return pool.symbols.map((s) => {\n    return {\n      symbol: s.symbol,\n      symbolId: s.symbolId,\n      unit: s.unit,\n    };\n  });\n};\n\nexport const getPoolSymbolIdList = (poolAddress) => {\n  const pool = _getPoolConfig(poolAddress);\n  return pool.symbols.map((b) => b.symbolId);\n};","// add a new chain: validateChainId, getChainProviderUrls, getNetworkName, getDailyBlockNumberConfig\nexport const getChainIds = () => {\n  return ['1', '3', '56', '97', '128', '256', '137', '80001'];\n};\n\nexport const getChainProviderUrls = (chainId) => {\n  const chainProviderUrls = [\n    {\n      provider_urls: [\n        'https://mainnet.infura.io/v3/d0e6582644a845ee8d7c3c18683fec06',\n      ],\n      chainId: '1',\n    },\n    {\n      provider_urls: [\n        'https://bsc-dataseed.binance.org',\n        'https://bsc-dataseed1.defibit.io/',\n        'https://bsc-dataseed1.ninicoin.io/',\n      ],\n      chainId: '56',\n    },\n    {\n      provider_urls: ['https://http-mainnet.hecochain.com'],\n      chainId: '128',\n    },\n    {\n      provider_urls: [\n        'https://rpc-mainnet.matic.network',\n        'https://rpc-mainnet.maticvigil.com',\n        'https://rpc-mainnet.matic.quiknode.pro',\n        'https://matic-mainnet.chainstacklabs.com',\n        'https://matic-mainnet-full-rpc.bwarelabs.com',\n        'https://matic-mainnet-archive-rpc.bwarelabs.com',\n      ],\n      chainId: '137',\n    },\n    {\n      provider_urls: [\n        'https://ropsten.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '3',\n    },\n    {\n      provider_urls: [\n        'https://kovan.infura.io/v3/ec73e2f0c79a42c0997ee535364de584',\n      ],\n      chainId: '42',\n    },\n    {\n      provider_urls: [\n        //'https://data-seed-prebsc-1-s1.binance.org:8545/',\n        'https://data-seed-prebsc-1-s2.binance.org:8545/',\n        'https://data-seed-prebsc-1-s3.binance.org:8545/',\n        'https://data-seed-prebsc-2-s1.binance.org:8545/',\n        'https://data-seed-prebsc-2-s2.binance.org:8545/',\n        'https://data-seed-prebsc-2-s3.binance.org:8545/',\n      ],\n      chainId: '97',\n    },\n    {\n      provider_urls: ['https://http-testnet.hecochain.com'],\n      chainId: '256',\n    },\n    {\n      provider_urls: [\n        'https://rpc-mumbai.matic.today',\n        'https://rpc-mumbai.maticvigil.com',\n        'https://matic-mumbai.chainstacklabs.com',\n        'https://matic-testnet-archive-rpc.bwarelabs.com',\n      ],\n      chainId: '80001',\n    },\n  ];\n\n  const res = chainProviderUrls.filter((i) => i.chainId  === chainId)\n  //console.log('res',res)\n  if (res.length > 0) {\n    return res[0].provider_urls\n  } else {\n    throw new Error(`getChainProviderUrls: no urls for chainId ${chainId}`)\n  }\n}\n\nexport const getDailyBlockNumberConfig = () => {\n  // let chainBlockNumberList = [\n  //   '2367422',\n  //   '2367422',\n  //   '10497304',\n  //   '10497304',\n  //   '10511369',\n  //   '10511369',\n  //   '14747860',\n  //   '14747860',\n  // ];\n\n  // compute matic aunual block number: block height(16309458, 10000000)\n  let chainBlockNumberList = [\n    '6486',\n    '6486',\n    '28759',\n    '28759',\n    '28798',\n    '28798',\n    '40405',\n    '40405',\n  ];\n  return getChainIds().reduce((accum, i, index) => {\n    accum[i] = chainBlockNumberList[index];\n    return accum;\n  }, {});\n};\n\n// MAX UINT/INT256\n// hex(2**256-1)\nexport const MAX_UINT256 =\n  '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\n// hex((2**255 -1) // 10**18)\nexport const MAX_INT256 =\n  '0x9392ee8e921d5d073aff322e62439fcf32d7f344649470f90';\n\n","import { bTokenFactory, slpPoolFactory } from '../factory/contracts';\nimport { getSlpContractAddress } from '../utils';\n\n/**\n * Get liquidity info of SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.liquidity\n * @returns {string} response.bTokenBalance\n * @returns {string} response.shares\n */\nexport const getSlpLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    const [liquidity, bTokenBalance, shares] = await Promise.all([\n      bToken.balance(poolAddress),\n      bToken.balance(accountAddress),\n      slpPool.getLiquidity(accountAddress),\n    ]);\n\n    return {\n      poolLiquidity: liquidity.toString(),\n      bTokenBalance: bTokenBalance.toString(),\n      shares: shares.toString(),\n      shareValue: '1',\n    };\n  }\n  console.log('no SlpPool address, please check');\n  return {};\n};\n\n/**\n * Add liquidity to SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addSlpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    try {\n      const tx = await slpPool.addLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of slp pool' };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity to SLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeSlpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  // console.log('pool', poolAddress, bTokenAddress)\n  if (bTokenAddress) {\n    const slpPool = slpPoolFactory(chainId, poolAddress);\n    //slpPool.setAccount(accountAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    //bToken.setAccount(accountAddress);\n    try {\n      const tx = await slpPool.removeLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of slp pool' };\n  }\n  return res;\n};\n\n/**\n * Check account is unlocked in the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isSlpUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Unlock the account in the Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockSlp = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Get account balance in Slp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string} Account balance\n */\nexport const getSlpWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getSlpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n","import { bTokenFactory, clp2PoolFactory } from '../factory/contracts';\nimport { getClp2ContractAddress } from '../utils';\n\nexport const getClp2LiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\n    const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    const [liquidity, bTokenBalance, shares] = await Promise.all([\n      bToken.balance(poolAddress),\n      bToken.balance(accountAddress),\n      clp2Pool.getLiquidity(accountAddress),\n    ]);\n\n    return {\n      poolLiquidity: liquidity.toString(),\n      bTokenBalance: bTokenBalance.toString(),\n      shares: shares.toString(),\n      shareValue: '1',\n    };\n  }\n  console.log('no Clp2Pool address, please check');\n  return {};\n};\n\nexport const addClp2Liquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    try {\n      const tx = await clp2Pool.addLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp2 pool' };\n  }\n  return res;\n};\n\nexport const removeClp2Liquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clp2Pool = clp2PoolFactory(chainId, poolAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    try {\n      const tx = await clp2Pool.removeLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp2 pool' };\n  }\n  return res;\n};\n\nexport const isClp2Unlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\nexport const unlockClp2 = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\nexport const getClp2WalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getClp2ContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n","import {\n  bTokenFactory,\n  clpPoolFactory,\n  lTokenFactory,\n} from '../factory/contracts';\nimport { bg, getClpContractAddress } from '../utils';\n\n/**\n * Get liquidity Info of the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {string} response.totalSupply\n * @returns {string} response.poolLiquidity\n * @returns {string} response.shares\n * @returns {string} response.shareValue\n * @returns {string} response.maxRemovableShares\n */\nexport const getClpLiquidityInfo = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { lTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const clpPool = clpPoolFactory(chainId, poolAddress);\n  //pPool.setAccount(accountAddress);\n  const lToken = lTokenFactory(chainId, lTokenAddress, poolAddress);\n  //lToken.setAccount(accountAddress);\n\n  const [lTokenBalance, lTokenTotalSupply] = await Promise.all([\n    lToken.balance(accountAddress),\n    lToken.totalSupply(),\n  ]);\n  const { liquidity } = await clpPool.getStateValues();\n  //console.log(liquidity);\n\n  return {\n    totalSupply: lTokenTotalSupply.toString(),\n    poolLiquidity: liquidity.toString(),\n    shares: lTokenBalance.toString(),\n    shareValue: (lTokenTotalSupply.eq(0)\n      ? bg(0)\n      : liquidity.div(lTokenTotalSupply)\n    ).toString(),\n    maxRemovableShares: lTokenBalance.toString(),\n  };\n};\n\n/**\n * Add liquidity to the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const addClpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clpPool = clpPoolFactory(chainId, poolAddress);\n    //const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n    try {\n      const tx = await clpPool.addLiquidity(accountAddress, amount);\n      console.log(tx, typeof tx);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp pool' };\n  }\n  return res;\n};\n\n/**\n * Remove liquidity of the CLP pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @param {number} amount\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const removeClpLiquidity = async (\n  chainId,\n  poolAddress,\n  accountAddress,\n  amount\n) => {\n  let res;\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  if (bTokenAddress) {\n    const clpPool = clpPoolFactory(chainId, poolAddress);\n    try {\n      const tx = await clpPool.removeLiquidity(accountAddress, amount);\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      res = { success: false, error: err };\n    }\n  } else {\n    res = { success: false, error: 'unable to get bToken address of clp pool' };\n  }\n  return res;\n};\n\n/**\n * Check account is unlocked in the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {bool}\n */\nexport const isClpUnlocked = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  return await bToken.isUnlocked(accountAddress);\n};\n\n/**\n * Unlock the account in the Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} poolAddress\n * @param {string} accountAddress\n * @returns {Object} response\n * @returns {boolean} response.success\n * @returns {string} response.[error]\n * @returns {Object} response.transaction - eth transaction receipt object\n */\nexport const unlockClp = async (chainId, poolAddress, accountAddress) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n\n  let res;\n  try {\n    const tx = await bToken.unlock(accountAddress);\n    res = { success: true, transaction: tx };\n  } catch (err) {\n    res = { success: false, error: err };\n  }\n  return res;\n};\n\n/**\n * Get account balance in Clp pool\n * @async\n * @method\n * @param {string} chainId\n * @param {string} accountAddress\n * @returns {string} Account balance\n */\nexport const getClpWalletBalance = async (\n  chainId,\n  poolAddress,\n  accountAddress\n) => {\n  const { bTokenAddress } = getClpContractAddress(chainId, poolAddress);\n  const bToken = bTokenFactory(chainId, bTokenAddress, poolAddress);\n  //bToken.setAccount(accountAddress);\n  const balance = await bToken.balance(accountAddress);\n  return balance.toString();\n};\n","import { DeriEnv } from '../../config';\nimport jsonConfig from '../resouces/config.json';\nimport { validateObjectKeyExist, validateIsArray } from '../utils';\n\nconst validateConfig = (config) => {\n  validateObjectKeyExist(\n    [\n      'pool',\n      'pToken',\n      'lToken',\n      'router',\n      'initialBlock',\n      'bTokens',\n      'symbols',\n      'chainId',\n    ],\n    config,\n    ''\n  );\n  validateIsArray(config['bTokens'], 'bTokens');\n  config['bTokens'].forEach((prop) => {\n    validateObjectKeyExist(\n      ['bTokenId', 'bTokenSymbol', 'bToken'],\n      prop,\n      'bToken'\n    );\n  });\n  validateIsArray(config['symbols'], 'symbols');\n  config['symbols'].forEach((prop) => {\n    validateObjectKeyExist(['symbolId', 'symbol'], prop, 'symbol');\n  });\n};\n\nconst processConfig = (config) => {\n  // process config\n  config['bTokenCount'] = config['bTokens'].length;\n  config['symbolCount'] = config['symbols'].length;\n};\n\nconst getJsonConfig = () => {\n  const env = DeriEnv.get();\n  const configs = typeof jsonConfig === 'object' ? jsonConfig : JSON.parse(jsonConfig);\n  if (['prod', 'dev'].includes(env)) {\n    //console.log(env)\n    if (configs[env]) {\n      //console.log(configs[env])\n      // pools\n      const pools = configs[env].pools;\n      if (pools && Array.isArray(pools)) {\n        for (let i = 0; i < pools.length; i++) {\n          validateConfig(pools[i]);\n          processConfig(pools[i]);\n        }\n      }\n      //console.log(configs[env])\n      validateObjectKeyExist(['oracle'], configs[env], 'oracle')\n      validateObjectKeyExist(['brokerManager'], configs[env], 'brokerManager')\n      return configs[env];\n    }\n  }\n  throw new Error(\n    `getJsonConfig(): invalid config of env '${env}'`,\n    configs[env]\n  );\n};\n\nexport const getConfig = () => {\n  return getJsonConfig();\n};\n","import Web3 from 'web3';\nimport { metaMaskWeb3, web3Factory } from '../factory/web3';\n\nconst MAX_GAS_AMOUNT = 532731;\n\nexport class Contract {\n  constructor(chainId, contractAddress, contractAbi, isProvider) {\n    this.chainId = chainId;\n    this.contractAddress = contractAddress;\n    this.contractAbi = contractAbi;\n    this.isProvider = isProvider;\n  }\n  async _init() {\n    if (!this.web3) {\n      if (this.isProvider) {\n        this.web3 = await web3Factory(this.chainId);\n      } else {\n        this.web3 = metaMaskWeb3();\n      }\n      this.contract = new this.web3.eth.Contract(\n        this.contractAbi,\n        this.contractAddress\n      );\n    }\n  }\n\n  setAccount(accountAddress) {\n    this.accountAddress = accountAddress;\n    return this;\n  }\n  setPool(poolAddress) {\n    this.poolAddress = poolAddress;\n    return this;\n  }\n  async _call(method, args = []) {\n    let res\n    let retry = 2\n    while(retry > 0) {\n      try {\n        await this._init()\n        res = await this.contract.methods[method](...args).call();\n        break\n      } catch(err) {\n        retry -= 1\n        this.web3 = null\n        if (err.toString().includes('Invalid JSON RPC response')) {\n          console.log(`Invalid JSON RPC response with chainId(${this.chainId})`);\n        } else if (err.toString().includes(\"Returned values aren't valid,\")) {\n          console.log(`Invalid contract address(${this.contractAddress}) and chainId(${this.chainId})`);\n        }\n      }\n    }\n    if (retry === 0 && !res) {\n      throw new Error(`The contract(${this.contractAddress}) '${method}(${args})' failed with max retry 2.`)\n    }\n    return res\n  }\n\n  async _estimatedGas(method, args = [], accountAddress) {\n    let gas = 0;\n    for (let i = 0; i < 2; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (err) {\n        //console.log(\"err\", err);\n      }\n    }\n    if (gas == 0) gas = MAX_GAS_AMOUNT;\n    if (gas > MAX_GAS_AMOUNT) gas = MAX_GAS_AMOUNT;\n    return gas;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt === null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _transact(method, args, accountAddress) {\n    await this._init()\n    const gas = await this._estimatedGas(method, args, accountAddress)\n      //this.web3.eth.getGasPrice(),\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods[method](...args).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\nimport {\n  hasInvalidArgsValue,\n  getBTCUSDPrice,\n  getOracleInfo,\n  deriToNatural,\n  bg,\n} from '../utils';\nimport {\n  calculateFundingRate,\n  calculateLiquidityUsed,\n  processFundingRate,\n} from '../calculation';\n\n/* eslint-disable */\nconst POOL_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"DepositMargin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawMargin\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMaintenanceMarginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingRateCoefficient\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLiquidationReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationCutRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceDelayAllowance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"cumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"cumuFundingRateBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetVolume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"tradersNetCost\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[4]\",\"name\":\"addresses_\",\"type\":\"address[4]\"},{\"internalType\":\"uint256[12]\",\"name\":\"parameters_\",\"type\":\"uint256[12]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lShares\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"tradeVolume\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"tradeWithMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"withdrawMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class PerpetualPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, POOL_ABI, isProvider);\n    // this.contract = new this.web3.eth.Contract(POOL_ABI, this.contractAddress);\n  }\n\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async getStateValues() {\n    let result;\n    const defaultValue = bg(0);\n    try {\n      const res = await this._call('getStateValues');\n      //console.log(\"getStateValues() raw:\", res)\n      result = {\n        cumuFundingRate: deriToNatural(res.cumuFundingRate),\n        cumuFundingRateBlock: bg(res.cumuFundingRateBlock),\n        liquidity: deriToNatural(res.liquidity),\n        tradersNetVolume: deriToNatural(res.tradersNetVolume),\n        tradersNetCost: deriToNatural(res.tradersNetCost),\n      };\n    } catch (err) {\n      result = {\n        cumuFundingRate: defaultValue,\n        cumuFundingRateBlock: defaultValue,\n        liquidity: defaultValue,\n        tradersNetCost: defaultValue,\n        tradersNetVolume: defaultValue,\n      };\n      console.log(`getStateValues: ${err}`);\n    }\n    return result;\n  }\n\n  async getParameters() {\n    let result;\n    const defaultValue = bg(0);\n    try {\n      const res = await this._call('getParameters');\n      // console.log(\"getParameters() raw: \", res)\n      result = {\n        multiplier: deriToNatural(res.multiplier),\n        feeRatio: deriToNatural(res.feeRatio),\n        minPoolMarginRatio: deriToNatural(res.minPoolMarginRatio),\n        minInitialMarginRatio: deriToNatural(res.minInitialMarginRatio),\n        minMaintenanceMarginRatio: deriToNatural(res.minMaintenanceMarginRatio),\n        minAddLiquidity: deriToNatural(res.minAddLiquidity),\n        redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\n        fundingRateCoefficient: deriToNatural(res.fundingRateCoefficient),\n        minLiquidationReward: deriToNatural(res.minLiquidationReward),\n        maxLiquidationReward: deriToNatural(res.maxLiquidationReward),\n        liquidationCutRatio: deriToNatural(res.liquidationCutRatio),\n        priceDelayAllowance: bg(res.priceDelayAllowance),\n      };\n    } catch (err) {\n      result = {\n        multiplier: defaultValue,\n        feeRatio: defaultValue,\n        minPoolMarginRatio: defaultValue,\n        minInitialMarginRatio: defaultValue,\n        minMaintenanceMarginRatio: defaultValue,\n        minAddLiquidity: defaultValue,\n        redemptionFeeRatio: defaultValue,\n        fundingRateCoefficient: defaultValue,\n        minLiquidationReward: defaultValue,\n        maxLiquidationReward: defaultValue,\n        liquidationCutRatio: defaultValue,\n        priceDelayAllowance: defaultValue,\n      };\n      console.log(`getParameters: ${err}`);\n    }\n    return result;\n  }\n\n  _getTransactionReceipt(tx) {\n    const self = this;\n    return function _transactionReceipt(resolve, reject) {\n      self.web3.eth.getTransactionReceipt(tx, (error, receipt) => {\n        if (error) {\n          reject(error);\n        } else if (receipt == null) {\n          setTimeout(() => _transactionReceipt(resolve, reject), 500);\n        } else if (receipt.status === false) {\n          receipt.errorMessage = 'Transaction failed';\n          reject(receipt);\n        } else {\n          resolve(receipt);\n        }\n      });\n    };\n  }\n  async _estimatedGas(method, args, accountAddress) {\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    let gas = 0;\n    for (let i = 0; i < 20; i++) {\n      try {\n        gas = await this.contract.methods[method](...args).estimateGas({\n          from: accountAddress,\n        });\n        gas = parseInt(gas * 1.25);\n        break;\n      } catch (err) {\n        //console.log(\"err\", err);\n      }\n    }\n    if (gas == 0) gas = 532731;\n    if (gas > 532731) gas = 532731;\n    return gas;\n  }\n\n  async _transactPool(method, args = [], accountAddress) {\n    await this._init()\n    // !this.accountAddress &&\n    //   console.log('please do setAccount(accountAddress) first');\n    const oracle = await getOracleInfo(this.chainId, this.contractAddress);\n    let signed = [oracle.timestamp, oracle.price, oracle.v, oracle.r, oracle.s];\n\n    // const [gas, gasPrice] = await Promise.all([\n    //   this._estimatedGas(method, [...args, ...signed], accountAddress),\n    //   this.web3.eth.getGasPrice(),\n    // ]);\n    //console.log(`gasPrice ${gasPrice / 1000000000} GW`);\n    const gas = await this._estimatedGas(method, [...args, ...signed], accountAddress)\n\n    //gasPrice: Web3.utils.numberToHex(gasPrice),\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods[method](...args, ...signed).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n\n  async getFundingRate() {\n    let price, fundingRate, fundingRatePerBlock, liquidityUsed;\n    price = await getBTCUSDPrice(this.chainId, this.contractAddress);\n    try {\n      const { tradersNetVolume, liquidity } = await this.getStateValues();\n      const {\n        multiplier,\n        fundingRateCoefficient,\n        minPoolMarginRatio,\n      } = await this.getParameters();\n      //console.log(\"minPoolMarginRatio\", minPoolMarginRatio.toString())\n      const args1 = [\n        tradersNetVolume,\n        price,\n        multiplier,\n        liquidity,\n        fundingRateCoefficient,\n      ];\n      if (hasInvalidArgsValue(...args1)) {\n        fundingRate = '0';\n        fundingRatePerBlock = '0';\n      } else {\n        fundingRatePerBlock = calculateFundingRate(...args1);\n        fundingRate = processFundingRate(this.chainId, fundingRatePerBlock);\n      }\n      const args2 = [\n        tradersNetVolume,\n        price,\n        multiplier,\n        liquidity,\n        minPoolMarginRatio,\n      ];\n      if (hasInvalidArgsValue(...args2)) {\n        liquidityUsed = '0';\n      } else {\n        liquidityUsed = calculateLiquidityUsed(...args2);\n      }\n      return {\n        price,\n        multiplier: multiplier.toString(),\n        fundingRate: fundingRate,\n        fundingRatePerBlock: fundingRatePerBlock,\n        tradersNetVolume: tradersNetVolume.toString(),\n        liquidity: liquidity.toString(),\n        fundingRateCoefficient: fundingRateCoefficient.toString(),\n        liquidityUsed: liquidityUsed,\n        poolMarginRatio: minPoolMarginRatio.toString(),\n      };\n    } catch (err) {\n      console.log('PerpetualPool#gerFundingRate():', err);\n      throw err;\n    }\n  }\n\n  async depositMargin(accountAddress, amount) {\n    //await this.web3.eth.getAccounts(console.log)\n    //console.log('depositMargin');\n    let res;\n    try {\n      let tx = await this._transactPool(\n        'depositMargin(uint256,uint256,uint256,uint8,bytes32,bytes32)',\n        [amount],\n        accountAddress\n      );\n      res = { success: true, transaction: tx };\n    } catch (err) {\n      console.log('here');\n      res = { success: false, error: err };\n    }\n    return res;\n  }\n  async _getBlockInfo(blockNumber) {\n    await this._init()\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n  async _getPastEvents(eventName, filter = {}, fromBlock = 0, to = 0) {\n    await this._init()\n    let events = [];\n    //let toBlock = await this._getBlockInfo(\"latest\");\n    //toBlock = toBlock.number;\n    let amount;\n    if (['56', '137', '97', '80001'].includes(this.chainId)) {\n      amount = 999;\n    } else {\n      amount = 4999;\n    }\n    if (fromBlock + amount > to) {\n      amount = to - fromBlock;\n    }\n    while (fromBlock <= to) {\n      //console.log('tick')\n      let es = await this.contract.getPastEvents(eventName, {\n        filter: filter,\n        fromBlock,\n        toBlock: fromBlock + amount,\n      });\n      for (let e of es) {\n        events.push(e);\n      }\n      fromBlock += amount + 1;\n      if (fromBlock + amount > to) {\n        amount = to - fromBlock;\n      }\n    }\n    return events;\n  }\n  async _getTimeStamp(blockNumber) {\n    await this._init()\n    return await this.web3.eth.getBlock(blockNumber);\n  }\n  _calculateFee(volume, price, multiplier, feeRatio) {\n    return bg(volume)\n      .abs()\n      .times(price)\n      .times(multiplier)\n      .times(feeRatio)\n      .toString();\n  }\n}\n","import { Contract } from './contract';\nimport { bg, deriToNatural, MAX_VALUE } from '../utils';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_upgradedAddress\",\"type\":\"address\"}],\"name\":\"deprecate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deprecated\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evilUser\",\"type\":\"address\"}],\"name\":\"addBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_maker\",\"type\":\"address\"}],\"name\":\"getBlackListStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newBasisPoints\",\"type\":\"uint256\"},{\"name\":\"newMaxFee\",\"type\":\"uint256\"}],\"name\":\"setParams\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"basisPointsRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_clearedUser\",\"type\":\"address\"}],\"name\":\"removeBlackList\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_blackListedUser\",\"type\":\"address\"}],\"name\":\"destroyBlackFunds\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"Deprecate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"feeBasisPoints\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"Params\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_blackListedUser\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"DestroyedBlackFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"AddedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"RemovedBlackList\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"}]\n/* eslint-enable */\n\nexport class BTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    this.poolAddress = poolAddress;\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n\n  async isUnlocked(accountAddress) {\n    let allowance = await this._call('allowance', [\n      accountAddress,\n      this.poolAddress,\n    ]);\n    allowance = deriToNatural(allowance);\n    return allowance.gt(0);\n  }\n\n  async unlock(accountAddress) {\n    return await this._transact(\n      'approve',\n      [this.poolAddress, MAX_VALUE],\n      accountAddress\n    );\n  }\n\n  async symbol() {\n    return await this._call('symbol');\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n  async _balance(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balance(address) {\n    const [res, decimals] = await Promise.all([\n      this._balance(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n}\n","import { deriToNatural, bg } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"Update\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"volume\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"cost\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lastCumuFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class PTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    this.poolAddress = poolAddress;\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n\n  async getPositionInfo(accountAddress) {\n    let result = {};\n    try {\n      const res = await this._call('getPosition(address)', [accountAddress]);\n      //console.log(\"getPositionInfo() raw:\", res)\n      result = {\n        volume: deriToNatural(res[0]),\n        cost: deriToNatural(res[1]),\n        lastCumuFundingRate: deriToNatural(res[2]),\n        margin: deriToNatural(res[3]),\n        lastUpdateTimestamp: bg(res[4]),\n      };\n    } catch (err) {\n      result = {\n        volume: bg(0),\n        cost: bg(0),\n        lastCumuFundingRate: bg(0),\n        margin: bg(0),\n        lastUpdateTimestamp: bg(0),\n      };\n      //console.log(`getPositionInfo: ${err}`);\n    }\n    return result;\n  }\n\n  async exists(accountAddress) {\n    return await this._call('exists', [accountAddress]);\n  }\n}\n","import { deriToNatural } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class LTokenContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    this.poolAddress = poolAddress;\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n\n  async balance(accountAddress) {\n    const res = deriToNatural(await this._call('balanceOf', [accountAddress]));\n    //console.log(\"> lToken balance\", res.toString())\n    return res;\n  }\n\n  async totalSupply() {\n    const res = deriToNatural(await this._call('totalSupply'));\n    //console.log(\"> lToken totalSupply\", res.toString())\n    return res;\n  }\n}\n","import Web3 from 'web3';\nimport { getDBProviderUrlsConfig } from '../config/database';\nimport { getLatestRPCServer } from '../utils';\n\nexport class DatabaseBaseContract {\n  constructor(contractAddress, contractAbi) {\n    this.contractAddress = contractAddress;\n    this.contractAbi = contractAbi;\n  }\n  _init() {\n    this.web3 = new Web3(new Web3.providers.HttpProvider(this.providerUrl));\n    this.contract = new this.web3.eth.Contract(\n      this.contractAbi,\n      this.contractAddress\n    );\n  }\n\n  async updateProviderUrl() {\n    if (!this.providerUrl) {\n      this.providerUrl = await getLatestRPCServer(getDBProviderUrlsConfig());\n      this._init();\n    }\n  }\n\n  async _call(method, args) {\n    let res\n    let retry = 3\n    while(retry > 0) {\n      try {\n        await this.updateProviderUrl();\n        res = await this.contract.methods[method](...args).call();\n        break\n      } catch (err) {\n        this.providerUrl = null\n      }\n      retry -= 1\n    }\n    if (retry === 0 && !res) {\n      throw new Error(`database ${method}(${args}): exceed max retry 3.`)\n    }\n    return res\n  }\n}\n","import { DatabaseBaseContract } from './database_base';\n\n/* eslint-disable */\nconst DB_CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"setValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseContract extends DatabaseBaseContract {\n  constructor(contractAddress) {\n    super(contractAddress, DB_CONTRACT_ABI)\n  }\n  async getValues(keyArray) {\n    return await this._call('getValues', [keyArray])\n  }\n}\n","import { DatabaseBaseContract } from './database_base'\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signature\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"values\",\"type\":\"address[]\"}],\"name\":\"unsetSignature\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseWormholeContract extends DatabaseBaseContract {\n  constructor(contractAddress) {\n    super(contractAddress, CONTRACT_ABI)\n  }\n\n  async signature(accountAddress) {\n    return await this._call('signature', [accountAddress])\n  }\n}\n","import { DatabaseBaseContract } from './database_base'\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"data\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"}],\"name\":\"delController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structDatabase.Params1[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"setValues\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DatabaseAirdropContract extends DatabaseBaseContract {\n  constructor(contractAddress) {\n    super(contractAddress, CONTRACT_ABI)\n  }\n  async getValues(keyArray) {\n    return await this._call('getValues', [keyArray])\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI={\"_format\":\"hh-sol-artifact-1\",\"contractName\":\"Vault\",\"sourceName\":\"contracts/Vault.sol\",\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"bytecode\":\"\",\"deployedBytecode\":\"\",\"linkReferences\":{},\"deployedLinkReferences\":{}}\n/* eslint-enable */\n\nexport class MiningVaultPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI['abi'], isProvider);\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI['abi'],\n    //   this.contractAddress\n    // );\n  }\n  async mintDToken(accountAddress, ...args) {\n    await this._init()\n    const gas = await this._estimatedGas(\n      'claim',\n      [accountAddress, ...args],\n      accountAddress\n    );\n    console.log(gas);\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods['claim'](\n          accountAddress,\n          ...args\n        ).encodeABI(),\n      },\n    ];\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import Web3 from 'web3';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"miningVault_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v1\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r1\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s1\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v2\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r2\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s2\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningVault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setNewController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class MiningVaultRouter extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n  async mint(accountAddress, ...args) {\n    await this._init()\n    //console.log(accountAddress, args)\n    const gas = await this._estimatedGas(\n      'claim',\n      [accountAddress, ...args],\n      accountAddress\n    );\n    //console.log(gas);\n    let txRaw = [\n      {\n        from: accountAddress,\n        to: this.contractAddress,\n        gas: Web3.utils.numberToHex(gas),\n        value: Web3.utils.numberToHex('0'),\n        data: this.contract.methods['claim'](\n          accountAddress,\n          ...args\n        ).encodeABI(),\n      },\n    ];\n    //console.log('txRaw', txRaw)\n    let tx = await window.ethereum.request({\n      method: 'eth_sendTransaction',\n      params: txRaw,\n    });\n    return await new Promise(this._getTransactionReceipt(tx));\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"_sushi\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sushiPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bonusEndBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contractIERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingSushi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accSushiPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushi\",\"outputs\":[{\"internalType\":\"contractSushiToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class SlpPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [152, naturalToDeri(amount)];\n    return await this._transact('deposit', args, accountAddress);\n  }\n  async removeLiquidity(accountAddress, amount) {\n    const args = [152, naturalToDeri(amount)];\n    return await this._transact('withdraw', args, accountAddress);\n  }\n  async getLiquidity(accountAddress) {\n    const res = await this._call('userInfo', [152, accountAddress]);\n    if (res && res.amount) {\n      return deriToNatural(res.amount);\n    } else {\n      console.log('the amount is not exist ');\n      return '0';\n    }\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"removeAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minAddLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"redemptionFeeRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[2]\",\"name\":\"addresses_\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"parameters_\",\"type\":\"uint256[2]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class ClpPool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [naturalToDeri(amount)];\n    return await this._transact('addLiquidity', args, accountAddress);\n  }\n\n  async removeLiquidity(accountAddress, amount) {\n    const args = [naturalToDeri(amount)];\n    return await this._transact('removeLiquidity', args, accountAddress);\n  }\n\n  async getParameters() {\n    const res = await this._call('getParameters');\n    return {\n      minAddLiquidity: deriToNatural(res.minAddLiquidity),\n      redemptionFeeRatio: deriToNatural(res.redemptionFeeRatio),\n    };\n  }\n\n  async getStateValues() {\n    const res = await this._call('getStateValues');\n    return {\n      liquidity: deriToNatural(res),\n    };\n  }\n\n  async getLiquidity() {\n    const res = await this._call('getStateValues');\n    if (res && res.liquidity) {\n      return deriToNatural(res.liquidity);\n    }\n    throw new Error(\n      `unable to get liquidity of this clp pool ${this.poolAddress}`\n    );\n  }\n}\n","import { deriToNatural, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI = [{\"inputs\":[{\"internalType\":\"contract CakeToken\",\"name\":\"_cake\",\"type\":\"address\"},{\"internalType\":\"contract SyrupBar\",\"name\":\"_syrup\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_cakePerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IBEP20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cake\",\"outputs\":[{\"internalType\":\"contract CakeToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cakePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devaddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"enterStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"leaveStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrator\",\"outputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingCake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accCakePerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMigratorChef\",\"name\":\"_migrator\",\"type\":\"address\"}],\"name\":\"setMigrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syrup\",\"outputs\":[{\"internalType\":\"contract SyrupBar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplierNumber\",\"type\":\"uint256\"}],\"name\":\"updateMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class Clp2Pool extends Contract {\n  constructor(chainId, contractAddress, isProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, isProvider);\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n  async addLiquidity(accountAddress, amount) {\n    const args = [391, naturalToDeri(amount)];\n    return await this._transact('deposit', args, accountAddress);\n  }\n  async removeLiquidity(accountAddress, amount) {\n    const args = [391, naturalToDeri(amount)];\n    return await this._transact('withdraw', args, accountAddress);\n  }\n  async getLiquidity(accountAddress) {\n    //console.log('hit clp2')\n    const res = await this._call('userInfo', [391, accountAddress]);\n    if (res && res.amount) {\n      return deriToNatural(res.amount);\n    } else {\n      console.log('the amount is not exist ');\n      return '0';\n    }\n  }\n}","import { deriToNatural, MAX_VALUE, bg } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldController\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"ChangeController\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class DeriContract extends Contract {\n  constructor(chainId, contractAddress, poolAddress, useProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, useProvider);\n    this.poolAddress = poolAddress;\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n\n  async isUnlocked(accountAddress) {\n    let allowance = await this._call('allowance', [\n      accountAddress,\n      this.poolAddress,\n    ]);\n    return deriToNatural(allowance).gt(0);\n  }\n  async unlock(accountAddress) {\n    //!this.poolAddress && console.log('please do setAccount(poolAddress) first');\n    return await this._transact(\n      'approve',\n      [this.poolAddress, MAX_VALUE],\n      accountAddress\n    );\n  }\n\n  async decimals() {\n    return await this._call('decimals');\n  }\n\n  async _balance(address) {\n    return await this._call('balanceOf', [address]);\n  }\n\n  async balance(address) {\n    const [res, decimals] = await Promise.all([\n      this._balance(address),\n      this.decimals(),\n    ]);\n    return bg(res, -decimals);\n  }\n}\n","import { getDeriContractAddress, naturalToDeri } from '../utils';\nimport { Contract } from './contract';\n\n/* eslint-disable */\nconst CONTRACT_ABI=[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowMintBurn_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ApproveMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"ExecuteMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Freeze\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"migrationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"PrepareMigration\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowMintBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approveMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"fromWormhole\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromNonce\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"executeMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"toWormhole\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMigrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationDestination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"graceDays\",\"type\":\"uint256\"}],\"name\":\"prepareMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedHash\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]\n/* eslint-enable */\n\nexport class WormholeContract extends Contract {\n  constructor(chainId, contractAddress, useProvider) {\n    super(chainId, contractAddress, CONTRACT_ABI, useProvider);\n    // this.contract = new this.web3.eth.Contract(\n    //   CONTRACT_ABI,\n    //   this.contractAddress\n    // );\n  }\n  async freeze(accountAddress, amount, toChainId) {\n    const { wormholeAddress: toWormholeAddress } = getDeriContractAddress(\n      toChainId\n    );\n    return this._transact(\n      'freeze',\n      [naturalToDeri(amount), toChainId, toWormholeAddress],\n      accountAddress\n    );\n  }\n\n  async mintDeri(\n    accountAddress,\n    amount,\n    fromChainId,\n    fromWormhole,\n    fromNonce,\n    v,\n    r,\n    s\n  ) {\n    return this._transact(\n      'claim',\n      [amount, fromChainId, fromWormhole, fromNonce, v, r, s],\n      accountAddress\n    );\n  }\n}\n","import { PerpetualPool } from '../contract/perpetual_pool';\nimport { BTokenContract } from '../contract/bToken';\nimport { PTokenContract } from '../contract/pToken';\nimport { LTokenContract } from '../contract/lToken';\nimport { DatabaseContract } from '../contract/database';\nimport { DatabaseWormholeContract } from '../contract/database_wormhole';\nimport { DatabaseAirdropContract } from '../contract/database_airdrop';\nimport { MiningVaultPool } from '../contract/mining_vault_pool';\nimport { MiningVaultRouter } from '../contract/mining_vault_router';\n\nimport { DeriEnv } from '../config/env';\nimport { getDBAddressConfig, getDBWormholeAddressConfig, getDBAirdropAddressConfig } from '../config';\nimport { SlpPool } from '../contract/slp_pool';\nimport { ClpPool } from '../contract/clp_pool';\nimport { Clp2Pool } from '../contract/clp2_pool';\nimport { DeriContract } from '../contract/deri';\nimport { WormholeContract } from '../contract/wormhole';\n//import { getLpContractAddress } from '../utils';\n// import { getPoolBaseSymbolList } from '../utils'\n\nexport const databaseFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const databaseWormholeFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBWormholeAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseWormholeContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const databaseAirdropFactory = (() => {\n  const databaseInstanceMap = {};\n  return (useProductionDB = false) => {\n    const address = getDBAirdropAddressConfig(DeriEnv.get(), useProductionDB);\n    const key = address;\n    //console.log('---airdrop key', key)\n    if (Object.keys(databaseInstanceMap).includes(key)) {\n      return databaseInstanceMap[key];\n    }\n    const database = new DatabaseAirdropContract(address);\n    databaseInstanceMap[key] = database;\n    return database;\n  };\n})();\n\nexport const perpetualPoolFactory = (() => {\n  const perpetualPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(perpetualPoolInstanceMap).includes(key)) {\n      return perpetualPoolInstanceMap[key];\n    }\n    const perpetualPool = new PerpetualPool(\n      chainId,\n      contractAddress,\n      isProvider\n    );\n    // console.log(\"new PerpetualPoolContract\");\n    perpetualPoolInstanceMap[key] = perpetualPool;\n    return perpetualPool;\n  };\n})();\n\nexport const bTokenFactory = (function () {\n  const bTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(bTokenInstanceMap).includes(key)) {\n      return bTokenInstanceMap[key];\n    }\n    const bToken = new BTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new BTokenContract\")\n    bTokenInstanceMap[key] = bToken;\n    return bToken;\n  };\n})();\n\nexport const pTokenFactory = (function () {\n  const pTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(pTokenInstanceMap).includes(key)) {\n      return pTokenInstanceMap[key];\n    }\n    const pToken = new PTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new PTokenContract\")\n    pTokenInstanceMap[key] = pToken;\n    return pToken;\n  };\n})();\n\nexport const lTokenFactory = (function () {\n  const lTokenInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.${poolAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}.${poolAddress}`;\n    }\n    if (Object.keys(lTokenInstanceMap).includes(key)) {\n      return lTokenInstanceMap[key];\n    }\n    const lToken = new LTokenContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    // console.log(\"new LTokenContract\")\n    lTokenInstanceMap[key] = lToken;\n    return lToken;\n  };\n})();\n\nexport const miningVaultPoolFactory = (function () {\n  const mVaultInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\n      return mVaultInstanceMap[key];\n    }\n    const mVault = new MiningVaultPool(chainId, contractAddress, isProvider);\n    // console.log(\"new MiningValutPool\")\n    mVaultInstanceMap[key] = mVault;\n    return mVault;\n  };\n})();\n\nexport const slpPoolFactory = (function () {\n  const slpPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(slpPoolInstanceMap).includes(key)) {\n      return slpPoolInstanceMap[key];\n    }\n    const slpPool = new SlpPool(chainId, contractAddress, isProvider);\n    slpPoolInstanceMap[key] = slpPool;\n    return slpPool;\n  };\n})();\n\nexport const clpPoolFactory = (function () {\n  const clpPoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(clpPoolInstanceMap).includes(key)) {\n      return clpPoolInstanceMap[key];\n    }\n    const clpPool = new ClpPool(chainId, contractAddress, isProvider);\n    clpPoolInstanceMap[key] = clpPool;\n    return clpPool;\n  };\n})();\n\nexport const clp2PoolFactory = (function () {\n  const clp2PoolInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(clp2PoolInstanceMap).includes(key)) {\n      return clp2PoolInstanceMap[key];\n    }\n    const clp2Pool = new Clp2Pool(chainId, contractAddress, isProvider);\n    clp2PoolInstanceMap[key] = clp2Pool;\n    return clp2Pool;\n  };\n})();\n\n// export const lpPoolFactory = (function () {\n//   const lpPoolInstanceMap = {};\n//   return (chainId, contractAddress, isProvider = false) => {\n//     let key;\n//     if (isProvider) {\n//       key = `${chainId}.${contractAddress}.isProvider`;\n//     } else {\n//       key = `${chainId}.${contractAddress}`;\n//     }\n//     if (Object.keys(lpPoolInstanceMap).includes(key)) {\n//       return lpPoolInstanceMap[key];\n//     } else {\n//       let lpPool;\n//       const { type } = getLpContractAddress(chainId, contractAddress);\n//       console.log(`lp type: ${type}`);\n//       if (type === 'slp') {\n//         lpPool = new SlpPool(chainId, contractAddress, isProvider);\n//       } else if (type === 'clp') {\n//         lpPool = new ClpPool(chainId, contractAddress, isProvider);\n//       }\n//       lpPoolInstanceMap[key] = lpPool;\n//       return lpPool;\n//     }\n//   };\n// })();\n\nexport const deriFactory = (function () {\n  const deriInstanceMap = {};\n  return (chainId, contractAddress, poolAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(deriInstanceMap).includes(key)) {\n      return deriInstanceMap[key];\n    }\n    const deri = new DeriContract(\n      chainId,\n      contractAddress,\n      poolAddress,\n      isProvider\n    );\n    deriInstanceMap[key] = deri;\n    return deri;\n  };\n})();\n\nexport const wormholeFactory = (function () {\n  const wormholeInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(wormholeInstanceMap).includes(key)) {\n      return wormholeInstanceMap[key];\n    }\n    const wormhole = new WormholeContract(chainId, contractAddress, isProvider);\n    wormholeInstanceMap[key] = wormhole;\n    return wormhole;\n  };\n})();\n\nexport const miningVaultRouterFactory = (function () {\n  const mVaultInstanceMap = {};\n  return (chainId, contractAddress, isProvider = false) => {\n    let key;\n    if (isProvider) {\n      key = `${chainId}.${contractAddress}.isProvider`;\n    } else {\n      key = `${chainId}.${contractAddress}`;\n    }\n    if (Object.keys(mVaultInstanceMap).includes(key)) {\n      return mVaultInstanceMap[key];\n    }\n    const mVault = new MiningVaultRouter(chainId, contractAddress, isProvider);\n    mVaultInstanceMap[key] = mVault;\n    return mVault;\n  };\n})();\n","import { getChainIds } from '../config/chain';\nimport Web3 from 'web3';\n\n// validate\nexport const normalizeChainId = (chainId) => {\n  const chainIds = getChainIds()\n  let res = chainId ? chainId.toString() : chainId;\n  if (chainId && chainIds.includes(res)) {\n    return res;\n  } else {\n    throw new Error(`invalid chainId: ${chainId}`);\n  }\n};\n\nexport const normalizeAddress = (address) => {\n  if (address && typeof address === 'string' && address.startsWith('0x')) {\n    return Web3.utils.toChecksumAddress(address);\n  } else {\n    throw new Error(`invalid address: ${address}`);\n  }\n};\n\nexport const validateArgs = (...args) =>\n  args.every((i) => !isNaN(parseFloat(i)));\n\nexport const validateObjectKeyExist = (keyList, val, valName) => {\n  const keys = Object.keys(val);\n  keyList.forEach((prop) => {\n    if (!keys.includes(prop)) {\n      throw new Error(\n        `validateConfig(): property ${prop} is not exist in the ${valName} config.`\n      );\n    }\n  });\n};\nexport const validateIsArray = (val, valName) => {\n  if (!Array.isArray(val)) {\n    throw new Error(\n      `validateConfig(): property ${valName} is an array in the config.`\n    );\n  }\n};\n","// export const DERI_ENV=\"dev\"\nexport const DeriEnv = (() => {\n  let _deriEnv = 'dev';\n  return {\n    get: () => _deriEnv,\n    set: (value) => {\n      if (value === 'dev' || value === 'prod' || value === 'production') {\n        _deriEnv = value;\n      } else {\n        throw new Error(\"please use 'dev' or 'prod' for DeriEnv\");\n      }\n    },\n  };\n})();\n"],"sourceRoot":""}